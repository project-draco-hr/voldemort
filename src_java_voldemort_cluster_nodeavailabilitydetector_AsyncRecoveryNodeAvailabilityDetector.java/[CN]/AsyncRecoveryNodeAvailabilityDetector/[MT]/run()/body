{
  ByteArray key=new ByteArray((byte)1);
  while (!Thread.currentThread().isInterrupted()) {
    try {
      Thread.sleep(nodeBannagePeriod);
    }
 catch (    InterruptedException e) {
      break;
    }
    Set<Node> unavailableNodesCopy=new HashSet<Node>();
synchronized (unavailableNodes) {
      unavailableNodesCopy.addAll(unavailableNodes);
    }
    if (getStores() == null) {
      if (logger.isEnabledFor(Level.WARN))       logger.warn("Stores not yet set; cannot determine node availability");
      continue;
    }
    for (    Node node : unavailableNodesCopy) {
      if (logger.isDebugEnabled())       logger.debug("Checking previously unavailable node " + node);
      Store<ByteArray,byte[]> store=stores.get(node.getId());
      if (store == null) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn(node + " store is null; cannot determine node availability");
        continue;
      }
      try {
        store.get(key);
        recordSuccess(node);
        if (logger.isInfoEnabled())         logger.info(node + " now available");
      }
 catch (      UnreachableStoreException e) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn(node + " still unavailable");
      }
catch (      Exception e) {
        if (logger.isEnabledFor(Level.ERROR))         logger.error(node + " unavailable due to error",e);
      }
    }
  }
}
