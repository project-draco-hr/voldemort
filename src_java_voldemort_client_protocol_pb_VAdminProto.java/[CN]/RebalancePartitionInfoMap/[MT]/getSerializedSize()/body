{
  int size=memoizedSerializedSize;
  if (size != -1)   return size;
  size=0;
  if (hasStealerId()) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,getStealerId());
  }
  if (hasDonorId()) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,getDonorId());
  }
{
    int dataSize=0;
    for (    java.lang.String element : getUnbalancedStoresList()) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeStringSizeNoTag(element);
    }
    size+=dataSize;
    size+=1 * getUnbalancedStoresList().size();
  }
  if (hasAttempt()) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(7,getAttempt());
  }
  for (  voldemort.client.protocol.pb.VAdminProto.PartitionTuple element : getReplicaToPartitionList()) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(8,element);
  }
  if (hasInitialCluster()) {
    size+=com.google.protobuf.CodedOutputStream.computeStringSize(9,getInitialCluster());
  }
  if (hasDeletePartitions()) {
    size+=com.google.protobuf.CodedOutputStream.computeBoolSize(10,getDeletePartitions());
  }
  size+=getUnknownFields().getSerializedSize();
  memoizedSerializedSize=size;
  return size;
}
