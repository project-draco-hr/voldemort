{
  RestServerRequestValidator requestValidator;
  if (!readingChunks) {
    HttpRequest request=this.request=(HttpRequest)messageEvent.getMessage();
    String requestURI=this.request.getUri();
    if (logger.isDebugEnabled()) {
      logger.debug("Request URI: " + requestURI);
    }
    if (request.isChunked()) {
      readingChunks=true;
    }
 else {
      HttpMethod httpMethod=request.getMethod();
      if (httpMethod.equals(HttpMethod.GET)) {
        requestValidator=new RestServerGetRequestValidator(request,messageEvent,storeRepository);
      }
 else       if (httpMethod.equals(HttpMethod.POST)) {
        requestValidator=new RestServerPutRequestValidator(request,messageEvent,storeRepository);
      }
 else       if (httpMethod.equals(HttpMethod.DELETE)) {
        requestValidator=new RestServerDeleteRequestValidator(request,messageEvent,storeRepository);
      }
 else {
        String errorMessage="Illegal Http request.";
        logger.error(errorMessage);
        RestServerErrorHandler.writeErrorResponse(messageEvent,BAD_REQUEST,errorMessage);
        return;
      }
      CompositeVoldemortRequest<ByteArray,byte[]> requestObject=requestValidator.constructCompositeVoldemortRequestObject();
      if (requestObject != null) {
        long now=System.currentTimeMillis();
        if (requestObject.getRequestOriginTimeInMs() + requestObject.getRoutingTimeoutInMs() <= now) {
          RestServerErrorHandler.writeErrorResponse(messageEvent,HttpResponseStatus.REQUEST_TIMEOUT,"current time: " + now + "\torigin time: "+ requestObject.getRequestOriginTimeInMs()+ "\ttimeout in ms: "+ requestObject.getRoutingTimeoutInMs());
          return;
        }
 else {
          Store store=getStore(requestValidator.getStoreName(),requestValidator.getParsedRoutingType());
          if (store != null) {
            VoldemortStoreRequest voldemortStoreRequest=new VoldemortStoreRequest(requestObject,store,parseZoneId());
            Channels.fireMessageReceived(ctx,voldemortStoreRequest);
          }
 else {
            logger.error("Error when getting store. Non Existing store name.");
            RestServerErrorHandler.writeErrorResponse(messageEvent,HttpResponseStatus.BAD_REQUEST,"Non Existing store name. Critical error.");
            return;
          }
        }
      }
    }
  }
 else {
    HttpChunk chunk=(HttpChunk)messageEvent.getMessage();
    if (chunk.isLast()) {
      readingChunks=false;
    }
  }
}
