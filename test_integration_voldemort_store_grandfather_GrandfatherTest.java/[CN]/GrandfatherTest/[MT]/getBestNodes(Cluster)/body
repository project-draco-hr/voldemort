{
  List<Node> newNodes=Lists.newArrayList();
  int nodesInSingleZone=cluster.getNumberOfNodes() / 2;
  for (int nodeId=0; nodeId < nodesInSingleZone; nodeId++) {
    List<Integer> partitions=Lists.newArrayList();
    partitions.addAll(cluster.getNodeById(nodeId).getPartitionIds());
    partitions.addAll(cluster.getNodeById(nodeId + nodesInSingleZone).getPartitionIds());
    Collections.shuffle(partitions);
    List<Integer> partitionsNode1=partitions.subList(0,partitions.size() / 2);
    List<Integer> partitionsNode2=partitions.subList(partitions.size() / 2,partitions.size());
    newNodes.add(new Node(cluster.getNodeById(nodeId).getId(),cluster.getNodeById(nodeId).getHost(),cluster.getNodeById(nodeId).getHttpPort(),cluster.getNodeById(nodeId).getSocketPort(),cluster.getNodeById(nodeId).getAdminPort(),cluster.getNodeById(nodeId).getZoneId(),partitionsNode1));
    newNodes.add(new Node(cluster.getNodeById(nodeId + nodesInSingleZone).getId(),cluster.getNodeById(nodeId + nodesInSingleZone).getHost(),cluster.getNodeById(nodeId + nodesInSingleZone).getHttpPort(),cluster.getNodeById(nodeId + nodesInSingleZone).getSocketPort(),cluster.getNodeById(nodeId + nodesInSingleZone).getAdminPort(),cluster.getNodeById(nodeId + nodesInSingleZone).getZoneId(),partitionsNode2));
  }
  return newNodes;
}
