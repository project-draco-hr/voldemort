{
  StoreDefinitionsMapper mapper=new StoreDefinitionsMapper();
  List<StoreDefinition> storeDefs=mapper.readStoreList(new StringReader(VoldemortTestConstants.getTwoStoresWithZonesXml()));
  StoreDefinition consistentStore=storeDefs.get(0);
  StoreDefinition zoneStore=storeDefs.get(1);
  assertEquals(consistentStore.getName(),"cstore");
  assertEquals(zoneStore.getName(),"zstore");
  Cluster cluster=VoldemortTestConstants.getEightNodeClusterWithZones();
  RoutingStrategy cStrategy=new RoutingStrategyFactory().updateRoutingStrategy(consistentStore,cluster);
  RoutingStrategy zStrategy=new RoutingStrategyFactory().updateRoutingStrategy(zoneStore,cluster);
  BdbStorageEngine cPrefixedBdbStore=(BdbStorageEngine)bdbStorage.getStore(consistentStore,cStrategy);
  BdbStorageEngine zPrefixedBdbStore=(BdbStorageEngine)bdbStorage.getStore(zoneStore,zStrategy);
  HashMap<ByteArray,byte[]> kvpairs=ServerTestUtils.createRandomKeyValuePairs(10000);
  for (  ByteArray key : kvpairs.keySet()) {
    assertEquals(cStrategy.getPartitionList(key.get()).get(0),zStrategy.getPartitionList(key.get()).get(0));
    cPrefixedBdbStore.put(key,new Versioned<byte[]>(kvpairs.get(key)),null);
    zPrefixedBdbStore.put(key,new Versioned<byte[]>(kvpairs.get(key)),null);
  }
  for (  ByteArray key : kvpairs.keySet()) {
    assertEquals("Values read back does not match up",0,ByteUtils.compare(cPrefixedBdbStore.get(key,null).get(0).getValue(),zPrefixedBdbStore.get(key,null).get(0).getValue()));
  }
  cPrefixedBdbStore.close();
  zPrefixedBdbStore.close();
}
