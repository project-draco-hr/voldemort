{
  super(cluster,storeDefinition);
  verifyClusterStoreDefinition();
  this.partitionIdToNodeIdMap=ClusterUtils.getCurrentPartitionMapping(cluster);
  this.nodeIdToNaryPartitionMap=new HashMap<Integer,List<Integer>>();
  this.nodeIdToZonePrimaryMap=new HashMap<Integer,List<Integer>>();
  for (  int nodeId : cluster.getNodeIds()) {
    this.nodeIdToNaryPartitionMap.put(nodeId,new ArrayList<Integer>());
    this.nodeIdToZonePrimaryMap.put(nodeId,new ArrayList<Integer>());
  }
  for (int masterPartitionId=0; masterPartitionId < cluster.getNumberOfPartitions(); ++masterPartitionId) {
    List<Integer> naryPartitionIds=getReplicatingPartitionList(masterPartitionId);
    for (    int naryPartitionId : naryPartitionIds) {
      int naryNodeId=getNodeIdForPartitionId(naryPartitionId);
      this.nodeIdToNaryPartitionMap.get(naryNodeId).add(masterPartitionId);
    }
  }
  for (  int nodeId : cluster.getNodeIds()) {
    int naryZoneId=cluster.getNodeById(nodeId).getZoneId();
    List<Integer> naryPartitionIds=this.nodeIdToNaryPartitionMap.get(nodeId);
    List<Integer> zoneNAries=this.nodeIdToZonePrimaryMap.get(nodeId);
    for (    int naryPartitionId : naryPartitionIds) {
      if (getZoneNaryForNodesPartition(naryZoneId,nodeId,naryPartitionId) == 0) {
        zoneNAries.add(naryPartitionId);
      }
    }
  }
}
