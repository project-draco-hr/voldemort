{
  Cluster currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3,4,5,6,7,8},{}});
  Cluster targetCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,4,5,6,7,8},{2,3}});
  List<Integer> serverList=Arrays.asList(0,1);
  currentCluster=startServers(currentCluster,storeDefFile,serverList,null);
  targetCluster=updateCluster(targetCluster);
  populateData(currentCluster,Arrays.asList(0));
  AdminClient adminClient=new AdminClient(getBootstrapUrl(currentCluster,0),new AdminClientConfig());
  RebalancePartitionsInfo rebalancePartitionsInfo=new RebalancePartitionsInfo(1,0,Arrays.asList(2,3),Arrays.asList(2,3),Arrays.asList(2,3),Arrays.asList(testStoreName),0,true);
  int requestId=adminClient.rebalanceNode(rebalancePartitionsInfo);
  logger.info("started rebalanceNode, request id = " + requestId);
  Thread.sleep(25);
  stopServer(Arrays.asList(1));
  logger.info("waiting ten seconds after shutting down the node");
  Thread.sleep(10000);
  String hostName=currentCluster.getNodeById(1).getHost();
  startClusterNode(hostName,ec2RebalanceTestConfig,1);
  adminClient.stop();
  adminClient=new AdminClient(getBootstrapUrl(currentCluster,0),new AdminClientConfig());
  Versioned<MetadataStore.VoldemortState> serverState=adminClient.getRemoteServerState(1);
  int delay=250;
  int maxDelay=1000 * 30;
  int timeout=5 * 1000 * 60;
  long start=System.currentTimeMillis();
  while (System.currentTimeMillis() < start + timeout && serverState.getValue() != MetadataStore.VoldemortState.NORMAL_SERVER) {
    Thread.sleep(delay);
    if (delay < maxDelay)     delay*=2;
    serverState=adminClient.getRemoteServerState(1);
    logger.info("serverState -> " + serverState.getValue());
  }
  if (serverState.getValue() == MetadataStore.VoldemortState.NORMAL_SERVER) {
    for (    int nodeId : Arrays.asList(1)) {
      List<Integer> availablePartitions=targetCluster.getNodeById(nodeId).getPartitionIds();
      List<Integer> unavailablePartitions=getUnavailablePartitions(targetCluster,availablePartitions);
      try {
        checkGetEntries(currentCluster.getNodeById(nodeId),targetCluster,unavailablePartitions,availablePartitions);
      }
 catch (      InvalidMetadataException e) {
        logger.warn(e);
      }
    }
  }
 else   fail("Server state never reached NORMAL_SERVER");
}
