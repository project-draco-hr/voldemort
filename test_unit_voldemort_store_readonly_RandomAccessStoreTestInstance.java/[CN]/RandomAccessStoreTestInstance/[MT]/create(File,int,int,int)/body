{
  Map<String,String> data=createTestData(testSize);
  JsonReader reader=makeTestDataReader(data,baseDir);
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < numNodes; i++) {
    nodes.add(new Node(i,"localhost",8080 + i,6666 + i,Arrays.asList(4 * i,4 * i + 1,4 * i + 2,4 * i + 3)));
  }
  Cluster cluster=new Cluster("test",nodes);
  SerializerDefinition serDef=new SerializerDefinition("json","'string'");
  StoreDefinition storeDef=new StoreDefinition("test",StorageEngineType.READONLY,serDef,serDef,RoutingTier.CLIENT,repFactor,1,1,1,1,1);
  RoutingStrategy router=new ConsistentRoutingStrategy(cluster.getNodes(),repFactor);
  File outputDir=TestUtils.getTempDirectory(baseDir);
  JsonStoreBuilder storeBuilder=new JsonStoreBuilder(reader,cluster,storeDef,router,outputDir,testSize / 5,1);
  storeBuilder.build();
  @SuppressWarnings("unchecked") Serializer<String> serializer=(Serializer<String>)new DefaultSerializerFactory().getSerializer(serDef);
  Map<Integer,Store<String,String>> nodeStores=Maps.newHashMap();
  File nodeDataDir=new File(baseDir,"nodes");
  nodeDataDir.deleteOnExit();
  for (int i=0; i < numNodes; i++) {
    File nodeDir=new File(nodeDataDir,Integer.toString(i));
    nodeDir.mkdirs();
    boolean indexCreated=new File(outputDir,i + ".index").renameTo(new File(nodeDir,"test.index"));
    boolean dataFileCreated=new File(outputDir,i + ".data").renameTo(new File(nodeDir,"test.data"));
    if (!indexCreated || !dataFileCreated)     throw new IllegalArgumentException("Failed to create index or data file.");
    nodeStores.put(i,new SerializingStore<String,String>(new RandomAccessFileStore("test",nodeDir,1,3,1000,100 * 1024),serializer,serializer));
  }
  return new RandomAccessStoreTestInstance(data,baseDir,nodeStores,router,serializer);
}
