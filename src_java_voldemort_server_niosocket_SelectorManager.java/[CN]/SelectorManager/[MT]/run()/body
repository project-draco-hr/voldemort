{
  try {
    while (true) {
      if (isClosed) {
        if (logger.isInfoEnabled())         logger.info("Closed, exiting" + " for " + endpoint);
        break;
      }
      processSockets();
      try {
        int selected=selector.select();
        if (isClosed) {
          if (logger.isInfoEnabled())           logger.info("Closed, exiting for " + endpoint);
          break;
        }
        if (selected > 0) {
          Iterator<SelectionKey> i=selector.selectedKeys().iterator();
          while (i.hasNext()) {
            SelectionKey selectionKey=i.next();
            i.remove();
            if (selectionKey.isReadable() || selectionKey.isWritable()) {
              Runnable worker=(Runnable)selectionKey.attachment();
              worker.run();
            }
          }
        }
      }
 catch (      ClosedSelectorException e) {
        if (logger.isDebugEnabled())         logger.debug("Selector is closed, exiting for " + endpoint);
        break;
      }
catch (      Throwable t) {
        if (logger.isEnabledFor(Level.ERROR))         logger.error(t.getMessage(),t);
      }
    }
  }
 catch (  Throwable t) {
    if (logger.isEnabledFor(Level.ERROR))     logger.error(t.getMessage(),t);
  }
 finally {
    try {
      close();
    }
 catch (    Exception e) {
      if (logger.isEnabledFor(Level.ERROR))       logger.error(e.getMessage(),e);
    }
  }
}
