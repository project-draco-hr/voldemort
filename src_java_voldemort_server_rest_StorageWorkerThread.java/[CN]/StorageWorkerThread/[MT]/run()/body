{
  Object message=messageEvent.getMessage();
  if (message instanceof VoldemortStoreRequest) {
    VoldemortStoreRequest storeRequestObject=(VoldemortStoreRequest)message;
    this.requestObject=storeRequestObject.getRequestObject();
    this.store=storeRequestObject.getStore();
switch (requestObject.getOperationType()) {
case VoldemortOpCode.GET_OP_CODE:
      if (logger.isDebugEnabled()) {
        logger.debug("Incoming get request");
      }
    try {
      List<Versioned<byte[]>> versionedValues=store.get(requestObject.getKey(),null);
      if (versionedValues.size() > 0) {
        GetResponseSender responseConstructor=new GetResponseSender(messageEvent,requestObject.getKey(),versionedValues,store.getName());
        responseConstructor.sendResponse();
      }
 else {
        RestServerErrorHandler.writeErrorResponse(messageEvent,NOT_FOUND,"Key does not exist");
      }
    }
 catch (    Exception e) {
      getErrorHandler.handleExceptions(messageEvent,e);
    }
  break;
case VoldemortOpCode.GET_ALL_OP_CODE:
if (logger.isDebugEnabled()) {
  logger.debug("Incoming get all request");
}
try {
Map<ByteArray,List<Versioned<byte[]>>> keyValuesMap=store.getAll(requestObject.getIterableKeys(),null);
boolean hasAtleastOneValidKey=false;
for (List<Versioned<byte[]>> values : keyValuesMap.values()) {
  if (values.size() > 0) {
    hasAtleastOneValidKey=true;
    break;
  }
}
if (hasAtleastOneValidKey) {
  GetAllResponseSender responseConstructor=new GetAllResponseSender(messageEvent,keyValuesMap,store.getName());
  responseConstructor.sendResponse();
}
 else {
  RestServerErrorHandler.writeErrorResponse(messageEvent,NOT_FOUND,"Key does not exist or key is null");
}
}
 catch (Exception e) {
getErrorHandler.handleExceptions(messageEvent,e);
}
break;
case VoldemortOpCode.PUT_OP_CODE:
if (logger.isDebugEnabled()) {
logger.debug("Incoming put request");
}
try {
store.put(requestObject.getKey(),requestObject.getValue(),null);
PutResponseSender responseConstructor=new PutResponseSender(messageEvent);
responseConstructor.sendResponse();
}
 catch (Exception e) {
putErrorHandler.handleExceptions(messageEvent,e);
}
break;
case VoldemortOpCode.DELETE_OP_CODE:
if (logger.isDebugEnabled()) {
logger.debug("Incoming delete request");
}
try {
boolean result=store.delete(requestObject.getKey(),requestObject.getVersion());
if (!result) {
RestServerErrorHandler.writeErrorResponse(messageEvent,NOT_FOUND,"Non Existing key/version. Nothing to delete");
break;
}
DeleteResponseSender responseConstructor=new DeleteResponseSender(messageEvent);
responseConstructor.sendResponse();
}
 catch (Exception e) {
deleteErrorHandler.handleExceptions(messageEvent,e);
}
break;
case VoldemortOpCode.GET_VERSION_OP_CODE:
if (logger.isDebugEnabled()) {
logger.debug("Incoming get version request");
}
try {
List<Version> versions=store.getVersions(requestObject.getKey());
if (versions.size() > 0) {
GetVersionResponseSender responseConstructor=new GetVersionResponseSender(messageEvent,requestObject.getKey(),versions,store.getName());
responseConstructor.sendResponse();
}
 else {
RestServerErrorHandler.writeErrorResponse(messageEvent,NOT_FOUND,"Key does not exist or key is null");
}
}
 catch (Exception e) {
getVersionErrorHandler.handleExceptions(messageEvent,e);
}
break;
default :
return;
}
}
}
