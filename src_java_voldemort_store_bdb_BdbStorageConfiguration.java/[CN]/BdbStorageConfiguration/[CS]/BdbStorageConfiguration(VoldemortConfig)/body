{
  this.voldemortConfig=config;
  environmentConfig=new EnvironmentConfig();
  environmentConfig.setTransactional(true);
  if (config.isBdbWriteTransactionsEnabled() && config.isBdbFlushTransactionsEnabled()) {
    environmentConfig.setDurability(Durability.COMMIT_SYNC);
  }
 else   if (config.isBdbWriteTransactionsEnabled() && !config.isBdbFlushTransactionsEnabled()) {
    environmentConfig.setDurability(Durability.COMMIT_WRITE_NO_SYNC);
  }
 else {
    environmentConfig.setDurability(Durability.COMMIT_NO_SYNC);
  }
  environmentConfig.setAllowCreate(true);
  environmentConfig.setConfigParam(EnvironmentConfig.LOG_FILE_MAX,Long.toString(config.getBdbMaxLogFileSize()));
  environmentConfig.setConfigParam(EnvironmentConfig.CHECKPOINTER_BYTES_INTERVAL,Long.toString(config.getBdbCheckpointBytes()));
  environmentConfig.setConfigParam(EnvironmentConfig.CHECKPOINTER_WAKEUP_INTERVAL,Long.toString(config.getBdbCheckpointMs() * Time.US_PER_MS));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_MIN_FILE_UTILIZATION,Integer.toString(config.getBdbCleanerMinFileUtilization()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_MIN_UTILIZATION,Integer.toString(config.getBdbCleanerMinUtilization()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_THREADS,Integer.toString(config.getBdbCleanerThreads()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_LOOK_AHEAD_CACHE_SIZE,Integer.toString(config.getBdbCleanerLookAheadCacheSize()));
  environmentConfig.setConfigParam(EnvironmentConfig.LOCK_N_LOCK_TABLES,Integer.toString(config.getBdbLockNLockTables()));
  environmentConfig.setConfigParam(EnvironmentConfig.ENV_FAIR_LATCHES,Boolean.toString(config.getBdbFairLatches()));
  environmentConfig.setConfigParam(EnvironmentConfig.CHECKPOINTER_HIGH_PRIORITY,Boolean.toString(config.getBdbCheckpointerHighPriority()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_MAX_BATCH_FILES,Integer.toString(config.getBdbCleanerMaxBatchFiles()));
  environmentConfig.setConfigParam(EnvironmentConfig.LOG_FAULT_READ_SIZE,Integer.toString(config.getBdbLogFaultReadSize()));
  environmentConfig.setConfigParam(EnvironmentConfig.LOG_ITERATOR_READ_SIZE,Integer.toString(config.getBdbLogIteratorReadSize()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_LAZY_MIGRATION,Boolean.toString(config.getBdbCleanerLazyMigration()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_BYTES_INTERVAL,Long.toString(config.getBdbCleanerBytesInterval()));
  environmentConfig.setConfigParam(EnvironmentConfig.CLEANER_FETCH_OBSOLETE_SIZE,Boolean.toString(config.getBdbCleanerFetchObsoleteSize()));
  environmentConfig.setLockTimeout(config.getBdbLockTimeoutMs(),TimeUnit.MILLISECONDS);
  environmentConfig.setConfigParam(EnvironmentConfig.TREE_MAX_DELTA,Integer.toString(config.getBdbMaxDelta()));
  environmentConfig.setConfigParam(EnvironmentConfig.TREE_BIN_DELTA,Integer.toString(config.getBdbBinDelta()));
  if (config.getBdbCacheModeEvictLN()) {
    environmentConfig.setCacheMode(CacheMode.EVICT_LN);
  }
  if (config.isBdbLevelBasedEviction()) {
    environmentConfig.setConfigParam(EnvironmentConfig.EVICTOR_LRU_ONLY,Boolean.toString(false));
  }
  if (config.getBdbRawPropertyString() != null) {
    try {
      String[] props=config.getBdbRawPropertyString().split(",");
      if (props.length > 0) {
        for (int i=0; i < props.length; i++) {
          String[] propSplit=props[i].split("=");
          if (propSplit.length == 2) {
            logger.info("Overriding property " + propSplit[0] + " to "+ propSplit[1]+ " from the raw property string");
            environmentConfig.setConfigParam(propSplit[0],propSplit[1]);
          }
        }
      }
    }
 catch (    Exception e) {
      logger.warn("Error when applying raw BDB property string... Ignoring and moving on..",e);
    }
  }
  databaseConfig=new DatabaseConfig();
  databaseConfig.setAllowCreate(true);
  databaseConfig.setSortedDuplicates(false);
  databaseConfig.setNodeMaxEntries(config.getBdbBtreeFanout());
  databaseConfig.setTransactional(true);
  bdbMasterDir=config.getBdbDataDirectory();
  useOneEnvPerStore=config.isBdbOneEnvPerStore();
  unreservedStores=new HashSet<Environment>();
  aggBdbStats=new AggregatedBdbEnvironmentStats();
  if (config.isJmxEnabled()) {
    JmxUtils.registerMbean("aggregated-bdb",aggBdbStats);
  }
}
