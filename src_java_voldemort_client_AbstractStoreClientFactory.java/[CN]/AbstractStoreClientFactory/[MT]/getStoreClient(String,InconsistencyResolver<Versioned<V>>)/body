{
  DefaultStoreClient<K,V> client=null;
  Pair<String,Object> cacheKey=Pair.create(storeName,(Object)resolver);
  if (this.config.getCacheStoreClients() && storeClientCache.containsKey(cacheKey)) {
    return (DefaultStoreClient<K,V>)storeClientCache.get(cacheKey);
  }
  if (this.config.isDefaultClientEnabled()) {
    client=new DefaultStoreClient<K,V>(storeName,resolver,this,MAX_METADATA_REFRESH_ATTEMPTS);
  }
 else   if (this.bootstrapUrls.length > 0 && this.bootstrapUrls[0].getScheme().equals(HttpStoreClientFactory.URL_SCHEME)) {
    client=new DefaultStoreClient<K,V>(storeName,resolver,this,MAX_METADATA_REFRESH_ATTEMPTS);
  }
 else {
    if (!isZenStoreResourcesInited.get()) {
      initZenStoreResourcesIfNeeded();
    }
    client=new ZenStoreClient<K,V>(storeName,resolver,this,MAX_METADATA_REFRESH_ATTEMPTS,clientContextName,clientSequencer.getAndIncrement(),config,scheduler,sysRepository);
  }
  if (config.getCacheStoreClients()) {
    StoreClient<K,V> oldValue=(StoreClient<K,V>)storeClientCache.putIfAbsent(cacheKey,client);
    if (oldValue != null) {
      client=(DefaultStoreClient<K,V>)storeClientCache.get(cacheKey);
    }
  }
  client.setBeforeRebootstrapCallback(this.storeRebootstrapCallback);
  return client;
}
