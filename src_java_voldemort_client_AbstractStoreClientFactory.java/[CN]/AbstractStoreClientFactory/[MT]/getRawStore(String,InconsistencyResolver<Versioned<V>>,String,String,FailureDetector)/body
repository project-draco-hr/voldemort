{
  logger.info("Client zone-id [" + this.routedStoreConfig.getClientZoneId() + "] Attempting to get raw store ["+ storeName+ "] ");
  if (logger.isDebugEnabled()) {
    for (    URI uri : bootstrapUrls) {
      logger.debug("Client Bootstrap url [" + uri + "]");
    }
  }
  String clusterXml=clusterXmlString;
  if (clusterXml == null) {
    logger.debug("Fetching cluster.xml ...");
    clusterXml=bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY,bootstrapUrls);
  }
  this.cluster=clusterMapper.readCluster(new StringReader(clusterXml),false);
  String storesXml=customStoresXml;
  if (storesXml == null) {
    logger.debug("Fetching store definition...");
    storesXml=bootstrapMetadataWithRetries(MetadataStore.STORES_KEY,bootstrapUrls);
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Obtained cluster metadata xml" + clusterXml);
    logger.debug("Obtained stores  metadata xml" + storesXml);
  }
  storeDefs=storeMapper.readStoreList(new StringReader(storesXml),false);
  StoreDefinition storeDef=null;
  for (  StoreDefinition d : storeDefs)   if (d.getName().equals(storeName))   storeDef=d;
  if (storeDef == null) {
    logger.error("Bootstrap - unknown store: " + storeName);
    throw new BootstrapFailureException("Unknown store '" + storeName + "'.");
  }
  if (logger.isDebugEnabled()) {
    logger.debug(this.cluster.toString(true));
    logger.debug(storeDef.toString());
  }
  boolean repairReads=!storeDef.isView();
  Map<Integer,Store<ByteArray,byte[],byte[]>> clientMapping=Maps.newHashMap();
  Map<Integer,NonblockingStore> nonblockingStores=Maps.newHashMap();
  Map<Integer,NonblockingStore> nonblockingSlopStores=Maps.newHashMap();
  Map<Integer,Store<ByteArray,Slop,byte[]>> slopStores=null;
  if (storeDef.hasHintedHandoffStrategyType())   slopStores=Maps.newHashMap();
  for (  Node node : this.cluster.getNodes()) {
    Store<ByteArray,byte[],byte[]> store=getStore(storeDef.getName(),node.getHost(),getPort(node),this.requestFormatType);
    clientMapping.put(node.getId(),store);
    NonblockingStore nonblockingStore=routedStoreFactory.toNonblockingStore(store);
    nonblockingStores.put(node.getId(),nonblockingStore);
    if (slopStores != null) {
      Store<ByteArray,byte[],byte[]> rawSlopStore=getStore("slop",node.getHost(),getPort(node),this.requestFormatType);
      Store<ByteArray,Slop,byte[]> slopStore=SerializingStore.wrap(rawSlopStore,slopKeySerializer,slopValueSerializer,new IdentitySerializer());
      slopStores.put(node.getId(),slopStore);
      nonblockingSlopStores.put(node.getId(),routedStoreFactory.toNonblockingStore(rawSlopStore));
    }
  }
  FailureDetector failureDetectorRef=fd;
  if (failureDetectorRef == null) {
    failureDetectorRef=getFailureDetector();
  }
 else {
    logger.debug("Using existing failure detector.");
  }
  this.routedStoreConfig.setRepairReads(repairReads);
  Store<ByteArray,byte[],byte[]> store=routedStoreFactory.create(this.cluster,storeDef,clientMapping,nonblockingStores,slopStores,nonblockingSlopStores,failureDetectorRef,this.routedStoreConfig);
  store=new LoggingStore(store);
  if (isJmxEnabled) {
    StatTrackingStore statStore=new StatTrackingStore(store,this.aggregateStats);
    store=statStore;
    JmxUtils.registerMbean(new StoreStatsJmx(statStore.getStats()),JmxUtils.createObjectName(JmxUtils.getPackageName(store.getClass()),store.getName() + JmxUtils.getJmxId(jmxId)));
  }
  if (this.config.isEnableCompressionLayer()) {
    if (storeDef.getKeySerializer().hasCompression() || storeDef.getValueSerializer().hasCompression()) {
      store=new CompressingStore(store,getCompressionStrategy(storeDef.getKeySerializer()),getCompressionStrategy(storeDef.getValueSerializer()));
    }
  }
  Store<K,V,T> finalStore=(Store<K,V,T>)store;
  if (this.config.isEnableSerializationLayer()) {
    Serializer<K> keySerializer=(Serializer<K>)serializerFactory.getSerializer(storeDef.getKeySerializer());
    Serializer<V> valueSerializer=(Serializer<V>)serializerFactory.getSerializer(storeDef.getValueSerializer());
    if (storeDef.isView() && (storeDef.getTransformsSerializer() == null))     throw new SerializationException("Transforms serializer must be specified with a view ");
    Serializer<T> transformsSerializer=(Serializer<T>)serializerFactory.getSerializer(storeDef.getTransformsSerializer() != null ? storeDef.getTransformsSerializer() : new SerializerDefinition("identity"));
    finalStore=SerializingStore.wrap(store,keySerializer,valueSerializer,transformsSerializer);
  }
  if (this.config.isEnableInconsistencyResolvingLayer()) {
    InconsistencyResolver<Versioned<V>> secondaryResolver=resolver == null ? new TimeBasedInconsistencyResolver() : resolver;
    finalStore=new InconsistencyResolvingStore<K,V,T>(finalStore,new ChainedResolver<Versioned<V>>(new VectorClockInconsistencyResolver(),secondaryResolver));
  }
  return finalStore;
}
