{
  Map<Integer,String> schemaVersions=serDef.getAllSchemaInfoVersions();
  Iterator schemaIterator=schemaVersions.entrySet().iterator();
  Schema firstSchema=null;
  Schema secondSchema=null;
  String firstSchemaStr;
  String secondSchemaStr;
  if (!schemaIterator.hasNext())   throw new VoldemortException("No schema specified");
  Map.Entry schemaPair=(Map.Entry)schemaIterator.next();
  firstSchemaStr=(String)schemaPair.getValue();
  while (schemaIterator.hasNext()) {
    schemaPair=(Map.Entry)schemaIterator.next();
    secondSchemaStr=(String)schemaPair.getValue();
    Schema oldSchema=Schema.parse(firstSchemaStr);
    Schema newSchema=Schema.parse(secondSchemaStr);
    List<Message> messages=SchemaEvolutionValidator.checkBackwardCompatability(oldSchema,newSchema,oldSchema.getName());
    Level maxLevel=Level.ALL;
    for (    Message message : messages) {
      System.out.println(message.getLevel() + ": " + message.getMessage());
      if (message.getLevel().isGreaterOrEqual(maxLevel)) {
        maxLevel=message.getLevel();
      }
    }
    if (maxLevel.isGreaterOrEqual(Level.ERROR)) {
      System.out.println(Level.ERROR + ": The schema is not backward compatible. New clients will not be able to read existing data.");
      throw new VoldemortException(" The schema is not backward compatible. New clients will not be able to read existing data.");
    }
 else     if (maxLevel.isGreaterOrEqual(Level.WARN)) {
      System.out.println(Level.WARN + ": The schema is partially backward compatible, but old clients will not be able to read data serialized in the new format.");
      throw new VoldemortException("The schema is partially backward compatible, but old clients will not be able to read data serialized in the new format.");
    }
 else {
      System.out.println(Level.INFO + ": The schema is backward compatible. Old and new clients will be able to read records serialized by one another.");
    }
    firstSchemaStr=secondSchemaStr;
  }
}
