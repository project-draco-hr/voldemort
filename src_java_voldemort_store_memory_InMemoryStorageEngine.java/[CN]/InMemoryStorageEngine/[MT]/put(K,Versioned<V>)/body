{
  StoreUtils.assertValidKey(k);
  KeyWrapper key=new KeyWrapper(k);
  VectorClock clock=(VectorClock)value.getVersion();
  boolean success=false;
  while (!success) {
    List<Versioned<V>> items=map.get(key);
    if (items == null) {
      items=new ArrayList<Versioned<V>>();
      items.add(new Versioned<V>(value.getValue(),clock));
      success=map.putIfAbsent(key,items) == null;
    }
 else {
synchronized (items) {
        int index=0;
        while (index < items.size()) {
          Versioned<V> versioned=items.get(index);
          Occured occured=value.getVersion().compare(versioned.getVersion());
          if (occured == Occured.BEFORE)           throw new ObsoleteVersionException("Obsolete version for key '" + key + "': "+ value.getVersion());
 else           if (occured == Occured.AFTER)           items.remove(index);
 else           index++;
        }
        items.add(value);
      }
      success=true;
    }
  }
}
