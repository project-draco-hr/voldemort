{
  StoreUtils.assertValidKey(key);
  Version version=value.getVersion();
  boolean success=false;
  while (!success) {
    List<Versioned<V>> items=map.get(key);
    if (items == null) {
      items=new ArrayList<Versioned<V>>();
      items.add(new Versioned<V>(value.getValue(),version));
      success=map.putIfAbsent(key,items) == null;
    }
 else {
synchronized (items) {
        if (map.get(key) != items)         continue;
        List<Versioned<V>> itemsToRemove=new ArrayList<Versioned<V>>(items.size());
        for (        Versioned<V> versioned : items) {
          Occurred occurred=value.getVersion().compare(versioned.getVersion());
          if (occurred == Occurred.BEFORE) {
            throw new ObsoleteVersionException("Obsolete version for key '" + key + "': "+ value.getVersion());
          }
 else           if (occurred == Occurred.AFTER) {
            itemsToRemove.add(versioned);
          }
        }
        items.removeAll(itemsToRemove);
        items.add(value);
      }
      success=true;
    }
  }
}
