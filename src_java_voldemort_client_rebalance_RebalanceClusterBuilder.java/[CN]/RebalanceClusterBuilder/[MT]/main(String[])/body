{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print usage information");
  parser.accepts("stores","[REQUIRED] path to the stores xml config file").withRequiredArg().describedAs("stores.xml");
  parser.accepts("cluster","[REQUIRED] path to the ORIGINAL cluster xml config file").withRequiredArg().describedAs("cluster.xml");
  parser.accepts("target-cluster","path to the TARGET cluster xml config file").withRequiredArg().describedAs("targetCluster.xml");
  parser.accepts("host","[REQUIRED] new node's host name").withRequiredArg().describedAs("host-name");
  parser.accepts("http-port","[REQUIRED] new node's http port").withRequiredArg().ofType(Integer.class).describedAs("http-port");
  parser.accepts("socket-port","[REQUIRED] new node's socket port").withRequiredArg().ofType(Integer.class).describedAs("socket-port");
  parser.accepts("admin-port","new node's admin port").withRequiredArg().ofType(Integer.class).describedAs("admin-port");
  parser.accepts("max-remaps","Maximum number of replication mappings that may change").withRequiredArg().ofType(Integer.class);
  parser.accepts("desired-partitions","Desired number of partitions per node").withRequiredArg().ofType(Integer.class);
  parser.accepts("min-partitions","Minimum number of partitions per node").withRequiredArg().ofType(Integer.class);
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"stores","cluster","host","http-port","socket-port");
  if (missing.size() > 0) {
    System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  String storesXmlFile=(String)options.valueOf("stores");
  String clusterXmlFile=(String)options.valueOf("cluster");
  String targetClusterXmlFile=(String)options.valueOf("target-cluster");
  int maxRemappedReplicas=CmdUtils.valueOf(options,"max-remaps",-1);
  int minNumPartitions=CmdUtils.valueOf(options,"min-partitions",1);
  int desiredNumPartitions=CmdUtils.valueOf(options,"desired-partitions",-1);
  String host=(String)options.valueOf("host");
  int httpPort=(Integer)options.valueOf("http-port");
  int socketPort=(Integer)options.valueOf("socket-port");
  int adminPort=CmdUtils.valueOf(options,"admin-port",socketPort + 1);
  RebalanceClusterBuilder rebalanceClusterBuilder=create(clusterXmlFile,storesXmlFile,maxRemappedReplicas,minNumPartitions,desiredNumPartitions);
  rebalanceClusterBuilder.build(targetClusterXmlFile,host,httpPort,socketPort,adminPort);
}
