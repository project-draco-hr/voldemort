{
  logger.info("Purging slops that match any of the following. {Nodes:" + nodesToPurge + "} {Zone:"+ zoneToPurge+ "} {Stores:"+ storesToPurge+ "}");
  SlopStorageEngine slopStorageEngine=storeRepo.getSlopStore();
  StorageEngine<ByteArray,Slop,byte[]> slopStore=slopStorageEngine.asSlopStore();
  ClosableIterator<Pair<ByteArray,Versioned<Slop>>> slopIterator=slopStore.entries();
  Set<Integer> nodesInPurgeZone=null;
  if (zoneToPurge != Zone.UNSET_ZONE_ID) {
    nodesInPurgeZone=metadataStore.getCluster().getNodeIdsInZone(zoneToPurge);
  }
  try {
    while (slopIterator.hasNext()) {
      Pair<ByteArray,Versioned<Slop>> keyAndVal=slopIterator.next();
      Versioned<Slop> versioned=keyAndVal.getSecond();
      Slop slop=versioned.getValue();
      boolean purge=false;
      if (nodesToPurge.contains(slop.getNodeId())) {
        purge=true;
      }
 else       if (nodesInPurgeZone != null && nodesInPurgeZone.contains(slop.getNodeId())) {
        purge=true;
      }
 else       if (storesToPurge.contains(slop.getStoreName())) {
        purge=true;
      }
      if (purge) {
        numKeysUpdatedThisRun.incrementAndGet();
        slopStorageEngine.delete(keyAndVal.getFirst(),versioned.getVersion());
      }
      numKeysScannedThisRun.incrementAndGet();
      throttler.maybeThrottle(1);
      if (numKeysScannedThisRun.get() % STAT_RECORDS_INTERVAL == 0) {
        logger.info("#Scanned:" + numKeysScannedThisRun + " #PurgedSlops:"+ numKeysUpdatedThisRun);
      }
    }
  }
 catch (  Exception e) {
    logger.error("Error while purging slops",e);
  }
 finally {
    slopIterator.close();
  }
  logger.info("Completed purging slops. " + "#Scanned:" + numKeysScannedThisRun + " #PurgedSlops:"+ numKeysUpdatedThisRun);
}
