{
  int numServers=4;
  int ports[]=ServerTestUtils.findFreePorts(3 * numServers);
  currentCluster=ServerTestUtils.getLocalCluster(numServers,ports,new int[][]{{0,4},{2,3},{1,5},{}});
  finalCluster=ServerTestUtils.getLocalCluster(numServers,ports,new int[][]{{4},{2,3},{1,5},{0}});
  List<RebalanceTaskInfo> orderedRebalanceTaskInfoList=ClusterTestUtils.getBatchPlan(currentCluster,finalCluster,storeDefList2);
  assertEquals("There should have exactly 1 rebalancing node",1,this.getUniqueNodeCount(orderedRebalanceTaskInfoList,false));
  assertEquals("There should have exactly 2 rebalancing partition info",2,orderedRebalanceTaskInfoList.size());
  assertEquals("Stealer 3 should have 2 entry",2,this.getStealerNodePartitionTaskCount(3,orderedRebalanceTaskInfoList));
  HashMap<String,List<Integer>> storeToPartitionsToMove1=Maps.newHashMap();
  storeToPartitionsToMove1.put("test",Lists.newArrayList(0,5));
  HashMap<String,List<Integer>> storeToPartitionsToMove2=Maps.newHashMap();
  storeToPartitionsToMove2.put("test",Lists.newArrayList(4));
  checkAllRebalanceInfoPresent(this.getStealerNodePartitionTaskList(3,orderedRebalanceTaskInfoList),Arrays.asList(new RebalanceTaskInfo(3,0,storeToPartitionsToMove1,currentCluster),new RebalanceTaskInfo(3,1,storeToPartitionsToMove2,currentCluster)));
}
