{
  int numServers=4;
  int ports[]=ServerTestUtils.findFreePorts(3 * numServers);
  currentCluster=ServerTestUtils.getLocalCluster(numServers,ports,new int[][]{{3,6,9,12,15},{1,4,7,10,13,16},{2,5,8,11,14,17},{0}});
  targetCluster=ServerTestUtils.getLocalCluster(numServers,ports,new int[][]{{0,3,6,9,12,15},{1,4,7,10,13,16},{2,5,8,11,14,17},{}});
  List<RebalancePartitionsInfo> orderedRebalancePartitionInfoList=ClusterTestUtils.getBatchPlan(currentCluster,targetCluster,storeDefList2);
  assertEquals("There should have exactly 1 rebalancing node",1,getUniqueNodeCount(orderedRebalancePartitionInfoList,false));
  assertEquals("There should be exactly 1 rebalancing partition info",1,orderedRebalancePartitionInfoList.size());
  assertEquals("Stealer 0 should have 1 entry",1,getStealerNodePartitionInfoCount(0,orderedRebalancePartitionInfoList));
  HashMap<Integer,List<Integer>> partitionsToMove=Maps.newHashMap();
  partitionsToMove.clear();
  partitionsToMove.put(0,Lists.newArrayList(0));
  partitionsToMove.put(1,Lists.newArrayList(17));
  partitionsToMove.put(2,Lists.newArrayList(16));
  HashMap<String,HashMap<Integer,List<Integer>>> storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(0,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(0,3,storeToPartitionsToMove,currentCluster)));
}
