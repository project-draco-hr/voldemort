{
  List<Integer> zoneIds=null;
  if (randomSwapZoneIds.isEmpty()) {
    zoneIds=new ArrayList<Integer>(nextCandidateCluster.getZoneIds());
  }
 else {
    zoneIds=new ArrayList<Integer>(randomSwapZoneIds);
  }
  List<Integer> nodeIds=new ArrayList<Integer>();
  if (interZoneSwapping) {
    for (    int zoneId : zoneIds) {
      nodeIds.addAll(nextCandidateCluster.getNodeIdsInZone(zoneId));
    }
  }
  Cluster returnCluster=ClusterUtils.copyCluster(nextCandidateCluster);
  double currentUtility=new PartitionBalance(returnCluster,storeDefs).getUtility();
  int successes=0;
  for (int i=0; i < randomSwapAttempts; i++) {
    if (!interZoneSwapping) {
      int zoneIdOffset=i % randomSwapZoneIds.size();
      Set<Integer> nodeIdSet=nextCandidateCluster.getNodeIdsInZone(randomSwapZoneIds.get(zoneIdOffset));
      nodeIds=new ArrayList<Integer>(nodeIdSet);
    }
    Collections.shuffle(zoneIds,new Random(System.currentTimeMillis()));
    Cluster shuffleResults=swapRandomPartitionsAmongNodes(returnCluster,nodeIds);
    double nextUtility=new PartitionBalance(shuffleResults,storeDefs).getUtility();
    if (nextUtility < currentUtility) {
      System.out.println("Swap improved max-min ratio: " + currentUtility + " -> "+ nextUtility+ " (improvement "+ successes+ " on swap attempt "+ i+ ")");
      successes++;
      returnCluster=shuffleResults;
      currentUtility=nextUtility;
    }
    if (successes >= randomSwapSuccesses) {
      break;
    }
  }
  return returnCluster;
}
