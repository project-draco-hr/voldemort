{
  Cluster returnCluster=ClusterUtils.copyCluster(nextCluster);
  Random r=new Random();
  List<Integer> nodeIdsInZone=new ArrayList<Integer>(nextCluster.getNodeIdsInZone(zoneId));
  if (nodeIdsInZone.size() == 0) {
    return returnCluster;
  }
  int stealerNodeOffset=r.nextInt(nodeIdsInZone.size());
  Integer stealerNodeId=nodeIdsInZone.get(stealerNodeOffset);
  List<Integer> stealerPartitions=returnCluster.getNodeById(stealerNodeId).getPartitionIds();
  if (stealerPartitions.size() == 0) {
    return nextCluster;
  }
  int stealerPartitionOffset=r.nextInt(stealerPartitions.size());
  int stealerPartitionId=stealerPartitions.get(stealerPartitionOffset);
  List<Integer> donorNodeIds=new ArrayList<Integer>();
  donorNodeIds.addAll(nodeIdsInZone);
  donorNodeIds.remove(stealerNodeId);
  if (donorNodeIds.isEmpty()) {
    return returnCluster;
  }
  int donorIdOffset=r.nextInt(donorNodeIds.size());
  Integer donorNodeId=donorNodeIds.get(donorIdOffset);
  List<Integer> donorPartitions=returnCluster.getNodeById(donorNodeId).getPartitionIds();
  int donorPartitionOffset=r.nextInt(donorPartitions.size());
  int donorPartitionId=donorPartitions.get(donorPartitionOffset);
  return swapPartitions(returnCluster,stealerNodeId,stealerPartitionId,donorNodeId,donorPartitionId);
}
