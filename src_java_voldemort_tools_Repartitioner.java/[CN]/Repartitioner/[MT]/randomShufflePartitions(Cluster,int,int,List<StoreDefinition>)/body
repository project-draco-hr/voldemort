{
  List<Integer> zoneIds=new ArrayList<Integer>(nextCandidateCluster.getZoneIds());
  Cluster returnCluster=ClusterUtils.copyCluster(nextCandidateCluster);
  double currentUtility=new PartitionBalance(returnCluster,storeDefs).getUtility();
  int successes=0;
  for (int i=0; i < randomSwapAttempts; i++) {
    Collections.shuffle(zoneIds,new Random(System.currentTimeMillis()));
    for (    Integer zoneId : zoneIds) {
      Cluster shuffleResults=swapRandomPartitionsWithinZone(returnCluster,zoneId);
      double nextUtility=new PartitionBalance(shuffleResults,storeDefs).getUtility();
      if (nextUtility < currentUtility) {
        System.out.println("Swap improved max-min ratio: " + currentUtility + " -> "+ nextUtility+ " (improvement "+ successes+ " on swap attempt "+ i+ " in zone "+ zoneId+ ")");
        successes++;
        returnCluster=shuffleResults;
        currentUtility=nextUtility;
      }
    }
    if (successes >= randomSwapSuccesses) {
      break;
    }
  }
  return returnCluster;
}
