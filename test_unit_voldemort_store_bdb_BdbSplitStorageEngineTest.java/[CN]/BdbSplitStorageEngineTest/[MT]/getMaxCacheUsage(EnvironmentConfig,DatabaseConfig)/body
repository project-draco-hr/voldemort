{
  File dirA=new File(bdbMasterDir + "/" + "storeA");
  if (!dirA.exists()) {
    dirA.mkdirs();
  }
  Environment environmentA=new Environment(dirA,environmentConfig);
  Database databaseA=environmentA.openDatabase(null,"storeA",databaseConfig);
  BdbStorageEngine storeA=BdbStorageEngineTest.makeBdbStorageEngine("storeA",environmentA,databaseA,new BdbRuntimeConfig(),this.prefixPartitionId);
  File dirB=new File(bdbMasterDir + "/" + "storeB");
  if (!dirB.exists()) {
    dirB.mkdirs();
  }
  Environment environmentB=new Environment(dirB,environmentConfig);
  Database databaseB=environmentB.openDatabase(null,"storeB",databaseConfig);
  BdbStorageEngine storeB=BdbStorageEngineTest.makeBdbStorageEngine("storeB",environmentB,databaseB,new BdbRuntimeConfig(),this.prefixPartitionId);
  long maxCacheUsage=0;
  for (int i=0; i <= 4; i++) {
    byte[] value=new byte[(int)(CACHE_SIZE / 4)];
    storeA.put(TestUtils.toByteArray(i + "A"),new Versioned<byte[]>(value),null);
    storeA.get(TestUtils.toByteArray(i + "A"),null);
    storeB.put(TestUtils.toByteArray(i + "B"),new Versioned<byte[]>(value),null);
    storeB.get(TestUtils.toByteArray(i + "B"),null);
    EnvironmentStats statsA=environmentA.getStats(new StatsConfig());
    EnvironmentStats statsB=environmentB.getStats(new StatsConfig());
    long totalCacheSize=statsA.getCacheTotalBytes() + statsB.getCacheTotalBytes();
    System.out.println("A.size:" + statsA.getCacheTotalBytes() + " B.size:"+ statsB.getCacheTotalBytes()+ " total:"+ totalCacheSize+ " max:"+ maxCacheUsage+ " cacheMax:"+ environmentA.getConfig().getCacheSize());
    System.out.println("Shared.A:" + statsA.getSharedCacheTotalBytes() + " nSharedEnv:"+ statsA.getNSharedCacheEnvironments());
    maxCacheUsage=Math.max(maxCacheUsage,totalCacheSize);
  }
  return maxCacheUsage;
}
