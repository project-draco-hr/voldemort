{
  OptionParser parser=makeOptionParser();
  OptionSet options=parser.parse(argv);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  String cluster=(String)options.valueOf("cluster");
  if (cluster == null) {
    System.err.println("Missing required option --cluster");
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  String zoneName=(String)options.valueOf("zone");
  if (zoneName == null) {
    System.err.println("Missing required option --zone");
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  NamedZone nz;
  if (Pattern.matches("^\\d+$",zoneName)) {
    nz=NamedZone.getById(Integer.parseInt(zoneName));
  }
 else {
    nz=NamedZone.getByName(zoneName);
  }
  if (nz == null) {
    System.err.println("Unknown zone \"" + zoneName + "\"");
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  Reader clusterXMLReader;
  Reader storesXMLReader;
  String workingDir;
  if (options.has("testmode")) {
    workingDir=cluster;
    clusterXMLReader=new FileReader(workingDir + "/current-cluster.xml");
    storesXMLReader=new FileReader(workingDir + "/current-stores.xml");
  }
 else {
    workingDir="working.d";
{
      File wd=new File(workingDir);
      FileUtils.deleteDirectory(wd);
      wd.mkdirs();
    }
    String bootstrapURL=makeBootstrapURL(nz,cluster);
    System.out.println("Bootstrap URL is " + bootstrapURL);
    AdminClient adminClient=new AdminClient(bootstrapURL,new AdminClientConfig(),new ClientConfig());
    String clusterXML=getMetadata(adminClient,"cluster.xml");
    System.out.println("==== cluster.xml\n" + clusterXML);
    Writer w=new FileWriter(workingDir + "/current-cluster.xml");
    w.write(clusterXML);
    w.close();
    clusterXMLReader=new StringReader(clusterXML);
    String storesXML=getMetadata(adminClient,"stores.xml");
    System.out.println("==== stores.xml\n" + storesXML);
    w=new FileWriter(workingDir + "/current-stores.xml");
    w.write(clusterXML);
    w.close();
    storesXMLReader=new StringReader(storesXML);
  }
  ClusterBuilder cbuilder=new ClusterBuilder();
  Cluster currentCluster=cbuilder.read(clusterXMLReader).verify().dump().getCluster();
  Cluster interimCluster=cbuilder.addZone(nz).addHosts(nz,expandRange(makeRange(nz,cluster))).verify().dump().write(new FileWriter(workingDir + "/interim-cluster.xml")).getCluster();
  StoresBuilder sbuilder=new StoresBuilder();
  List<StoreDefinition> currentStores=sbuilder.read(storesXMLReader).dump().getStoreList();
  List<StoreDefinition> finalStores=sbuilder.addZone(nz).dump().write(new FileWriter(workingDir + "/final-stores.xml")).getStoreList();
  Cluster finalCluster=Repartitioner.repartition(currentCluster,currentStores,interimCluster,finalStores,null,NUM_ATTEMPTS,false,false,false,Repartitioner.DEFAULT_RANDOM_SWAP_ATTEMPTS,Repartitioner.DEFAULT_RANDOM_SWAP_SUCCESSES,Repartitioner.DEFAULT_RANDOM_SWAP_ZONE_IDS,false,Repartitioner.DEFAULT_GREEDY_SWAP_ATTEMPTS,Repartitioner.DEFAULT_GREEDY_MAX_PARTITIONS_PER_NODE,Repartitioner.DEFAULT_GREEDY_MAX_PARTITIONS_PER_ZONE,Repartitioner.DEFAULT_GREEDY_SWAP_ZONE_IDS,Repartitioner.DEFAULT_MAX_CONTIGUOUS_PARTITIONS);
  cbuilder.setCluster(finalCluster).normalizeHostnames().write(new FileWriter(workingDir + "/final-cluster.xml"));
}
