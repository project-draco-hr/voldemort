{
  try {
    boolean sentAny=false;
    String storeName=request.getStore();
    StorageEngine<ByteArray,byte[]> storageEngine=storeRepository.getStorageEngine(storeName);
    if (storageEngine == null) {
      throw new VoldemortException("No store named '" + storeName + "'.");
    }
    RoutingStrategy routingStrategy=metadataStore.getRoutingStrategy(storageEngine.getName());
    IoThrottler throttler=new IoThrottler(streamMaxBytesReadPerSec);
    List<Integer> partitionList=request.getPartitionsList();
    VoldemortFilter filter;
    if (request.hasFilter()) {
      filter=getFilterFromRequest(request.getFilter());
    }
 else {
      filter=new DefaultVoldemortFilter();
    }
    ClosableIterator<Pair<ByteArray,Versioned<byte[]>>> iterator=storageEngine.entries();
    while (iterator.hasNext()) {
      Pair<ByteArray,Versioned<byte[]>> entry=iterator.next();
      VAdminProto.PartitionEntry partitionEntry=VAdminProto.PartitionEntry.newBuilder().setKey(ProtoUtils.encodeBytes(entry.getFirst())).setVersioned(ProtoUtils.encodeVersioned(entry.getSecond())).build();
      if (validPartition(entry.getFirst().get(),partitionList,routingStrategy) && filter.filter(entry.getFirst(),entry.getSecond())) {
        VAdminProto.FetchPartitionEntriesResponse response=VAdminProto.FetchPartitionEntriesResponse.newBuilder().setContinue(iterator.hasNext()).addAllPartitionEntries(Arrays.asList(partitionEntry)).build();
        ProtoUtils.writeMessage(outputStream,response);
        sentAny=true;
        if (throttler != null) {
          throttler.maybeThrottle(entry.getFirst().length() + entry.getSecond().getValue().length + 1);
        }
      }
    }
    iterator.close();
    if (!sentAny) {
      VAdminProto.FetchPartitionEntriesResponse response=VAdminProto.FetchPartitionEntriesResponse.newBuilder().setContinue(false).build();
      ProtoUtils.writeMessage(outputStream,response);
    }
    outputStream.flush();
  }
 catch (  VoldemortException e) {
    VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    response.setContinue(false);
    writeMessageAndFlush(response.build(),outputStream);
  }
}
