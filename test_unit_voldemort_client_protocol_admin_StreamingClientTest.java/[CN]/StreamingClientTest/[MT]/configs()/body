{
  StoreDefinition storeDefConsistestStrategy=new StoreDefinitionBuilder().setName(TEST_STORE_NAME).setType(BdbStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(2).setRequiredWrites(2).build();
  HashMap<Integer,Integer> zoneReplicationFactor=new HashMap<Integer,Integer>();
  zoneReplicationFactor.put(1,2);
  zoneReplicationFactor.put(3,2);
  StoreDefinition storeDefZoneStrategy=new StoreDefinitionBuilder().setName(TEST_STORE_NAME).setType(BdbStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setReplicationFactor(4).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).setZoneCountReads(0).setZoneCountWrites(0).setZoneReplicationFactor(zoneReplicationFactor).setHintedHandoffStrategy(HintedHandoffStrategyType.PROXIMITY_STRATEGY).build();
  return Arrays.asList(new Object[][]{{2,ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3},{4,5,6,7}}),0,storeDefConsistestStrategy},{2,ServerTestUtils.getLocalNonContiguousNodesCluster(new int[]{1,3},new int[][]{{0,1,2,3},{4,5,6,7}}),1,storeDefConsistestStrategy},{6,ClusterTestUtils.getZ1Z3ClusterWithNonContiguousNodeIds(),3,storeDefZoneStrategy}});
}
