{
  initialClusterXML=IOUtils.toString(ClusterTestUtils.class.getResourceAsStream(INITIAL_CLUSTER_XML_FILE));
  initialStoresXML=IOUtils.toString(ClusterTestUtils.class.getResourceAsStream(INITIAL_STORES_XML_FILE));
  finalClusterXML=IOUtils.toString(ClusterTestUtils.class.getResourceAsStream(FINAL_CLUSTER_XML_FILE));
  finalStoresXML=IOUtils.toString(ClusterTestUtils.class.getResourceAsStream(FINAL_STORES_XML_FILE));
  cluster=clusterMapper.readCluster(new StringReader(initialClusterXML));
  storeDefs=storeDefinitionsMapper.readStoreList(new StringReader(initialStoresXML));
  for (  Node node : cluster.getNodes()) {
    String tempFolderPath=TestUtils.createTempDir().getAbsolutePath();
    SocketStoreFactory ssf=new SocketStoreFactoryForTest();
    VoldemortConfig config=ServerTestUtils.createServerConfigWithDefs(true,node.getId(),tempFolderPath,cluster,storeDefs,new Properties());
    Assert.assertTrue(config.isSlopEnabled());
    Assert.assertTrue(config.isSlopPusherJobEnabled());
    Assert.assertTrue(config.getAutoPurgeDeadSlops());
    config.setSlopFrequencyMs(10000L);
    VoldemortServer vs=ServerTestUtils.startVoldemortServer(ssf,config,cluster);
    vservers.put(node.getId(),vs);
    socketStoreFactories.put(node.getId(),ssf);
    voldemortConfigs.put(node.getId(),config);
  }
  for (  Node node : cluster.getNodes()) {
    if (node.getZoneId() == droppingZoneId) {
      droppingNodes.add(node);
    }
 else {
      survivingNodes.add(node);
    }
  }
  bootstrapURL=survivingNodes.get(0).getSocketUrl().toString();
}
