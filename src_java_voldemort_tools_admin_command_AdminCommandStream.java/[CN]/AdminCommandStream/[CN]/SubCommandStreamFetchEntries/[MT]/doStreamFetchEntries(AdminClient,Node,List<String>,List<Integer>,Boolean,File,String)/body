{
  HashMap<String,StoreDefinition> storeDefinitionMap=Maps.newHashMap();
  storeDefinitionMap.putAll(AdminUtils.getUserStoreDefs(adminClient,node));
  storeDefinitionMap.putAll(AdminUtils.getSystemStoreDefs());
  for (  String store : storeNames) {
    StoreDefinition storeDefinition=storeDefinitionMap.get(store);
    if (null == storeDefinition) {
      System.out.println("No store found under the name \'" + store + "\'");
      continue;
    }
    Iterator<Pair<ByteArray,Versioned<byte[]>>> entryIteratorRef=null;
    if (orphaned) {
      System.out.println("Fetching orphaned entries of " + store);
      entryIteratorRef=adminClient.bulkFetchOps.fetchOrphanedEntries(node.getId(),store);
    }
 else {
      System.out.println("Fetching entries in partitions " + Joiner.on(", ").join(partIds) + " of "+ store);
      entryIteratorRef=adminClient.bulkFetchOps.fetchEntries(node.getId(),store,partIds,null,false);
    }
    File outFile=null;
    if (directory != null) {
      outFile=new File(directory,store + ".entries");
    }
    final Iterator<Pair<ByteArray,Versioned<byte[]>>> entryIterator=entryIteratorRef;
    if (format.equals(AdminParserUtils.ARG_FORMAT_JSON)) {
      SerializerDefinition keySerializerDef=storeDefinition.getKeySerializer();
      SerializerDefinition valueSerializerDef=storeDefinition.getValueSerializer();
      SerializerFactory serializerFactory=new DefaultSerializerFactory();
      @SuppressWarnings("unchecked") final Serializer<Object> keySerializer=(Serializer<Object>)serializerFactory.getSerializer(keySerializerDef);
      @SuppressWarnings("unchecked") final Serializer<Object> valueSerializer=(Serializer<Object>)serializerFactory.getSerializer(valueSerializerDef);
      final CompressionStrategy keyCompressionStrategy;
      final CompressionStrategy valueCompressionStrategy;
      if (keySerializerDef != null && keySerializerDef.hasCompression()) {
        keyCompressionStrategy=new CompressionStrategyFactory().get(keySerializerDef.getCompression());
      }
 else {
        keyCompressionStrategy=null;
      }
      if (valueSerializerDef != null && valueSerializerDef.hasCompression()) {
        valueCompressionStrategy=new CompressionStrategyFactory().get(valueSerializerDef.getCompression());
      }
 else {
        valueCompressionStrategy=null;
      }
      writeAscii(outFile,new Writable(){
        @Override public void writeTo(        BufferedWriter out) throws IOException {
          while (entryIterator.hasNext()) {
            final JsonGenerator generator=new JsonFactory(new ObjectMapper()).createJsonGenerator(out);
            Pair<ByteArray,Versioned<byte[]>> kvPair=entryIterator.next();
            byte[] keyBytes=kvPair.getFirst().get();
            byte[] valueBytes=kvPair.getSecond().getValue();
            VectorClock version=(VectorClock)kvPair.getSecond().getVersion();
            Object keyObject=keySerializer.toObject((null == keyCompressionStrategy) ? keyBytes : keyCompressionStrategy.inflate(keyBytes));
            Object valueObject=valueSerializer.toObject((null == valueCompressionStrategy) ? valueBytes : valueCompressionStrategy.inflate(valueBytes));
            if (keyObject instanceof GenericRecord) {
              out.write(keyObject.toString());
            }
 else {
              generator.writeObject(keyObject);
            }
            out.write(' ' + version.toString() + ' ');
            if (valueObject instanceof GenericRecord) {
              out.write(valueObject.toString());
            }
 else {
              generator.writeObject(valueObject);
            }
            out.write('\n');
          }
        }
      }
);
    }
 else     if (format.equals(AdminParserUtils.ARG_FORMAT_HEX)) {
      writeBinary(outFile,new Printable(){
        @Override public void printTo(        DataOutputStream out) throws IOException {
          while (entryIterator.hasNext()) {
            Pair<ByteArray,Versioned<byte[]>> kvPair=entryIterator.next();
            byte[] keyBytes=kvPair.getFirst().get();
            VectorClock clock=((VectorClock)kvPair.getSecond().getVersion());
            byte[] valueBytes=kvPair.getSecond().getValue();
            out.writeChars(ByteUtils.toHexString(keyBytes));
            out.writeChars(",");
            out.writeChars(clock.toString());
            out.writeChars(",");
            out.writeChars(ByteUtils.toHexString(valueBytes));
            out.writeChars("\n");
          }
        }
      }
);
    }
 else {
      throw new VoldemortException("Invalid format \'" + format + "\'.");
    }
    if (outFile != null) {
      System.out.println("Fetched entries from " + store + " to "+ outFile);
    }
  }
}
