{
  setupParser();
  OptionSet options=getValidOptions(args);
  String clusterXML=(String)options.valueOf("cluster");
  Integer nodeId=CmdUtils.valueOf(options,"nodeId",DEFAULT_NODE_ID);
  Cluster clusterDef=new ClusterMapper().readCluster(new File(clusterXML));
  AdminClient adminClient=new AdminClient(clusterDef,new AdminClientConfig(),new ClientConfig());
  for (  StoreDefinition storeDef : adminClient.metadataMgmtOps.getRemoteStoreDefList().getValue()) {
    if (storeDef.getReplicationFactor() <= 1) {
      continue;
    }
    RoutingStrategy strategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDef,clusterDef);
    for (int masterPartitionId=0; masterPartitionId < clusterDef.getNumberOfPartitions(); ++masterPartitionId) {
      List<Integer> naryPartitionIds=strategy.getReplicatingPartitionList(masterPartitionId);
      int nary=0;
      for (      int naryPartitionId : naryPartitionIds) {
        Node naryNode=clusterDef.getNodeForPartitionId(naryPartitionId);
        if (naryNode.getId() == nodeId) {
          naryPartitionIds.remove(nary);
          break;
        }
        nary++;
      }
      Node replicatingNode=clusterDef.getNodeForPartitionId(naryPartitionIds.get(0));
      List<String> fileNames=adminClient.readonlyOps.getROStorageFileList(replicatingNode.getId(),storeDef.getName());
      List<String> sourceFileNames=parseAndCompare(fileNames,masterPartitionId);
      if (sourceFileNames.size() > 0) {
        for (        String sourceFileName : sourceFileNames) {
          System.out.println("Source Node  " + replicatingNode + "File name on source Node "+ sourceFileName);
          String[] partitionIdReplicaChunk=sourceFileName.split(SPLIT_LITERAL);
          partitionIdReplicaChunk[1]=String.valueOf(nary);
          String fileNameOnDestinationNode=partitionIdReplicaChunk[0].concat(SPLIT_LITERAL).concat(partitionIdReplicaChunk[1]).concat(SPLIT_LITERAL).concat(partitionIdReplicaChunk[2]);
          System.out.println("File name on destination node " + fileNameOnDestinationNode);
        }
      }
    }
  }
}
