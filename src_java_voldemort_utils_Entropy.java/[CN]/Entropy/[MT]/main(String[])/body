{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("node","Node id").withRequiredArg().describedAs("node-id").ofType(Integer.class);
  parser.accepts("cluster-xml","[REQUIRED] Path to cluster-xml").withRequiredArg().describedAs("xml").ofType(String.class);
  parser.accepts("stores-xml","[REQUIRED] Path to stores-xml").withRequiredArg().describedAs("xml").ofType(String.class);
  parser.accepts("output-dir","[REQUIRED] The output directory where we'll store / retrieve the keys. ").withRequiredArg().describedAs("output-dir").ofType(String.class);
  parser.accepts("op-type","Operation type - false ( save keys ) [ default ], true ( run entropy calculator ) ").withRequiredArg().ofType(Boolean.class);
  parser.accepts("num-keys","Number of keys per store [ Default: " + Entropy.DEFAULT_NUM_KEYS + " ]").withRequiredArg().describedAs("keys").ofType(Long.class);
  parser.accepts("negative-test","Check for keys that dont belong on the given nodeId are not present");
  parser.accepts("verbose-logging","Verbose logging such as keys found missing on specific nodes");
  OptionSet options=parser.parse(args);
  boolean negativeTest=false;
  if (options.has("negative-test")) {
    negativeTest=true;
  }
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"cluster-xml","stores-xml","output-dir");
  if (missing.size() > 0) {
    System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  String clusterXml=(String)options.valueOf("cluster-xml");
  String storesXml=(String)options.valueOf("stores-xml");
  String outputDirPath=(String)options.valueOf("output-dir");
  long numKeys=CmdUtils.valueOf(options,"num-keys",Entropy.DEFAULT_NUM_KEYS);
  int nodeId=CmdUtils.valueOf(options,"node",0);
  boolean opType=CmdUtils.valueOf(options,"op-type",false);
  boolean verboseLogging=options.has("verbose-logging");
  File outputDir=new File(outputDirPath);
  if (!outputDir.exists()) {
    outputDir.mkdirs();
  }
 else   if (!(outputDir.isDirectory() && outputDir.canWrite())) {
    System.err.println("Cannot write to output directory " + outputDirPath);
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  if (!Utils.isReadableFile(clusterXml) || !Utils.isReadableFile(storesXml)) {
    System.err.println("Cannot read metadata file ");
    System.exit(1);
  }
  Cluster cluster=new ClusterMapper().readCluster(new File(clusterXml));
  List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new File(storesXml));
  Entropy detector=new Entropy(nodeId,numKeys,verboseLogging);
  detector.generateEntropy(cluster,storeDefs,outputDir,opType,negativeTest);
}
