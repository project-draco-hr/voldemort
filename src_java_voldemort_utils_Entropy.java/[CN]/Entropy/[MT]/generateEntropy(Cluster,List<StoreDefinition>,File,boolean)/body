{
  AdminClient adminClient=null;
  try {
    adminClient=new AdminClient(cluster,new AdminClientConfig().setAdminConnectionTimeoutSec(60 * 60 * 2).setAdminSocketTimeoutSec(60 * 60 * 2).setMaxThreads(numThreads));
    if (opType) {
      System.out.println("Running entropy calculator");
    }
 else {
      System.out.println("Generating keys for future entropy calculation");
      Utils.mkdirs(storeDir);
    }
    for (    StoreDefinition storeDef : storeDefs) {
      File storesKeyFile=new File(storeDir,storeDef.getName());
      if (AdminClient.restoreStoreEngineBlackList.contains(storeDef.getType())) {
        System.out.println("Ignoring store " + storeDef.getName());
        continue;
      }
 else {
        System.out.println("Working on store " + storeDef.getName());
      }
      if (!opType) {
        if (storesKeyFile.exists()) {
          System.err.println("Key files for " + storeDef.getName() + " already exists");
          continue;
        }
        FileOutputStream writer=null;
        try {
          writer=new FileOutputStream(storesKeyFile);
          Iterator<ByteArray> keys=adminClient.fetchKeys(nodeId,storeDef.getName(),cluster.getNodeById(0).getPartitionIds(),null,false);
          for (long keyId=0; keyId < numKeys && keys.hasNext(); keyId++) {
            ByteArray key=keys.next();
            writer.write(key.length());
            writer.write(key.get());
          }
        }
  finally {
          if (writer != null)           writer.close();
        }
      }
 else {
        if (!(storesKeyFile.exists() && storesKeyFile.canRead())) {
          System.err.println("Could not find " + storeDef.getName() + " file to check");
          continue;
        }
        FileInputStream reader=null;
        SocketStoreFactory socketStoreFactory=new ClientRequestExecutorPool(2,10000,100000,32 * 1024);
        RoutingStrategy strategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDef,cluster);
        HashMap<Integer,Store<ByteArray,byte[],byte[]>> socketStoresPerNode=Maps.newHashMap();
        for (        Node node : cluster.getNodes()) {
          socketStoresPerNode.put(node.getId(),socketStoreFactory.create(storeDef.getName(),node.getHost(),node.getSocketPort(),RequestFormatType.PROTOCOL_BUFFERS,RequestRoutingType.IGNORE_CHECKS));
        }
        long foundKeys=0L;
        long totalKeys=0L;
        try {
          reader=new FileInputStream(storesKeyFile);
          while (reader.available() != 0) {
            int size=reader.read();
            if (size <= 0) {
              break;
            }
            byte[] key=new byte[size];
            reader.read(key);
            List<Node> responsibleNodes=strategy.routeRequest(key);
            boolean missingKey=false;
            for (            Node node : responsibleNodes) {
              List<Versioned<byte[]>> value=socketStoresPerNode.get(node.getId()).get(new ByteArray(key),null);
              if (value == null || value.size() == 0) {
                missingKey=true;
              }
            }
            if (!missingKey)             foundKeys++;
            totalKeys++;
          }
          System.out.println("Found = " + foundKeys + " Total = "+ totalKeys);
          if (foundKeys > 0 && totalKeys > 0) {
            System.out.println("%age found - " + 100.0 * (double)foundKeys / totalKeys);
          }
        }
  finally {
          if (reader != null)           reader.close();
          for (          Store<ByteArray,byte[],byte[]> store : socketStoresPerNode.values()) {
            store.close();
          }
        }
      }
    }
  }
  finally {
    if (adminClient != null)     adminClient.stop();
  }
}
