{
  this.cluster=cluster;
  StringBuilder builder=new StringBuilder();
  builder.append(ClusterUtils.verboseClusterDump(cluster));
  HashMap<StoreDefinition,Integer> uniqueStores=KeyDistributionGenerator.getUniqueStoreDefinitionsWithCounts(storeDefs);
  Set<Integer> nodeIds=cluster.getNodeIds();
  builder.append("PARTITION DUMP\n");
  this.primaryAggNodeIdToPartitionCount=Maps.newHashMap();
  for (  Integer nodeId : nodeIds) {
    primaryAggNodeIdToPartitionCount.put(nodeId,0);
  }
  this.aggNodeIdToZonePrimaryCount=Maps.newHashMap();
  for (  Integer nodeId : nodeIds) {
    aggNodeIdToZonePrimaryCount.put(nodeId,0);
  }
  this.allAggNodeIdToPartitionCount=Maps.newHashMap();
  for (  Integer nodeId : nodeIds) {
    allAggNodeIdToPartitionCount.put(nodeId,0);
  }
  for (  StoreDefinition storeDefinition : uniqueStores.keySet()) {
    StoreRoutingPlan storeRoutingPlan=new StoreRoutingPlan(cluster,storeDefinition);
    builder.append(Utils.NEWLINE).append("Store exemplar: " + storeDefinition.getName()).append(Utils.NEWLINE).append("\tReplication factor: " + storeDefinition.getReplicationFactor()).append(Utils.NEWLINE).append("\tRouting strategy: " + storeDefinition.getRoutingStrategyType()).append(Utils.NEWLINE).append("\tThere are " + uniqueStores.get(storeDefinition) + " other similar stores.").append(Utils.NEWLINE).append(Utils.NEWLINE);
    builder.append(dumpZoneNAryDetails(storeRoutingPlan));
    builder.append(Utils.NEWLINE);
    builder.append(dumpReplicaTypeDetails(cluster,storeDefinition));
    builder.append(Utils.NEWLINE);
    Map<Integer,Integer> nodeIdToPrimaryCount=getNodeIdToPrimaryCount(cluster);
    Map<Integer,Integer> nodeIdToZonePrimaryCount=getNodeIdToZonePrimaryCount(cluster,storeRoutingPlan);
    Map<Integer,Integer> nodeIdToNaryCount=getNodeIdToNaryCount(cluster,storeRoutingPlan);
    builder.append("\tSummary of NAry counts:").append(Utils.NEWLINE);
    for (    Integer nodeId : nodeIds) {
      builder.append("\tNode ID: " + nodeId + " : "+ nodeIdToNaryCount.get(nodeId)+ "\n");
      primaryAggNodeIdToPartitionCount.put(nodeId,primaryAggNodeIdToPartitionCount.get(nodeId) + (nodeIdToPrimaryCount.get(nodeId) * uniqueStores.get(storeDefinition)));
      aggNodeIdToZonePrimaryCount.put(nodeId,aggNodeIdToZonePrimaryCount.get(nodeId) + nodeIdToZonePrimaryCount.get(nodeId) * uniqueStores.get(storeDefinition));
      allAggNodeIdToPartitionCount.put(nodeId,allAggNodeIdToPartitionCount.get(nodeId) + (nodeIdToNaryCount.get(nodeId) * uniqueStores.get(storeDefinition)));
    }
  }
  builder.append(Utils.NEWLINE).append(Utils.NEWLINE);
  Pair<Double,String> summary=summarizeBalance(primaryAggNodeIdToPartitionCount,"AGGREGATE PRIMARY-PARTITION COUNT (across all stores)");
  builder.append(summary.getSecond());
  this.primaryMaxMin=summary.getFirst();
  summary=summarizeBalance(aggNodeIdToZonePrimaryCount,"AGGREGATE ZONEPRIMARY-PARTITION COUNT (across all stores)");
  builder.append(summary.getSecond());
  this.zonePrimaryMaxMin=summary.getFirst();
  summary=summarizeBalance(allAggNodeIdToPartitionCount,"AGGREGATE NARY-PARTITION COUNT (across all stores)");
  builder.append(summary.getSecond());
  this.naryMaxMin=summary.getFirst();
  builder.append("Utility value " + getUtility()).append(Utils.NEWLINE);
  this.verbose=builder.toString();
}
