{
  assertFalse(verifyNodesBalancedInEachZone(currentCluster));
  assertFalse(verifyZonesBalanced(currentCluster));
  PartitionBalance currentPb=new PartitionBalance(currentCluster,currentStores);
  boolean disableNodeBalancing=true;
  boolean disableZoneBalancing=true;
  boolean enableGreedySwaps=true;
  List<Integer> greedyZones=new ArrayList<Integer>(currentCluster.getZoneIds());
  int swapAttempts=1;
  int swapsPerNode=100;
  int swapsPerZone=100;
  Cluster repartitionedCluster=Repartitioner.repartition(currentCluster,currentStores,currentCluster,currentStores,null,1,disableNodeBalancing,disableZoneBalancing,false,0,0,null,enableGreedySwaps,swapAttempts,swapsPerNode,swapsPerZone,greedyZones,0);
  assertFalse(verifyNodesBalancedInEachZone(repartitionedCluster));
  assertFalse(verifyZonesBalanced(repartitionedCluster));
  PartitionBalance repartitionedPb=new PartitionBalance(repartitionedCluster,currentStores);
  assertTrue(repartitionedPb.getUtility() < currentPb.getUtility());
  greedyZones=new ArrayList<Integer>();
  greedyZones.add(currentCluster.getZoneIds().iterator().next());
  repartitionedCluster=Repartitioner.repartition(currentCluster,currentStores,currentCluster,currentStores,null,1,disableNodeBalancing,disableZoneBalancing,false,0,0,null,enableGreedySwaps,swapAttempts,swapsPerNode,swapsPerZone,greedyZones,0);
  assertFalse(verifyNodesBalancedInEachZone(repartitionedCluster));
  assertFalse(verifyZonesBalanced(repartitionedCluster));
  repartitionedPb=new PartitionBalance(repartitionedCluster,currentStores);
  assertTrue(repartitionedPb.getUtility() < currentPb.getUtility());
  greedyZones=Collections.<Integer>emptyList();
  repartitionedCluster=Repartitioner.repartition(currentCluster,currentStores,currentCluster,currentStores,null,1,disableNodeBalancing,disableZoneBalancing,false,0,0,null,enableGreedySwaps,swapAttempts,swapsPerNode,swapsPerZone,greedyZones,0);
  assertFalse(verifyNodesBalancedInEachZone(repartitionedCluster));
  assertFalse(verifyZonesBalanced(repartitionedCluster));
  repartitionedPb=new PartitionBalance(repartitionedCluster,currentStores);
  assertTrue(repartitionedPb.getUtility() < currentPb.getUtility());
}
