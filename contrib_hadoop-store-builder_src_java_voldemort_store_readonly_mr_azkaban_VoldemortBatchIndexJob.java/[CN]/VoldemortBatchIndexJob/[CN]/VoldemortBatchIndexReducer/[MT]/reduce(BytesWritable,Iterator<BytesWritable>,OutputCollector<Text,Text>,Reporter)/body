{
  byte[] keyBytes=ByteUtils.copy(key.get(),0,key.getSize());
  while (values.hasNext()) {
    BytesWritable value=values.next();
    byte[] valBytes=ByteUtils.copy(value.get(),0,value.getSize());
    if (_nodeId == -1) {
      DataInputStream buffer=new DataInputStream(new ByteArrayInputStream(valBytes));
      _nodeId=buffer.readInt();
    }
    byte[] value1=ByteUtils.copy(valBytes,4,valBytes.length);
    if (logger.isDebugEnabled()) {
      logger.debug("Reduce Original key: size:" + keyBytes.length + " val:"+ ByteUtils.toHexString(keyBytes));
      logger.debug("Reduce value bytes:" + value1.length + " ["+ ByteUtils.toHexString(value1)+ "]");
    }
    _indexFileStream.write(keyBytes);
    _indexFileStream.writeLong(_position);
    _valueFileStream.writeInt(value1.length);
    _valueFileStream.write(value1);
    _position+=value1.length + 4;
    if (_position < 0) {
      logger.error("Position bigger than Integer size, split input files.");
      System.exit(1);
    }
  }
}
