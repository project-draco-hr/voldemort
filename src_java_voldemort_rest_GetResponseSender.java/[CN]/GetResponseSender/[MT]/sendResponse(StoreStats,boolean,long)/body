{
  MimeMultipart multiPart=new MimeMultipart();
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  String contentLocationKey="/" + this.storeName + "/"+ new String(Base64.encodeBase64(key.get()));
  for (  Versioned<byte[]> versionedValue : versionedValues) {
    byte[] responseValue=versionedValue.getValue();
    VectorClock vectorClock=(VectorClock)versionedValue.getVersion();
    String eTag=RestUtils.getSerializedVectorClock(vectorClock);
    MimeBodyPart body=new MimeBodyPart();
    try {
      body.addHeader(CONTENT_TYPE,"application/octet-stream");
      body.addHeader(CONTENT_TRANSFER_ENCODING,"binary");
      body.addHeader(RestMessageHeaders.X_VOLD_VECTOR_CLOCK,eTag);
      body.setContent(responseValue,"application/octet-stream");
      multiPart.addBodyPart(body);
    }
 catch (    MessagingException me) {
      logger.error("Exception while constructing body part",me);
      outputStream.close();
      throw me;
    }
  }
  try {
    multiPart.writeTo(outputStream);
  }
 catch (  Exception e) {
    logger.error("Exception while writing multipart to output stream",e);
    outputStream.close();
    throw e;
  }
  ChannelBuffer responseContent=ChannelBuffers.dynamicBuffer();
  responseContent.writeBytes(outputStream.toByteArray());
  HttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
  response.setHeader(CONTENT_TYPE,"multipart/binary");
  response.setHeader(CONTENT_TRANSFER_ENCODING,"binary");
  response.setHeader(CONTENT_LOCATION,contentLocationKey);
  response.setContent(responseContent);
  response.setHeader(CONTENT_LENGTH,response.getContent().readableBytes());
  this.messageEvent.getChannel().write(response);
  if (performanceStats != null && isFromLocalZone) {
    recordStats(performanceStats,startTimeInMs,Tracked.GET);
  }
  outputStream.close();
}
