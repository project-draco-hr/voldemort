{
  final TreeMultimap<Integer,Integer> stealerToStolenPrimaryPartitions=TreeMultimap.create();
  ClusterMapper mapper=new ClusterMapper();
  if (outputDir != null)   RebalanceUtils.dumpClusters(targetCluster,finalCluster,outputDir);
  for (  Node stealerNode : finalCluster.getNodes()) {
    List<Integer> stolenPrimaryPartitions=RebalanceUtils.getStolenPrimaryPartitions(targetCluster,finalCluster,stealerNode.getId());
    if (stolenPrimaryPartitions.size() > 0) {
      numPrimaryPartitionMoves+=stolenPrimaryPartitions.size();
      stealerToStolenPrimaryPartitions.putAll(stealerNode.getId(),stolenPrimaryPartitions);
    }
  }
  int batches=0;
  Cluster batchTargetCluster=mapper.readCluster(new StringReader(mapper.writeCluster(targetCluster)));
  while (!stealerToStolenPrimaryPartitions.isEmpty()) {
    Cluster batchFinalCluster=mapper.readCluster(new StringReader(mapper.writeCluster(batchTargetCluster)));
    int partitions=0;
    List<Entry<Integer,Integer>> partitionsMoved=Lists.newArrayList();
    for (    Entry<Integer,Integer> stealerToPartition : stealerToStolenPrimaryPartitions.entries()) {
      partitionsMoved.add(stealerToPartition);
      batchFinalCluster=RebalanceUtils.createUpdatedCluster(batchFinalCluster,stealerToPartition.getKey(),Lists.newArrayList(stealerToPartition.getValue()));
      partitions++;
      if (partitions == batchSize)       break;
    }
    for (Iterator<Entry<Integer,Integer>> partitionMoved=partitionsMoved.iterator(); partitionMoved.hasNext(); ) {
      Entry<Integer,Integer> entry=partitionMoved.next();
      stealerToStolenPrimaryPartitions.remove(entry.getKey(),entry.getValue());
    }
    if (outputDir != null)     RebalanceUtils.dumpClusters(batchTargetCluster,batchFinalCluster,outputDir,"batch-" + Integer.toString(batches) + ".");
    boolean deleteEnabled=false;
    final RebalanceClusterPlan rebalanceClusterPlan=new RebalanceClusterPlan(batchTargetCluster,batchFinalCluster,finalStores,deleteEnabled,stealerBased);
    batchPlans.add(rebalanceClusterPlan);
    numXZonePartitionStoreMoves+=rebalanceClusterPlan.getCrossZonePartitionStoreMoves();
    numPartitionStoreMoves+=rebalanceClusterPlan.getPartitionStoreMoves();
    nodeMoveMap.add(rebalanceClusterPlan.getNodeMoveMap());
    zoneMoveMap.add(rebalanceClusterPlan.getZoneMoveMap());
    batches++;
    batchTargetCluster=mapper.readCluster(new StringReader(mapper.writeCluster(batchFinalCluster)));
  }
  logger.info(this);
}
