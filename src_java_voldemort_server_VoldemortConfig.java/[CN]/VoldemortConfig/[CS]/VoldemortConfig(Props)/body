{
  try {
    this.nodeId=props.getInt("node.id");
  }
 catch (  UndefinedPropertyException e) {
    this.nodeId=getIntEnvVariable(VOLDEMORT_NODE_ID_VAR_NAME);
  }
  this.voldemortHome=props.getString("voldemort.home");
  this.dataDirectory=props.getString("data.directory",this.voldemortHome + File.separator + "data");
  this.metadataDirectory=props.getString("metadata.directory",voldemortHome + File.separator + "config");
  this.bdbCacheSize=props.getBytes("bdb.cache.size",200 * 1024 * 1024);
  this.bdbWriteTransactions=props.getBoolean("bdb.write.transactions",false);
  this.bdbFlushTransactions=props.getBoolean("bdb.flush.transactions",false);
  this.bdbDataDirectory=props.getString("bdb.data.directory",this.dataDirectory + File.separator + "bdb");
  this.bdbMaxLogFileSize=props.getBytes("bdb.max.logfile.size",60 * 1024 * 1024);
  this.bdbBtreeFanout=props.getInt("bdb.btree.fanout",512);
  this.bdbCheckpointBytes=props.getLong("bdb.checkpoint.interval.bytes",20 * 1024 * 1024);
  this.bdbCheckpointMs=props.getLong("bdb.checkpoint.interval.ms",30 * Time.MS_PER_SECOND);
  this.bdbSortedDuplicates=props.getBoolean("bdb.enable.sorted.duplicates",true);
  this.bdbOneEnvPerStore=props.getBoolean("bdb.one.env.per.store",false);
  this.bdbCleanerMinFileUtilization=props.getInt("bdb.cleaner.min.file.utilization",5);
  this.bdbCleanerMinUtilization=props.getInt("bdb.cleaner.minUtilization",50);
  this.bdbCursorPreload=props.getBoolean("bdb.cursor.preload",false);
  this.readOnlyBackups=props.getInt("readonly.backups",1);
  this.readOnlySearchStrategy=props.getString("readonly.search.strategy",BinarySearchStrategy.class.getName());
  this.readOnlyStorageDir=props.getString("readonly.data.directory",this.dataDirectory + File.separator + "read-only");
  this.slopStoreType=props.getString("slop.store.engine",BdbStorageConfiguration.TYPE_NAME);
  this.mysqlUsername=props.getString("mysql.user","root");
  this.mysqlPassword=props.getString("mysql.password","");
  this.mysqlHost=props.getString("mysql.host","localhost");
  this.mysqlPort=props.getInt("mysql.port",3306);
  this.mysqlDatabaseName=props.getString("mysql.database","voldemort");
  this.maxThreads=props.getInt("max.threads",100);
  this.coreThreads=props.getInt("core.threads",Math.max(1,maxThreads / 2));
  this.adminMaxThreads=props.getInt("admin.max.threads",10);
  this.adminCoreThreads=props.getInt("admin.core.threads",Math.max(1,adminMaxThreads / 2));
  this.adminStreamBufferSize=(int)props.getBytes("admin.streams.buffer.size",10 * 1000 * 1000);
  this.adminConnectionTimeout=props.getInt("admin.client.socket.timeout.ms",5 * 60 * 1000);
  this.adminSocketTimeout=props.getInt("admin.client.socket.timeout.ms",10000);
  this.streamMaxReadBytesPerSec=props.getInt("stream.read.byte.per.sec",10 * 1000 * 1000);
  this.streamMaxWriteBytesPerSec=props.getInt("stream.write.byte.per.sec",10 * 1000 * 1000);
  this.socketTimeoutMs=props.getInt("socket.timeout.ms",4000);
  this.socketBufferSize=(int)props.getBytes("socket.buffer.size",32 * 1024);
  this.useNioConnector=props.getBoolean("enable.nio.connector",false);
  this.nioConnectorSelectors=props.getInt("nio.connector.selectors",Runtime.getRuntime().availableProcessors());
  this.clientMaxConnectionsPerNode=props.getInt("client.max.connections.per.node",5);
  this.clientConnectionTimeoutMs=props.getInt("client.connection.timeout.ms",400);
  this.clientRoutingTimeoutMs=props.getInt("client.routing.timeout.ms",5000);
  this.clientNodeBannageMs=props.getInt("client.node.bannage.ms",10000);
  this.clientMaxThreads=props.getInt("client.max.threads",100);
  this.clientThreadIdleMs=props.getInt("client.thread.idle.ms",5000);
  this.clientMaxQueuedRequests=props.getInt("client.max.queued.requests",1000);
  this.enableHttpServer=props.getBoolean("http.enable",true);
  this.enableSocketServer=props.getBoolean("socket.enable",true);
  this.enableAdminServer=props.getBoolean("admin.enable",true);
  this.enableJmx=props.getBoolean("jmx.enable",true);
  this.enableSlop=props.getBoolean("slop.enable",true);
  this.enableVerboseLogging=props.getBoolean("enable.verbose.logging",true);
  this.enableStatTracking=props.getBoolean("enable.stat.tracking",true);
  this.enableServerRouting=props.getBoolean("enable.server.routing",true);
  this.enableMetadataChecking=props.getBoolean("enable.metadata.checking",true);
  this.enableRedirectRouting=props.getBoolean("enable.redirect.routing",true);
  this.pusherPollMs=props.getInt("pusher.poll.ms",2 * 60 * 1000);
  this.schedulerThreads=props.getInt("scheduler.threads",3);
  this.numCleanupPermits=props.getInt("num.cleanup.permits",1);
  this.storageConfigurations=props.getList("storage.configs",ImmutableList.of(BdbStorageConfiguration.class.getName(),MysqlStorageConfiguration.class.getName(),InMemoryStorageConfiguration.class.getName(),CacheStorageConfiguration.class.getName(),ReadOnlyStorageConfiguration.class.getName()));
  this.retentionCleanupFirstStartTimeInHour=props.getInt("retention.cleanup.first.start.hour",0);
  this.retentionCleanupScheduledPeriodInHour=props.getInt("retention.cleanup.period.hours",24);
  this.allProps=props;
  String requestFormatName=props.getString("request.format",RequestFormatType.VOLDEMORT_V1.getCode());
  this.requestFormatType=RequestFormatType.fromCode(requestFormatName);
  this.enableNetworkClassLoader=props.getBoolean("enable.network.classloader",false);
  validateParams();
}
