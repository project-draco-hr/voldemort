{
  for (String line=reader.readLine(); line != null; line=reader.readLine()) {
    System.out.print(PROMPT);
    if (line.trim().equals(""))     continue;
    if (printCommands)     System.out.println(line);
    try {
      if (line.toLowerCase().startsWith("get")) {
        JsonDecoder decoder=new JsonDecoder(keySchema,line.substring("get".length()));
        GenericDatumReader<Object> datumReader=null;
        Object key=null;
        try {
          datumReader=new GenericDatumReader<Object>(keySchema);
          key=datumReader.read(null,decoder);
        }
 catch (        IOException e) {
        }
        if (key == null) {
          System.err.println("Error parsing key ");
          continue;
        }
        System.out.println("Value - " + client.get(key));
      }
 else       if (line.toLowerCase().startsWith("put")) {
        String regex="([^\"]\\S*|\".+?\")\\s*";
        Matcher m=Pattern.compile(regex).matcher(line.substring("put".length()));
        String keyString=null;
        String valueString=null;
        if (!m.find()) {
          System.err.println("Error parsing key ");
          continue;
        }
        if (m.group(1) != null) {
          keyString=m.group(1);
        }
 else {
          keyString=m.group(2);
        }
        if (!m.find()) {
          System.err.println("Error parsing value ");
          continue;
        }
        if (m.group(1) != null) {
          valueString=m.group(1);
        }
 else {
          valueString=m.group(2);
        }
        JsonDecoder keyDecoder=new JsonDecoder(keySchema,keyString);
        JsonDecoder valueDecoder=new JsonDecoder(valueSchema,valueString);
        GenericDatumReader<Object> datumReader=null;
        Object key=null;
        Object value=null;
        try {
          datumReader=new GenericDatumReader<Object>(keySchema);
          key=datumReader.read(null,keyDecoder);
        }
 catch (        IOException e) {
        }
        if (key == null) {
          System.err.println("Error parsing key ");
          continue;
        }
        try {
          datumReader=new GenericDatumReader<Object>(valueSchema);
          value=datumReader.read(null,valueDecoder);
        }
 catch (        IOException e) {
        }
        if (value == null) {
          System.err.println("Error parsing value ");
          continue;
        }
        System.out.println("Put - " + client.put(key,value));
      }
 else       if (line.startsWith("quit") || line.startsWith("exit")) {
        System.out.println("k k thx bye.");
        System.exit(0);
      }
 else {
        System.err.println("Only supported 'get' & 'put' ");
      }
    }
 catch (    Exception e) {
      System.err.println("Unexpected error:");
      e.printStackTrace(System.err);
    }
  }
}
