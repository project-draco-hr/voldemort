{
  int clusterSize=ec2RebalancingTestConfig.getInstanceCount();
  int[][] targetLayout;
  if (spareNode)   targetLayout=splitLastPartition(partitionMap,partitionMap[clusterSize - 2].length - 2);
 else   targetLayout=insertNode(partitionMap,partitionMap[clusterSize - 1].length - 2);
  if (logger.isInfoEnabled())   logPartitionMap(targetLayout,"Target");
  final Cluster targetCluster=expandCluster(ec2RebalancingTestConfig.addNodes,ServerTestUtils.getLocalCluster(targetLayout.length,getPorts(targetLayout.length),targetLayout));
  List<Integer> originalNodes=new ArrayList<Integer>();
  for (  Node node : originalCluster.getNodes()) {
    if (node.getId() == (clusterSize - 1) && spareNode)     break;
    originalNodes.add(node.getId());
  }
  try {
    ExecutorService executorService=Executors.newFixedThreadPool(2);
    final AtomicBoolean rebalancingToken=new AtomicBoolean(false);
    final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
    populateData(originalCluster,originalNodes);
    final SocketStoreClientFactory factory=new SocketStoreClientFactory(new ClientConfig().setBootstrapUrls(getBootstrapUrl(originalCluster,0)));
    final StoreClient<String,String> storeClient=new DefaultStoreClient<String,String>(ec2RebalancingTestConfig.testStoreName,null,factory,5);
    final boolean[] masterNodeResponded={false,false};
    executorService.execute(new Runnable(){
      public void run(){
        try {
          List<String> keys=new ArrayList<String>(testEntries.keySet());
          while (!rebalancingToken.get()) {
            int index=(int)(Math.random() * keys.size());
            try {
              Versioned<String> value=storeClient.get(keys.get(index));
              assertNotNull("StoreClient get() should not return null.",value);
              assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
              int masterNode=storeClient.getResponsibleNodes(keys.get(index)).get(0).getId();
              masterNodeResponded[masterNode]=true;
            }
 catch (            UnreachableStoreException e) {
            }
catch (            Exception e) {
              exceptions.add(e);
            }
          }
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
 finally {
          factory.close();
        }
      }
    }
);
    executorService.execute(new Runnable(){
      public void run(){
        try {
          Thread.sleep(100);
          RebalanceClient rebalanceClient=new RebalanceClient(getBootstrapUrl(originalCluster,0),new RebalanceClientConfig());
          rebalanceAndCheck(originalCluster,targetCluster,rebalanceClient,Arrays.asList(1));
          Thread.sleep(60 * 1000);
          rebalancingToken.set(true);
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
);
    executorService.shutdown();
    executorService.awaitTermination(300,TimeUnit.SECONDS);
    assertTrue("Client should see values returned master at both (0,1):(" + masterNodeResponded[0] + ","+ masterNodeResponded[1]+ ")",masterNodeResponded[0] && masterNodeResponded[1]);
    if (exceptions.size() > 0) {
      for (      Exception e : exceptions) {
        e.printStackTrace();
      }
      fail("Should not see any exceptions !!");
    }
  }
  finally {
    stopCluster(hostNames,ec2RebalancingTestConfig);
  }
}
