{
  assert(ec2RebalancingTestConfig.getInstanceCount() == 2);
  final Cluster targetCluster=expandCluster(0,ServerTestUtils.getLocalCluster(2,getPorts(2),new int[][]{{},{0,1,2,3}}));
  try {
    final List<Integer> serverList=Arrays.asList(0,1);
    ExecutorService executors=Executors.newFixedThreadPool(2);
    final AtomicBoolean rebalancingToken=new AtomicBoolean(false);
    final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
    populateData(originalCluster,Arrays.asList(0));
    final SocketStoreClientFactory factory=new SocketStoreClientFactory(new ClientConfig().setSocketTimeout(60,TimeUnit.SECONDS).setBootstrapUrls(getBootstrapUrl(originalCluster,0)));
    final StoreClient<String,String> storeClient=new DefaultStoreClient<String,String>(ec2RebalancingTestConfig.testStoreName,null,factory,3);
    final boolean[] masterNodeResponded={false,false};
    executors.execute(new Runnable(){
      public void run(){
        try {
          List<String> keys=new ArrayList<String>(testEntries.keySet());
          boolean caughtIsONException=false;
          int nRequests=0;
          while (!rebalancingToken.get()) {
            int index=(int)(Math.random() * keys.size());
            try {
              nRequests++;
              Versioned<String> value=storeClient.get(keys.get(index));
              assertNotSame("StoreClient get() should not return null.",null,value);
              assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
              int masterNode=storeClient.getResponsibleNodes(keys.get(index)).get(0).getId();
              masterNodeResponded[masterNode]=true;
            }
 catch (            InsufficientOperationalNodesException ison) {
              if (!caughtIsONException) {
                ison.printStackTrace();
                exceptions.add(ison);
                caughtIsONException=true;
              }
            }
catch (            Exception e) {
              e.printStackTrace();
              exceptions.add(e);
            }
          }
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
 finally {
          factory.close();
        }
      }
    }
);
    executors.execute(new Runnable(){
      public void run(){
        try {
          Thread.sleep(100);
          RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(originalCluster,0),new RebalanceClientConfig());
          rebalanceAndCheck(originalCluster,targetCluster,rebalanceClient,Arrays.asList(1));
          Thread.sleep(60 * 1000);
          rebalancingToken.set(true);
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
 finally {
        }
      }
    }
);
    executors.shutdown();
    executors.awaitTermination(300,TimeUnit.SECONDS);
    assertEquals("Client should see values returned master at both (0,1):(" + masterNodeResponded[0] + ","+ masterNodeResponded[1]+ ")",true,masterNodeResponded[0] && masterNodeResponded[1]);
    if (exceptions.size() > 0) {
      for (      Exception e : exceptions) {
        e.printStackTrace();
      }
      fail("Should not see any exceptions !!");
    }
  }
  finally {
    stopCluster(hostNames,ec2RebalancingTestConfig);
  }
}
