{
  StoreUtils.assertValidKey(key);
  FsKeyPath path=makePath(key);
  File file=new File(path.getPath());
synchronized (lockFor(path)) {
    try {
      FsKeyAndValues found=FsKeyAndValues.read(file);
      FsKeyAndValues updated;
      if (found == null) {
        updated=new FsKeyAndValues(key,Collections.singletonList(value));
      }
 else {
        List<Versioned<byte[]>> pruned=new ArrayList<Versioned<byte[]>>(found.getValues().size());
        for (        Versioned<byte[]> v : found.getValues()) {
          Occured occured=value.getVersion().compare(v.getVersion());
          if (occured == Occured.BEFORE)           throw new ObsoleteVersionException(value.getVersion().toString() + " is obsolete, it is no greater than the current version of " + v.getVersion()+ ".");
 else           if (occured == Occured.CONCURRENTLY)           pruned.add(v);
        }
        pruned.add(value);
        updated=new FsKeyAndValues(key,pruned);
      }
      updated.writeTo(file);
    }
 catch (    IOException e) {
      logger.error("Filesystem error in put.",e);
      throw new PersistenceFailureException("Filesystem error while reading values.",e);
    }
  }
}
