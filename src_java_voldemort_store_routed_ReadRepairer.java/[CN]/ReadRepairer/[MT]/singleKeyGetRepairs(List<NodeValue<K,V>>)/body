{
  int size=nodeValues.size();
  if (size <= 1)   return Collections.emptyList();
  Multimap<Integer,NodeValue<K,V>> nodeVersionsMap=HashMultimap.create();
  for (  NodeValue<K,V> nodeValue : nodeValues) {
    nodeVersionsMap.put(nodeValue.getNodeId(),nodeValue);
  }
  Map<Version,NodeValue<K,V>> mostCurrentVersionsMap=new HashMap<Version,NodeValue<K,V>>();
  mostCurrentVersionsMap.put(nodeValues.get(0).getVersion(),nodeValues.get(0));
  for (int i=1; i < nodeValues.size(); i++) {
    NodeValue<K,V> curr=nodeValues.get(i);
    boolean concurrentToAll=true;
    Set<Version> knownGoodVersions=new HashSet<Version>(mostCurrentVersionsMap.keySet());
    for (    Version currentGoodversion : knownGoodVersions) {
      if (curr.getVersion().equals(currentGoodversion)) {
        concurrentToAll=false;
        if (logger.isDebugEnabled()) {
          logger.debug("Version already exists in the most current set: " + curr);
        }
        break;
      }
      Occurred occurred=curr.getVersion().compare(currentGoodversion);
      if (occurred == Occurred.BEFORE) {
        if (logger.isDebugEnabled()) {
          logger.debug("Version is obsolete : " + curr);
        }
        concurrentToAll=false;
        break;
      }
 else       if (occurred == Occurred.AFTER) {
        mostCurrentVersionsMap.remove(currentGoodversion);
        concurrentToAll=false;
        mostCurrentVersionsMap.put(curr.getVersion(),curr);
        if (logger.isDebugEnabled()) {
          logger.debug("Updating the current best - adding : " + curr);
        }
      }
    }
    if (concurrentToAll) {
      mostCurrentVersionsMap.put(curr.getVersion(),curr);
      if (logger.isDebugEnabled()) {
        logger.debug("Value is concurrent to all ! : " + curr);
      }
    }
  }
  List<NodeValue<K,V>> repairs=new ArrayList<NodeValue<K,V>>(3);
  for (  int nodeId : nodeVersionsMap.keySet()) {
    Set<Version> finalVersions=new HashSet<Version>(mostCurrentVersionsMap.keySet());
    if (logger.isDebugEnabled()) {
      logger.debug("Set of final versions = " + finalVersions);
    }
    Set<Version> currentNodeVersions=new HashSet<Version>();
    for (    NodeValue<K,V> nodeValue : nodeVersionsMap.get(nodeId)) {
      currentNodeVersions.add(nodeValue.getVersion());
    }
    finalVersions.removeAll(currentNodeVersions);
    if (logger.isDebugEnabled()) {
      logger.debug("Remaining versions to be repaired for this node after the set difference = " + finalVersions);
    }
    for (    Version remainingVersion : finalVersions) {
      NodeValue<K,V> repair=new NodeValue<K,V>(nodeId,mostCurrentVersionsMap.get(remainingVersion).getKey(),mostCurrentVersionsMap.get(remainingVersion).getVersioned());
      if (logger.isDebugEnabled()) {
        logger.debug("Node value marked to be repaired : " + repair);
      }
      repairs.add(repair);
    }
  }
  return repairs;
}
