{
  int size=nodeValues.size();
  if (size <= 1)   return Collections.emptyList();
  Set<Integer> obsolete=new HashSet<Integer>(3);
  Multimap<Version,NodeValue<K,V>> concurrents=new HashMultimap<Version,NodeValue<K,V>>();
  concurrents.put(nodeValues.get(0).getVersion(),nodeValues.get(0));
  for (int i=1; i < nodeValues.size(); i++) {
    NodeValue<K,V> curr=nodeValues.get(i);
    boolean concurrentToAll=true;
    Set<Version> versions=new HashSet<Version>(concurrents.keySet());
    for (    Version concurrentVersion : versions) {
      if (curr.getVersion().equals(concurrentVersion)) {
        concurrents.put(curr.getVersion(),curr);
        break;
      }
      Occured occured=curr.getVersion().compare(concurrentVersion);
      if (occured == Occured.BEFORE) {
        obsolete.add(curr.getNodeId());
        concurrentToAll=false;
        break;
      }
 else       if (occured == Occured.AFTER) {
        for (        NodeValue<K,V> v : concurrents.get(concurrentVersion))         obsolete.add(v.getNodeId());
        concurrents.removeAll(concurrentVersion);
        concurrentToAll=false;
        concurrents.put(curr.getVersion(),curr);
      }
    }
    if (concurrentToAll)     concurrents.put(curr.getVersion(),curr);
  }
  List<NodeValue<K,V>> repairs=new ArrayList<NodeValue<K,V>>(3);
  for (  Integer id : obsolete) {
    for (    Version v : concurrents.keySet()) {
      Iterator<NodeValue<K,V>> it=concurrents.get(v).iterator();
      NodeValue<K,V> concurrent=it.next();
      NodeValue<K,V> repair=new NodeValue<K,V>(id,concurrent.getKey(),concurrent.getVersioned());
      repairs.add(repair);
    }
  }
  if (concurrents.size() > 1) {
    HashSet<NodeValue<K,V>> existing=new HashSet<NodeValue<K,V>>();
    for (    NodeValue<K,V> value : repairs)     existing.add(value);
    for (    NodeValue<K,V> entry1 : concurrents.values()) {
      for (      NodeValue<K,V> entry2 : concurrents.values()) {
        if (!entry1.getVersion().equals(entry2.getVersion())) {
          NodeValue<K,V> repair=new NodeValue<K,V>(entry1.getNodeId(),entry2.getKey(),entry2.getVersioned());
          if (!existing.contains(repair))           repairs.add(repair);
        }
      }
    }
  }
  return repairs;
}
