{
  Node node=this.getMetadata().getCluster().getNodeById(nodeId);
  final SocketDestination destination=new SocketDestination(node.getHost(),node.getAdminPort(),RequestFormatType.ADMIN_PROTOCOL_BUFFERS);
  final SocketAndStreams sands=pool.checkout(destination);
  DataOutputStream outputStream=sands.getOutputStream();
  final DataInputStream inputStream=sands.getInputStream();
  try {
    VAdminProto.FetchPartitionEntriesRequest.Builder fetchRequest=VAdminProto.FetchPartitionEntriesRequest.newBuilder().addAllPartitions(partitionList).setStore(storeName);
    if (filter != null) {
      fetchRequest.setFilter(encodeFilter(filter));
    }
    VAdminProto.VoldemortAdminRequest request=VAdminProto.VoldemortAdminRequest.newBuilder().setFetchPartitionEntries(fetchRequest).setType(VAdminProto.AdminRequestType.FETCH_PARTITION_ENTRIES).build();
    ProtoUtils.writeMessage(outputStream,request);
    outputStream.flush();
  }
 catch (  IOException e) {
    close(sands.getSocket());
    pool.checkin(destination,sands);
    throw new VoldemortException(e);
  }
  return new AbstractIterator<ByteArray>(){
    @Override public ByteArray computeNext(){
      try {
        int size=inputStream.readInt();
        if (size <= 0) {
          pool.checkin(destination,sands);
          return endOfData();
        }
        byte[] input=new byte[size];
        ByteUtils.read(inputStream,input);
        VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
        response.mergeFrom(input);
        if (response.hasError()) {
          pool.checkin(destination,sands);
          throwException(response.getError());
        }
        return ProtoUtils.decodeBytes(response.getKey());
      }
 catch (      IOException e) {
        close(sands.getSocket());
        pool.checkin(destination,sands);
        throw new VoldemortException(e);
      }
    }
  }
;
}
