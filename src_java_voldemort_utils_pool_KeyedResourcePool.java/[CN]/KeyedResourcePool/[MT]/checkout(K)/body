{
  checkNotClosed();
  long startNs=System.nanoTime();
  long timeoutNs=resourcePoolConfig.getTimeout(TimeUnit.NANOSECONDS);
  long endNs=startNs + timeoutNs;
  Pool<V> resourcePool=getResourcePoolForKey(key);
  V resource=null;
  try {
    checkNotClosed();
    long totalNonBlockingElapsedNs=0;
    long iterStartTime=0;
    long totalBlockingElapsedNs=0;
    final long MAX_WAIT_TIME=300 * Time.NS_PER_MS;
    while (resource == null && (iterStartTime=System.nanoTime()) < endNs) {
      resource=attemptNonBlockingCheckout(key,resourcePool);
      if (resource != null)       break;
      long nonBlockingFinishTime=System.nanoTime();
      totalNonBlockingElapsedNs+=(nonBlockingFinishTime - iterStartTime);
      long timeRemainingNs=endNs - nonBlockingFinishTime;
      long waitNs=timeRemainingNs;
      if (resourcePool.size.get() < resourcePool.maxPoolSize) {
        waitNs=Math.min(timeRemainingNs,MAX_WAIT_TIME);
      }
      if (waitNs > 0) {
        resource=resourcePool.blockingGet(waitNs);
        totalBlockingElapsedNs+=(System.nanoTime() - nonBlockingFinishTime);
      }
    }
    if (resource == null) {
      String errorMessage=String.format("Timeout while checking out resource (%s). Configured time (%d) ns NonBlocking time (%d) ns Blocking time (%d) ns ",key,timeoutNs,totalNonBlockingElapsedNs,totalBlockingElapsedNs);
      throw new TimeoutException(errorMessage);
    }
    if (!objectFactory.validate(key,resource))     throw new ExcessiveInvalidResourcesException(1);
  }
 catch (  Exception e) {
    destroyResource(key,resourcePool,resource);
    throw e;
  }
  return resource;
}
