{
  StoreUtils.assertValidKeys(keys);
  Iterable<ByteArray> processedKeys=keys;
  List<ByteArray> deflatedKeys=Lists.newArrayList();
  for (  ByteArray key : keys)   deflatedKeys.add(deflateKey(key));
  processedKeys=deflatedKeys;
  Map<ByteArray,byte[]> newTransforms=Maps.newHashMap();
  if (transforms != null) {
    for (    Map.Entry<ByteArray,byte[]> transform : transforms.entrySet()) {
      newTransforms.put(deflateKey(transform.getKey()),transform == null ? null : transform.getValue());
    }
  }
 else {
    for (    ByteArray deflatedKey : processedKeys) {
      newTransforms.put(deflatedKey,null);
    }
  }
  Map<ByteArray,List<Versioned<byte[]>>> deflatedResult=innerStore.getAll(processedKeys,newTransforms);
  Map<ByteArray,List<Versioned<byte[]>>> result=Maps.newHashMapWithExpectedSize(deflatedResult.size());
  for (  Map.Entry<ByteArray,List<Versioned<byte[]>>> mapEntry : deflatedResult.entrySet())   result.put(inflateKey(mapEntry.getKey()),inflateValues(mapEntry.getValue()));
  return result;
}
