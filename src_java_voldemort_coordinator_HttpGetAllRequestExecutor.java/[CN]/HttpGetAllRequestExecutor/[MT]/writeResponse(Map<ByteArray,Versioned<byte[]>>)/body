{
  MimeMultipart mp=new MimeMultipart();
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  try {
    for (    Entry<ByteArray,Versioned<byte[]>> entry : responseVersioned.entrySet()) {
      Versioned<byte[]> value=entry.getValue();
      ByteArray keyByteArray=entry.getKey();
      String base64Key=new String(Base64.encodeBase64(keyByteArray.get()));
      String contentLocationKey="/" + this.storeName + "/"+ base64Key;
      byte[] responseValue=value.getValue();
      VectorClock vc=(VectorClock)value.getVersion();
      VectorClockWrapper vcWrapper=new VectorClockWrapper(vc);
      ObjectMapper mapper=new ObjectMapper();
      String eTag="";
      try {
        eTag=mapper.writeValueAsString(vcWrapper);
      }
 catch (      JsonGenerationException e) {
        e.printStackTrace();
      }
catch (      JsonMappingException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      if (logger.isDebugEnabled()) {
        logger.debug("ETAG : " + eTag);
      }
      MimeBodyPart body=new MimeBodyPart();
      body.addHeader(CONTENT_TYPE,"application/octet-stream");
      body.addHeader(CONTENT_LOCATION,contentLocationKey);
      body.addHeader(CONTENT_TRANSFER_ENCODING,"binary");
      body.addHeader(CONTENT_LENGTH,"" + responseValue.length);
      body.addHeader(ETAG,eTag);
      body.setContent(responseValue,"application/octet-stream");
      mp.addBodyPart(body);
    }
    mp.writeTo(outputStream);
  }
 catch (  MessagingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  ChannelBuffer responseContent=ChannelBuffers.dynamicBuffer();
  responseContent.writeBytes(outputStream.toByteArray());
  HttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
  response.setHeader(CONTENT_TYPE,"multipart/binary");
  response.setHeader(CONTENT_TRANSFER_ENCODING,"binary");
  response.setContent(responseContent);
  response.setHeader(CONTENT_LENGTH,response.getContent().readableBytes());
  ChannelFuture future=this.getRequestMessageEvent.getChannel().write(response);
  future.addListener(ChannelFutureListener.CLOSE);
}
