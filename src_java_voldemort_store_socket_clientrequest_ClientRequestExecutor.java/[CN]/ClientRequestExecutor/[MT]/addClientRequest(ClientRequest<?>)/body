{
  if (logger.isTraceEnabled())   logger.trace("Associating client with " + socketChannel.socket().getRemoteSocketAddress());
  this.clientRequest=clientRequest;
  outputStream.getBuffer().clear();
  boolean wasSuccessful=clientRequest.formatRequest(new DataOutputStream(outputStream));
  if (logger.isTraceEnabled())   traceInputBufferState("About to clear read buffer");
  if (inputStream.getBuffer().capacity() >= resizeThreshold)   inputStream.setBuffer(ByteBuffer.allocate(socketBufferSize));
 else   inputStream.getBuffer().clear();
  if (logger.isTraceEnabled())   traceInputBufferState("Cleared read buffer");
  outputStream.getBuffer().flip();
  if (wasSuccessful) {
    SelectionKey selectionKey=socketChannel.keyFor(selector);
    if (selectionKey != null) {
      selectionKey.interestOps(SelectionKey.OP_WRITE);
      selector.wakeup();
    }
 else {
      if (logger.isDebugEnabled())       logger.debug("Client associated with " + socketChannel.socket().getRemoteSocketAddress() + " was not registered with Selector, assuming initial protocol negotiation");
    }
  }
 else {
    if (logger.isEnabledFor(Level.WARN))     logger.warn("Client associated with " + socketChannel.socket().getRemoteSocketAddress() + " did not successfully buffer output for request");
    completeClientRequest();
  }
}
