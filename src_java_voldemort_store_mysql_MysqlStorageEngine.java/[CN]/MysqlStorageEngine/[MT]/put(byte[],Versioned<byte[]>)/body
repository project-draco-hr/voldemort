{
  StoreUtils.assertValidKey(key);
  boolean doCommit=false;
  Connection conn=null;
  PreparedStatement insert=null;
  PreparedStatement select=null;
  ResultSet results=null;
  String insertSql="insert into " + name + " (key_, version_, value_) values (?, ?, ?)";
  String selectSql="select key_, version_ from " + name + " where key_ = ?";
  try {
    conn=datasource.getConnection();
    conn.setAutoCommit(false);
    select=conn.prepareStatement(selectSql);
    select.setBytes(1,key);
    results=select.executeQuery();
    while (results.next()) {
      byte[] thisKey=results.getBytes("key_");
      VectorClock version=new VectorClock(results.getBytes("version_"));
      Occured occured=value.getVersion().compare(version);
      if (occured == Occured.BEFORE)       throw new ObsoleteVersionException("Attempt to put version " + value.getVersion() + " which is superceeded by "+ version+ ".");
 else       if (occured == Occured.AFTER)       delete(conn,thisKey,version.toBytes());
    }
    insert=conn.prepareStatement(insertSql);
    insert.setBytes(1,key);
    VectorClock clock=(VectorClock)value.getVersion();
    insert.setBytes(2,clock.toBytes());
    insert.setBytes(3,value.getValue());
    insert.executeUpdate();
  }
 catch (  SQLException e) {
    if (e.getErrorCode() == MYSQL_ERR_DUP_KEY || e.getErrorCode() == MYSQL_ERR_DUP_ENTRY) {
      e.printStackTrace();
      throw new ObsoleteVersionException("Key or value already used.");
    }
 else {
      throw new PersistenceFailureException("Fix me!",e);
    }
  }
 finally {
    if (conn != null) {
      try {
        if (doCommit)         conn.commit();
 else         conn.rollback();
      }
 catch (      SQLException e) {
      }
    }
    tryClose(results);
    tryClose(insert);
    tryClose(select);
    tryClose(conn);
  }
}
