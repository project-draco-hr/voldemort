{
  if (!keyIterator.hasNext()) {
    return StreamRequestHandlerState.COMPLETE;
  }
  long startNs=System.nanoTime();
  ByteArray key=keyIterator.next();
  boolean entryAccepted=false;
  if (!fetchOrphaned) {
    if (keyIsNeeded(key.get())) {
      entryAccepted=true;
    }
  }
 else {
    if (!StoreInstance.checkKeyBelongsToNode(key.get(),nodeId,initialCluster,storeDef)) {
      entryAccepted=true;
    }
  }
  if (entryAccepted) {
    List<Versioned<byte[]>> values=storageEngine.get(key,null);
    reportStorageOpTime(startNs);
    throttler.maybeThrottle(key.length());
    for (    Versioned<byte[]> value : values) {
      if (filter.accept(key,value)) {
        keyFetched(key.get());
        VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
        VAdminProto.PartitionEntry partitionEntry=VAdminProto.PartitionEntry.newBuilder().setKey(ProtoUtils.encodeBytes(key)).setVersioned(ProtoUtils.encodeVersioned(value)).build();
        response.setPartitionEntry(partitionEntry);
        Message message=response.build();
        sendMessage(outputStream,message);
        throttler.maybeThrottle(AdminServiceRequestHandler.valueSize(value));
      }
    }
  }
 else {
    reportStorageOpTime(startNs);
    throttler.maybeThrottle(key.length());
  }
  scanned++;
  if (0 == scanned % STAT_RECORDS_INTERVAL) {
    progressInfoMessage("Fetch entries (progress)");
  }
  if (keyIterator.hasNext() && !fetchedEnough()) {
    return StreamRequestHandlerState.WRITING;
  }
 else {
    logger.info("Finished fetch entries for store '" + storageEngine.getName() + "' with replica to partition mapping "+ replicaToPartitionList);
    progressInfoMessage("Fetch entries (end of scan)");
    return StreamRequestHandlerState.COMPLETE;
  }
}
