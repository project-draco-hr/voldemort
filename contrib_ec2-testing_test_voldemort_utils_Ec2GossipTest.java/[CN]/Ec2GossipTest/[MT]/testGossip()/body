{
  deploy(hostNames,sshPrivateKey,hostUserId,sourceDirectory,parentDirectory);
  try {
    startClusterAsync(hostNames,sshPrivateKey,hostUserId,voldemortRootDirectory,voldemortHomeDirectory,nodeIds);
    final Pair<HostNamePair,Integer> newInstance=createAndDeployNewInstance();
    final String newHostname=newInstance.getFirst().getExternalHostName();
    final int nodeId=newInstance.getSecond();
    startClusterNode(newHostname,sshPrivateKey,hostUserId,voldemortRootDirectory,voldemortHomeDirectory,nodeId);
    if (logger.isInfoEnabled())     logger.info("Sleeping for 5 seconds to start Voldemort on the new node.");
    Thread.sleep(5000);
    final AdminClient adminClient=getAdminClient(newHostname);
    Versioned<String> versioned=adminClient.getRemoteMetadata(nodeId,MetadataStore.CLUSTER_KEY);
    Integer seedNode=Iterables.find(nodeIds.values(),new Predicate<Integer>(){
      public boolean apply(      Integer input){
        return !input.equals(nodeId);
      }
    }
);
    Version version=versioned.getVersion();
    ((VectorClock)version).incrementVersion(nodeId,((VectorClock)version).getTimestamp() + 1);
    ((VectorClock)version).incrementVersion(seedNode,((VectorClock)version).getTimestamp() + 1);
    adminClient.updateRemoteMetadata(nodeId,MetadataStore.CLUSTER_KEY,versioned);
    adminClient.updateRemoteMetadata(seedNode,MetadataStore.CLUSTER_KEY,versioned);
    assertWithBackoff(500,10000,new Attempt(){
      public void checkCondition(){
        int nodesAware=0;
        for (        int testNodeId : nodeIds.values()) {
          ClusterMapper clusterMapper=new ClusterMapper();
          Versioned<String> clusterXml=adminClient.getRemoteMetadata(testNodeId,MetadataStore.CLUSTER_KEY);
          Cluster cluster=clusterMapper.readCluster(new StringReader(clusterXml.getValue()));
          boolean foundNode=false;
          for (          Node node : cluster.getNodes()) {
            if (node.getHost().equals(newInstance.getFirst().getInternalHostName()) && node.getId() == nodeId) {
              foundNode=true;
              break;
            }
          }
          if (foundNode)           nodesAware++;
        }
        assertEquals("All nodes aware of " + nodeId,nodesAware,nodeIds.size());
      }
    }
);
  }
  finally {
    stopCluster(hostNames,sshPrivateKey,hostUserId,voldemortRootDirectory);
  }
}
