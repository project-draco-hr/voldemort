{
  Map<Integer,Integer> currentPartitionsToNodeMap=RebalanceUtils.getCurrentPartitionMapping(currentCluster);
  List<Integer> stealList=getStealList(currentCluster,targetCluster,stealNodeId);
  Map<Integer,List<Integer>> masterPartitionsMap=getStealMasterPartitions(stealList,currentPartitionsToNodeMap);
  Map<Integer,List<Integer>> replicationPartitionsMap=getReplicationChanges(currentCluster,targetCluster,stealNodeId,currentPartitionsToNodeMap);
  List<RebalancePartitionsInfo> stealInfoList=new ArrayList<RebalancePartitionsInfo>();
  for (  Node donorNode : currentCluster.getNodes()) {
    Set<Integer> stealPartitions=new HashSet<Integer>();
    Set<Integer> stealMasterPartitions=new HashSet<Integer>();
    if (masterPartitionsMap.containsKey(donorNode.getId())) {
      stealPartitions.addAll(masterPartitionsMap.get(donorNode.getId()));
      stealMasterPartitions.addAll(masterPartitionsMap.get(donorNode.getId()));
    }
    if (replicationPartitionsMap.containsKey(donorNode.getId())) {
      stealPartitions.addAll(replicationPartitionsMap.get(donorNode.getId()));
    }
    if (stealPartitions.size() > 0) {
      stealInfoList.add(new RebalancePartitionsInfo(stealNodeId,donorNode.getId(),new ArrayList<Integer>(stealPartitions),new ArrayList<Integer>(),new ArrayList<Integer>(stealMasterPartitions),storeList,new HashMap<String,String>(),new HashMap<String,String>(),0));
    }
  }
  return stealInfoList;
}
