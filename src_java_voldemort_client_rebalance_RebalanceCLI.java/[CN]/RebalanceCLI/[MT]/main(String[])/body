{
  int exitCode=ERROR_EXIT_CODE;
  try {
    OptionParser parser=new OptionParser();
    parser.accepts("help","Print usage information");
    parser.accepts("current-cluster","Path to current cluster xml").withRequiredArg().describedAs("cluster.xml");
    parser.accepts("current-stores","Path to store definition xml").withRequiredArg().describedAs("stores.xml");
    parser.accepts("entropy","True - if we want to run the entropy calculator. False - if we want to store keys").withRequiredArg().ofType(Boolean.class);
    parser.accepts("output-dir","Specify the output directory for (1) dumping metadata" + "(b) dumping entropy keys").withRequiredArg().ofType(String.class).describedAs("path");
    parser.accepts("keys","The number of keys to use for entropy calculation [ Default : " + Entropy.DEFAULT_NUM_KEYS + " ]").withRequiredArg().ofType(Long.class).describedAs("num-keys");
    parser.accepts("verbose-logging","Verbose logging such as keys found missing on specific nodes during post-rebalancing entropy verification");
    OptionSet options=parser.parse(args);
    if (options.has("help")) {
      printHelp(System.out,parser);
      System.exit(HELP_EXIT_CODE);
    }
    Set<String> missing=CmdUtils.missing(options,"entropy","output-dir","current-cluster","current-stores");
    if (missing.size() > 0) {
      System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
      printHelp(System.err,parser);
      System.exit(ERROR_EXIT_CODE);
    }
    String currentClusterXML=(String)options.valueOf("current-cluster");
    String currentStoresXML=(String)options.valueOf("current-stores");
    Cluster currentCluster=new ClusterMapper().readCluster(new File(currentClusterXML));
    List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new File(currentStoresXML));
    String outputDir=(String)options.valueOf("output-dir");
    boolean entropy=(Boolean)options.valueOf("entropy");
    boolean verbose=options.has("verbose-logging");
    long numKeys=CmdUtils.valueOf(options,"keys",Entropy.DEFAULT_NUM_KEYS);
    Entropy generator=new Entropy(-1,numKeys,verbose);
    generator.generateEntropy(currentCluster,storeDefs,new File(outputDir),entropy);
    if (logger.isInfoEnabled()) {
      logger.info("Successfully completed entropy check.");
    }
    exitCode=SUCCESS_EXIT_CODE;
  }
 catch (  VoldemortException e) {
    logger.error("Entropy check unsuccessfull- " + e.getMessage(),e);
  }
catch (  Throwable e) {
    logger.error(e.getMessage(),e);
  }
  System.exit(exitCode);
}
