{
  stream.println("Commands supported");
  stream.println("------------------");
  stream.println();
  stream.println("REBALANCE (RUN PROCESS)");
  stream.println("a) --url <url> --target-cluster <path> [ Run the actual rebalancing process ] ");
  stream.println();
  stream.println("REBALANCE (GENERATE PLAN)");
  stream.println("b) --current-cluster <path> --current-stores <path> --target-cluster <path>");
  stream.println("\t (1) --delete [ Will delete the data after rebalancing ]");
  stream.println("\t (2) --show-plan [ Will generate only the plan ]");
  stream.println("\t (3) --output-dir [ Path to output dir where we store intermediate metadata ]");
  stream.println("\t (4) --parallelism [ Number of parallel stealer - donor node tasks to run in parallel ] ");
  stream.println("\t (5) --tries [ Number of times we try to move the data before declaring failure ]");
  stream.println("\t (6) --timeout [ Timeout in seconds for one rebalancing task ( stealer - donor tuple ) ]");
  stream.println("\t (7) --batch [ Number of primary partitions to move together ]");
  stream.println("\t (8) --stealer-based false [ Run the rebalancing from the donor's perspective ]");
  stream.println();
  stream.println("ENTROPY");
  stream.println("a) --current-cluster <path> --current-stores <path> --entropy <true / false> --output-dir <path> [ Runs the entropy calculator if " + "--entropy is true. Else dumps keys to the directory ]");
  stream.println("\t (1) --keys [ Number of keys ( per store ) we calculate entropy for ]");
  stream.println("\t (2) --verbose-logging [ print keys found missing during entropy ]");
  parser.printHelpOn(stream);
}
