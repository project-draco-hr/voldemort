{
  long startTimeNs=-1;
  if (logger.isTraceEnabled())   startTimeNs=System.nanoTime();
  StoreUtils.assertValidKey(key);
  DatabaseEntry keyEntry=new DatabaseEntry(key.get());
  DatabaseEntry valueEntry=new DatabaseEntry();
  boolean succeeded=false;
  Transaction transaction=null;
  List<Versioned<byte[]>> vals=null;
  try {
    transaction=environment.beginTransaction(null,null);
    OperationStatus status=getBdbDatabase().get(transaction,keyEntry,valueEntry,LockMode.RMW);
    if (OperationStatus.SUCCESS == status) {
      vals=StoreBinaryFormat.fromByteArray(valueEntry.getData());
      Iterator<Versioned<byte[]>> iter=vals.iterator();
      while (iter.hasNext()) {
        Versioned<byte[]> curr=iter.next();
        Occurred occurred=value.getVersion().compare(curr.getVersion());
        if (occurred == Occurred.BEFORE)         throw new ObsoleteVersionException("Key " + new String(hexCodec.encode(key.get())) + " "+ value.getVersion().toString()+ " is obsolete, it is no greater than the current version of "+ curr.getVersion().toString()+ ".");
 else         if (occurred == Occurred.AFTER)         iter.remove();
      }
    }
 else {
      vals=new ArrayList<Versioned<byte[]>>(1);
    }
    vals.add(value);
    valueEntry.setData(StoreBinaryFormat.toByteArray(vals));
    status=getBdbDatabase().put(transaction,keyEntry,valueEntry);
    if (status != OperationStatus.SUCCESS)     throw new PersistenceFailureException("Put operation failed with status: " + status);
    succeeded=true;
  }
 catch (  DatabaseException e) {
    this.bdbEnvironmentStats.reportException(e);
    logger.error(e);
    throw new PersistenceFailureException(e);
  }
 finally {
    if (succeeded)     attemptCommit(transaction);
 else     attemptAbort(transaction);
    if (logger.isTraceEnabled()) {
      logger.trace("Completed PUT (" + getName() + ") to key "+ key+ " (keyRef: "+ System.identityHashCode(key)+ " value "+ value+ " in "+ (System.nanoTime() - startTimeNs)+ " ns at "+ System.currentTimeMillis());
    }
  }
}
