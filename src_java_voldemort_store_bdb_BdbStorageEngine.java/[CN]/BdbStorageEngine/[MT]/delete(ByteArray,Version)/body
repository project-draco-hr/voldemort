{
  StoreUtils.assertValidKey(key);
  long startTimeNs=-1;
  if (logger.isTraceEnabled())   startTimeNs=System.nanoTime();
  boolean deletedSomething=false;
  Cursor cursor=null;
  Transaction transaction=null;
  try {
    transaction=this.environment.beginTransaction(null,null);
    DatabaseEntry keyEntry=new DatabaseEntry(key.get());
    DatabaseEntry valueEntry=new DatabaseEntry();
    cursor=getBdbDatabase().openCursor(transaction,null);
    OperationStatus status=cursor.getSearchKey(keyEntry,valueEntry,LockMode.READ_UNCOMMITTED);
    while (status == OperationStatus.SUCCESS) {
      if (new VectorClock(valueEntry.getData()).compare(version) == Occurred.BEFORE) {
        cursor.delete();
        deletedSomething=true;
      }
      status=cursor.getNextDup(keyEntry,valueEntry,LockMode.READ_UNCOMMITTED);
    }
    return deletedSomething;
  }
 catch (  DatabaseException e) {
    logger.error(e);
    throw new PersistenceFailureException(e);
  }
 finally {
    if (logger.isTraceEnabled()) {
      logger.trace("Completed DELETE of key " + key + " (keyRef: "+ System.identityHashCode(key)+ ") in "+ (System.nanoTime() - startTimeNs)+ " ns at "+ System.currentTimeMillis());
    }
    try {
      attemptClose(cursor);
    }
  finally {
      attemptCommit(transaction);
    }
  }
}
