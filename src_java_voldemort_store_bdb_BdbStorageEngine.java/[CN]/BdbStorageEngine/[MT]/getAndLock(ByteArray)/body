{
  long startTimeNs=-1;
  if (logger.isTraceEnabled())   startTimeNs=System.nanoTime();
  StoreUtils.assertValidKey(key);
  DatabaseEntry keyEntry=new DatabaseEntry(key.get());
  DatabaseEntry valueEntry=new DatabaseEntry();
  Transaction transaction=null;
  List<Versioned<byte[]>> vals=null;
  KeyLockHandle<byte[]> handle;
  try {
    transaction=environment.beginTransaction(null,null);
    OperationStatus status=getBdbDatabase().get(transaction,keyEntry,valueEntry,LockMode.RMW);
    if (OperationStatus.SUCCESS == status) {
      vals=StoreBinaryFormat.fromByteArray(valueEntry.getData());
    }
 else {
      vals=new ArrayList<Versioned<byte[]>>(0);
    }
    handle=new KeyLockHandle<byte[]>(vals,transaction);
  }
 catch (  DatabaseException e) {
    this.bdbEnvironmentStats.reportException(e);
    logger.error("Error in getAndLock for store " + this.getName(),e);
    throw new PersistenceFailureException(e);
  }
 finally {
    if (logger.isTraceEnabled()) {
      logger.trace("Completed getAndLock (" + getName() + ") to key "+ key+ " (keyRef: "+ System.identityHashCode(key)+ " in "+ (System.nanoTime() - startTimeNs)+ " ns at "+ System.currentTimeMillis());
    }
  }
  return handle;
}
