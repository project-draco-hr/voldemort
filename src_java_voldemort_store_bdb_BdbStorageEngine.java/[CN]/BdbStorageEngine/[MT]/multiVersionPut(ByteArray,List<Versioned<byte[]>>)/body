{
  long startTimeNs=-1;
  if (logger.isTraceEnabled())   startTimeNs=System.nanoTime();
  StoreUtils.assertValidKey(key);
  DatabaseEntry keyEntry=new DatabaseEntry(key.get());
  DatabaseEntry valueEntry=new DatabaseEntry();
  boolean succeeded=false;
  Transaction transaction=null;
  List<Versioned<byte[]>> valuesInStorage=null;
  List<Versioned<byte[]>> obsoleteVals=null;
  try {
    transaction=environment.beginTransaction(null,null);
    OperationStatus status=getBdbDatabase().get(transaction,keyEntry,valueEntry,LockMode.RMW);
    if (OperationStatus.SUCCESS == status) {
      valuesInStorage=StoreBinaryFormat.fromByteArray(valueEntry.getData());
    }
 else {
      valuesInStorage=new ArrayList<Versioned<byte[]>>(values.size());
    }
    obsoleteVals=resolveAndConstructVersionsToPersist(valuesInStorage,values);
    valueEntry.setData(StoreBinaryFormat.toByteArray(valuesInStorage));
    status=getBdbDatabase().put(transaction,keyEntry,valueEntry);
    if (status != OperationStatus.SUCCESS)     throw new PersistenceFailureException("multiVersionPut operation failed with status: " + status);
    succeeded=true;
  }
 catch (  DatabaseException e) {
    this.bdbEnvironmentStats.reportException(e);
    logger.error("Error in MultiVersionPut for store " + this.getName(),e);
    throw new PersistenceFailureException(e);
  }
 finally {
    if (succeeded)     attemptCommit(transaction);
 else     attemptAbort(transaction);
    if (logger.isTraceEnabled()) {
      logger.trace("Completed PUT (" + getName() + ") to key "+ key+ " (keyRef: "+ System.identityHashCode(key)+ " values "+ values+ " in "+ (System.nanoTime() - startTimeNs)+ " ns at "+ System.currentTimeMillis());
    }
  }
  return obsoleteVals;
}
