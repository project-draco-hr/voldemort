{
  try {
    startFourNodeRORW();
    int numChunks=5;
    for (    StoreDefinition storeDef : Lists.newArrayList(storeDef1,storeDef2)) {
      buildStore(storeDef,numChunks);
    }
    for (    RebalancePartitionsInfo partitionPlan : plans) {
      getServer(partitionPlan.getStealerId()).getMetadataStore().put(MetadataStore.SERVER_STATE_KEY,MetadataStore.VoldemortState.REBALANCING_MASTER_SERVER);
      getServer(partitionPlan.getStealerId()).getMetadataStore().put(MetadataStore.REBALANCING_STEAL_INFO,new RebalancerState(Lists.newArrayList(partitionPlan)));
    }
    try {
      for (      RebalancePartitionsInfo currentPlan : plans) {
        int asyncId=adminClient.rebalanceNode(currentPlan);
        assertNotSame("Got a valid rebalanceAsyncId",-1,asyncId);
        getAdminClient().waitForCompletion(currentPlan.getStealerId(),asyncId,300,TimeUnit.SECONDS);
        assertFalse(getServer(currentPlan.getStealerId()).getMetadataStore().getRebalancerState().getAll().contains(currentPlan));
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      fail("Should not throw any exceptions");
    }
    servers[3].getMetadataStore().getRebalancerState().update(new RebalancePartitionsInfo(3,0,new HashMap<Integer,List<Integer>>(),new HashMap<Integer,List<Integer>>(),new ArrayList<String>(),cluster,0));
    try {
      adminClient.rebalanceStateChange(cluster,targetCluster,plans,true,true,true);
      fail("Should have thrown an exception since we added state before hand");
    }
 catch (    VoldemortRebalancingException e) {
    }
    for (    VoldemortServer server : servers) {
      if (server.getMetadataStore().getNodeId() != 3) {
        assertEquals(server.getMetadataStore().getRebalancerState(),new RebalancerState(new ArrayList<RebalancePartitionsInfo>()));
        assertEquals(server.getMetadataStore().getServerState(),MetadataStore.VoldemortState.NORMAL_SERVER);
      }
      assertEquals(server.getMetadataStore().getCluster(),cluster);
    }
    checkRO(cluster);
    cleanUpAllState();
    System.out.println("=======================================");
    servers[2].getMetadataStore().put(MetadataStore.STORES_KEY,Lists.newArrayList(storeDef1,storeDef2,new StoreDefinitionBuilder().setName("test3").setType(ReadOnlyStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.SERVER).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build()));
    try {
      adminClient.rebalanceStateChange(cluster,targetCluster,plans,true,true,true);
      fail("Should have thrown an exception since we added state before hand");
    }
 catch (    VoldemortRebalancingException e) {
    }
    for (    VoldemortServer server : servers) {
      assertEquals(server.getMetadataStore().getRebalancerState(),new RebalancerState(new ArrayList<RebalancePartitionsInfo>()));
      assertEquals(server.getMetadataStore().getServerState(),MetadataStore.VoldemortState.NORMAL_SERVER);
      assertEquals(server.getMetadataStore().getCluster(),cluster);
    }
    checkRO(cluster);
    cleanUpAllState();
  }
  finally {
    shutDown();
  }
}
