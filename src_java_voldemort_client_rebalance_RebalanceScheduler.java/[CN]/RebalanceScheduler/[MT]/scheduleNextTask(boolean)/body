{
  if (doneSignal.getCount() == 0) {
    logger.info("All tasks completion signaled... returning");
    return null;
  }
  if (this.numTasksExecuting >= maxParallelRebalancing) {
    logger.info("Executing more tasks than [" + this.numTasksExecuting + "] the parallel allowed "+ maxParallelRebalancing);
    return null;
  }
  List<Integer> stealerIds=new ArrayList<Integer>(tasksByStealer.keySet());
  Collections.shuffle(stealerIds);
  for (  int stealerId : stealerIds) {
    if (nodeIdsWithWork.contains(stealerId)) {
      logger.info("Stealer " + stealerId + " is already working... continuing");
      continue;
    }
    for (    StealerBasedRebalanceTask sbTask : tasksByStealer.get(stealerId)) {
      int donorId=sbTask.getStealInfos().get(0).getDonorId();
      if (nodeIdsWithWork.contains(donorId)) {
        logger.info("Stealer " + stealerId + " Donor "+ donorId+ " is already working... continuing");
        continue;
      }
      addNodesToWorkerList(Arrays.asList(stealerId,donorId));
      numTasksExecuting++;
      tasksByStealer.get(stealerId).remove(sbTask);
      try {
        if (executeService) {
          logger.info("Stealer " + stealerId + " Donor "+ donorId+ " going to schedule work");
          service.execute(sbTask);
        }
      }
 catch (      RejectedExecutionException ree) {
        logger.error("Stealer " + stealerId + "Rebalancing task rejected by executor service.",ree);
        throw new VoldemortRebalancingException("Stealer " + stealerId + "Rebalancing task rejected by executor service.");
      }
      return sbTask;
    }
  }
  printRemainingTasks(stealerIds);
  return null;
}
