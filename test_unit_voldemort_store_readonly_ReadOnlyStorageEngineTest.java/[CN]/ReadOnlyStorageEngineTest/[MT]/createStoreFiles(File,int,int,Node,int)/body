{
  ReadOnlyStorageMetadata metadata=new ReadOnlyStorageMetadata();
  metadata.add(ReadOnlyStorageMetadata.FORMAT,storageType.getCode());
  File metadataFile=createFile(dir,".metadata");
  BufferedWriter writer=new BufferedWriter(new FileWriter(metadataFile));
  writer.write(metadata.toJsonString());
  writer.close();
switch (storageType) {
case READONLY_V0:
{
      for (int chunk=0; chunk < numChunks; chunk++) {
        File index=createFile(dir,chunk + ".index");
        File data=createFile(dir,chunk + ".data");
        FileOutputStream dataOs=new FileOutputStream(data);
        for (int i=0; i < dataBytes; i++)         dataOs.write(i);
        dataOs.close();
        FileOutputStream indexOs=new FileOutputStream(index);
        for (int i=0; i < indexBytes; i++)         indexOs.write(i);
        indexOs.close();
      }
    }
  break;
case READONLY_V1:
case READONLY_V2:
{
  for (  Integer partitionId : node.getPartitionIds()) {
    for (int chunkId=0; chunkId < numChunks; chunkId++) {
      File index=createFile(dir,Integer.toString(partitionId) + "_" + Integer.toString(chunkId)+ ".index");
      File data=createFile(dir,Integer.toString(partitionId) + "_" + Integer.toString(chunkId)+ ".data");
      FileOutputStream dataOs=new FileOutputStream(data);
      for (int i=0; i < dataBytes; i++)       dataOs.write(i);
      dataOs.close();
      FileOutputStream indexOs=new FileOutputStream(index);
      for (int i=0; i < indexBytes; i++)       indexOs.write(i);
      indexOs.close();
    }
  }
}
break;
default :
throw new VoldemortException("Do not support storage type " + storageType);
}
}
