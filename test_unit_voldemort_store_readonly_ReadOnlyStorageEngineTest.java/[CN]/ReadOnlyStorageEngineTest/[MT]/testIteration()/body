{
  ReadOnlyStorageEngineTestInstance testData=ReadOnlyStorageEngineTestInstance.create(strategy,dir,TEST_SIZE,2,2,serDef,serDef,storageType);
  ListMultimap<Integer,Pair<String,String>> nodeToEntries=ArrayListMultimap.create();
  for (  Map.Entry<String,String> entry : testData.getData().entrySet()) {
    for (    Node node : testData.routeRequest(entry.getKey())) {
      nodeToEntries.put(node.getId(),Pair.create(entry.getKey(),entry.getValue()));
    }
  }
  for (  Map.Entry<Integer,ReadOnlyStorageEngine> storeEntry : testData.getReadOnlyStores().entrySet()) {
    List<Pair<String,String>> entries=Lists.newArrayList(nodeToEntries.get(storeEntry.getKey()));
    ClosableIterator<ByteArray> keyIterator=null;
    try {
      keyIterator=storeEntry.getValue().keys();
    }
 catch (    Exception e) {
      if (storageType.compareTo(ReadOnlyStorageFormat.READONLY_V2) == 0) {
        fail("Should not have thrown exception since this version supports iteration");
      }
 else {
        return;
      }
    }
    List<String> keys=Lists.newArrayList();
    Iterator<Pair<String,String>> pairIterator=entries.iterator();
    while (pairIterator.hasNext()) {
      keys.add(new String(pairIterator.next().getFirst()));
    }
    while (keyIterator.hasNext()) {
      String key=new String(keyIterator.next().get());
      Assert.assertEquals(keys.contains(key),true);
      keys.remove(key);
    }
    Assert.assertEquals(keys.size(),0);
  }
}
