{
  String name=elmt.getChild(STORE_SERIALIZATION_TYPE_ELMT).getText();
  boolean hasVersion=true;
  Map<Integer,String> schemaInfosByVersion=new HashMap<Integer,String>();
  for (  Object schemaInfo : elmt.getChildren(STORE_SERIALIZATION_META_ELMT)) {
    Element schemaInfoElmt=(Element)schemaInfo;
    String versionStr=schemaInfoElmt.getAttributeValue(STORE_VERSION_ATTR);
    int version;
    if (versionStr == null) {
      version=0;
    }
 else     if (versionStr.equals("none")) {
      version=0;
      hasVersion=false;
    }
 else {
      version=Integer.parseInt(versionStr);
    }
    String info=schemaInfoElmt.getText();
    String previous=schemaInfosByVersion.put(version,info);
    if (previous != null)     throw new MappingException("Duplicate version " + version + " found in schema info.");
  }
  if (!hasVersion && schemaInfosByVersion.size() > 1)   throw new IllegalArgumentException("Specified multiple schemas AND version=none, which is not permitted.");
  Element compressionElmt=elmt.getChild(STORE_COMPRESSION_ELMT);
  Compression compression=null;
  if (compressionElmt != null)   compression=new Compression(compressionElmt.getChildText("type"),compressionElmt.getChildText("options"));
  return new SerializerDefinition(name,schemaInfosByVersion,hasVersion,compression);
}
