{
  this.baseDir=directory;
  if (!Utils.isReadableDir(directory))   throw new VoldemortException(directory.getAbsolutePath() + " is not a readable directory.");
  this.indexFileSizes=new ArrayList<Integer>();
  this.dataFileSizes=new ArrayList<Integer>();
  this.indexFiles=new ArrayList<MappedByteBuffer>();
  this.dataFiles=new ArrayList<FileChannel>();
  this.partitionToChunkStart=new HashMap<Integer,Integer>();
  this.partitionToNumChunks=new HashMap<Integer,Integer>();
  this.routingStrategy=routingStrategy;
  this.partitionIds=null;
  for (  Node node : routingStrategy.getNodes()) {
    if (node.getId() == nodeId) {
      this.partitionIds=new HashSet<Integer>();
      this.partitionIds.addAll(node.getPartitionIds());
      break;
    }
  }
  if (this.partitionIds == null)   throw new VoldemortException("Could not open store since the node id could not be found");
  int globalChunkId=0;
  for (  Integer partitionId : this.partitionIds) {
    int chunkId=0;
    while (true) {
      String fileName=Integer.toString(partitionId) + "_" + Integer.toString(chunkId);
      File index=new File(baseDir,fileName + ".index");
      File data=new File(baseDir,fileName + ".data");
      if (!index.exists() && !data.exists()) {
        if (chunkId == 0) {
          try {
            new File(baseDir,fileName + ".index").createNewFile();
            new File(baseDir,fileName + ".data").createNewFile();
            logger.info("No index or data files found, creating empty files for partition " + partitionId);
          }
 catch (          IOException e) {
            throw new VoldemortException("Error creating empty read-only files.",e);
          }
        }
 else {
          break;
        }
      }
 else       if (index.exists() ^ data.exists())       throw new VoldemortException("One of the following does not exist: " + index.toString() + " and "+ data.toString()+ ".");
      if (chunkId == 0)       partitionToChunkStart.put(partitionId,globalChunkId);
      long indexLength=index.length();
      long dataLength=data.length();
      validateFileSizes(indexLength,dataLength);
      indexFileSizes.add((int)indexLength);
      dataFileSizes.add((int)dataLength);
      dataFiles.add(openChannel(data));
      indexFiles.add(mapFile(index));
      System.out.println("INSIDE GLOBAL = " + globalChunkId + " => "+ index.toString());
      chunkId++;
      globalChunkId++;
    }
    partitionToNumChunks.put(partitionId,chunkId);
  }
  if (indexFileSizes.size() == 0)   throw new VoldemortException("No data chunks found in directory " + baseDir.toString());
  this.numChunks=indexFileSizes.size();
  logger.trace("Opened chunked file set for " + baseDir + " with "+ indexFileSizes.size()+ " chunks.");
}
