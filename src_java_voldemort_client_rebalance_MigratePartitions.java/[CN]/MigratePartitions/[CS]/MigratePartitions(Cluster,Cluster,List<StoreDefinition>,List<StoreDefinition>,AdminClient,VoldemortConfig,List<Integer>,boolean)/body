{
  this.adminClient=Utils.notNull(adminClient);
  this.stealerNodeIds=stealerNodeIds;
  this.voldemortConfig=Utils.notNull(voldemortConfig);
  this.transitionToNormal=transitionToNormal;
  RebalanceClusterPlan plan=new RebalanceClusterPlan(currentCluster,targetCluster,currentStoreDefs,targetStoreDefs,false,null);
  this.stealerNodePlans=plan.getRebalancingTaskQueuePerNode();
  if (this.stealerNodeIds == null) {
    this.stealerNodeIds=Lists.newArrayList(stealerNodePlans.keySet());
  }
  this.storeNames=RebalanceUtils.getStoreNames(targetStoreDefs);
  this.donorNodePlans=Maps.newHashMap();
  for (  int stealerNodeId : this.stealerNodeIds) {
    RebalanceNodePlan nodePlan=this.stealerNodePlans.get(stealerNodeId);
    if (nodePlan == null)     continue;
    for (    RebalancePartitionsInfo info : nodePlan.getRebalanceTaskList()) {
      List<RebalancePartitionsInfo> donorPlan=donorNodePlans.get(info.getDonorId());
      if (donorPlan == null) {
        donorPlan=Lists.newArrayList();
        donorNodePlans.put(info.getDonorId(),donorPlan);
      }
      donorPlan.add(info);
    }
  }
  this.donorStates=Maps.newHashMap();
  for (  int donorNodeId : donorNodePlans.keySet()) {
    logger.info("Plan for donor node id " + donorNodeId + " - "+ donorNodePlans.get(donorNodeId));
  }
}
