{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("target-cluster-xml","[REQUIRED] target cluster xml file location").withRequiredArg().describedAs("path");
  parser.accepts("stores-xml","[REQUIRED] stores xml file location").withRequiredArg().describedAs("path");
  parser.accepts("target-stores-xml","stores xml file location if changed").withRequiredArg().describedAs("path");
  parser.accepts("cluster-xml","[REQUIRED] cluster xml file location").withRequiredArg().describedAs("path");
  parser.accepts("stealer-node-ids","Comma separated node ids [Default - all]").withRequiredArg().ofType(Integer.class).withValuesSeparatedBy(',');
  parser.accepts("transition-to-normal","At the end of migration do we want to transition back to normal state? [Default-false]");
  parser.accepts("simulation","Run the full process as simulation");
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"cluster-xml","stores-xml","target-cluster-xml");
  if (missing.size() > 0) {
    System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  String targetClusterFile=(String)options.valueOf("target-cluster-xml");
  String currentClusterFile=(String)options.valueOf("cluster-xml");
  String currentStoresFile=(String)options.valueOf("stores-xml");
  String targetStoresFile=currentStoresFile;
  boolean transitionToNormal=options.has("transition-to-normal");
  boolean simulation=options.has("simulation");
  if (options.has("target-stores-xml")) {
    targetStoresFile=(String)options.valueOf("target-stores-xml");
  }
  if (!Utils.isReadableFile(targetClusterFile) || !Utils.isReadableFile(currentClusterFile) || !Utils.isReadableFile(currentStoresFile)|| !Utils.isReadableFile(targetStoresFile)) {
    System.err.println("Could not read metadata files from path provided");
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  List<Integer> stealerNodeIds=null;
  if (options.has("stealer-node-ids")) {
    stealerNodeIds=Utils.uncheckedCast(options.valueOf("stealer-node-ids"));
  }
  AdminClient adminClient=null;
  try {
    VoldemortConfig voldemortConfig=createTempVoldemortConfig();
    Cluster currentCluster=new ClusterMapper().readCluster(new BufferedReader(new FileReader(currentClusterFile)));
    Cluster targetCluster=new ClusterMapper().readCluster(new BufferedReader(new FileReader(targetClusterFile)));
    adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,currentCluster,targetCluster.getNumberOfNodes(),1);
    List<StoreDefinition> currentStoreDefs=new StoreDefinitionsMapper().readStoreList(new BufferedReader(new FileReader(currentStoresFile)));
    List<StoreDefinition> targetStoreDefs=new StoreDefinitionsMapper().readStoreList(new BufferedReader(new FileReader(targetStoresFile)));
    MigratePartitions migratePartitions=new MigratePartitions(currentCluster,targetCluster,currentStoreDefs,targetStoreDefs,adminClient,voldemortConfig,stealerNodeIds,transitionToNormal,simulation);
    migratePartitions.migrate();
  }
 catch (  Exception e) {
    logger.error("Error in migrate partitions",e);
  }
 finally {
    if (adminClient != null)     adminClient.stop();
  }
}
