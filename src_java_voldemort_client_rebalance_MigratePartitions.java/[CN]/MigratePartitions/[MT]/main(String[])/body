{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("target-cluster-xml","[REQUIRED] target cluster xml file location").withRequiredArg().describedAs("path");
  parser.accepts("stores-xml","[REQUIRED] stores xml file location").withRequiredArg().describedAs("path");
  parser.accepts("cluster-xml","[REQUIRED] cluster xml file location").withRequiredArg().describedAs("path");
  parser.accepts("stealer-node-ids","Comma separated node ids [ Default - all]").withRequiredArg().ofType(Integer.class).withValuesSeparatedBy(',');
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"cluster-xml","stores-xml","target-cluster-xml");
  if (missing.size() > 0) {
    System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  String targetClusterFile=(String)options.valueOf("target-cluster-xml");
  String currentClusterFile=(String)options.valueOf("cluster-xml");
  String storesFile=(String)options.valueOf("stores-xml");
  List<Integer> stealerNodeIds=null;
  if (options.has("stealer-node-ids")) {
    stealerNodeIds=Utils.uncheckedCast(options.valueOf("stealer-node-ids"));
  }
  AdminClient adminClient=null;
  try {
    VoldemortConfig voldemortConfig=new VoldemortConfig(new Props());
    Cluster currentCluster=new ClusterMapper().readCluster(new BufferedReader(new FileReader(currentClusterFile)));
    adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,currentCluster,1,1);
    Cluster targetCluster=new ClusterMapper().readCluster(new BufferedReader(new FileReader(targetClusterFile)));
    List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new BufferedReader(new FileReader(storesFile)));
    MigratePartitions migratePartitions=new MigratePartitions(currentCluster,targetCluster,storeDefs,adminClient,voldemortConfig,stealerNodeIds);
    migratePartitions.migrate();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (adminClient != null)     adminClient.stop();
  }
}
