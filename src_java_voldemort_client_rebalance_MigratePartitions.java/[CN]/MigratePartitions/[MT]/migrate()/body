{
  if (donorNodePlans.size() == 0) {
    logger.info("Nothing to move around");
    return;
  }
  int total=0;
  for (  List<RebalancePartitionsInfo> rebalancePartitionsInfos : donorNodePlans.values())   total+=rebalancePartitionsInfos.size();
  total*=storeNames.size();
  int completed=0;
  logger.info("Changing state of donor nodes " + donorNodePlans.keySet());
  try {
    changeToGrandfather();
    for (    int stealerNodeId : stealerNodeIds) {
      RebalanceNodePlan nodePlan=stealerNodePlans.get(stealerNodeId);
      if (nodePlan == null) {
        logger.info("No plan for stealer node id " + stealerNodeId);
        continue;
      }
      List<RebalancePartitionsInfo> partitionInfo=nodePlan.getRebalanceTaskList();
      logger.info("Working on stealer node id " + stealerNodeId);
      for (      String storeName : this.storeNames) {
        logger.info("- Working on store " + storeName);
        HashMap<Integer,Integer> nodeIdToRequestId=Maps.newHashMap();
        Set<Pair<Integer,Integer>> pending=Sets.newHashSet();
        for (        RebalancePartitionsInfo r : partitionInfo) {
          logger.info("-- Started migration from donorId " + r.getDonorId() + " to "+ stealerNodeId);
          if (!simulation) {
            int attemptId=adminClient.migratePartitions(r.getDonorId(),stealerNodeId,storeName,r.getPartitionList(),null);
            nodeIdToRequestId.put(r.getDonorId(),attemptId);
            pending.add(Pair.create(r.getDonorId(),attemptId));
          }
        }
        while (!pending.isEmpty()) {
          Set<Pair<Integer,Integer>> currentPending=ImmutableSet.copyOf(pending);
          for (          Pair<Integer,Integer> pair : currentPending) {
            AsyncOperationStatus status=adminClient.getAsyncRequestStatus(stealerNodeId,pair.getSecond());
            if (status.hasException()) {
              throw new VoldemortException(status.getException());
            }
            if (status.isComplete()) {
              logger.info("-- Completed migration from donorId " + pair.getFirst() + " to "+ stealerNodeId);
              logger.info("-- " + ++completed + " out of "+ total+ " tasks completed");
              pending.remove(pair);
            }
          }
          try {
            Thread.sleep(10);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
      }
      logger.info("===============================================");
    }
  }
  finally {
    if (donorStates != null && transitionToNormal) {
      changeToNormal();
    }
  }
}
