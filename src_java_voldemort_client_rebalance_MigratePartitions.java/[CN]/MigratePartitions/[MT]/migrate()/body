{
  if (donorNodePlans.size() == 0) {
    logger.info("Nothing to move around");
    return;
  }
  logger.info("Changing state of donor nodes " + donorNodePlans.keySet());
  try {
    changeToGrandfather();
    for (    int stealerNodeId : stealerNodeIds) {
      RebalanceNodePlan nodePlan=stealerNodePlans.get(stealerNodeId);
      if (nodePlan == null) {
        logger.info("No plan for stealer node id " + stealerNodeId);
        continue;
      }
      List<RebalancePartitionsInfo> partitionInfo=nodePlan.getRebalanceTaskList();
      logger.info("Working on stealer node id " + stealerNodeId);
      for (      String storeName : this.storeNames) {
        logger.info("- Working on store " + storeName);
        HashMap<Integer,Integer> nodeIdToRequestId=Maps.newHashMap();
        for (        RebalancePartitionsInfo r : partitionInfo) {
          logger.info("-- Started migration for donor node id " + r);
          if (!simulation)           nodeIdToRequestId.put(r.getDonorId(),adminClient.migratePartitions(r.getDonorId(),stealerNodeId,storeName,r.getPartitionList(),null));
        }
        for (        int nodeId : nodeIdToRequestId.keySet()) {
          adminClient.waitForCompletion(stealerNodeId,nodeIdToRequestId.get(nodeId),voldemortConfig.getRebalancingTimeout(),TimeUnit.SECONDS);
          logger.info("-- Completed migration for donor node id " + nodeId);
        }
      }
      logger.info("===============================================");
    }
  }
  finally {
    if (donorStates != null && transitionToNormal) {
      changeToNormal();
    }
  }
}
