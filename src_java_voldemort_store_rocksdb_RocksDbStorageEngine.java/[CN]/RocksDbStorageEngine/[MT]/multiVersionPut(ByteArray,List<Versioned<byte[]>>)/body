{
  StoreUtils.assertValidKey(key);
  long startTimeNs=-1;
  if (logger.isTraceEnabled())   startTimeNs=System.nanoTime();
  List<Versioned<byte[]>> currentValues=null;
  List<Versioned<byte[]>> obsoleteVals=null;
synchronized (this.locks.lockFor(key.get())) {
    try {
      byte[] result=getRocksDB().get(key.get());
      if (result != null) {
        currentValues=StoreBinaryFormat.fromByteArray(result);
      }
 else {
        currentValues=new ArrayList<Versioned<byte[]>>();
      }
    }
 catch (    RocksDBException e) {
      logger.error(e);
      throw new PersistenceFailureException(e);
    }
    obsoleteVals=resolveAndConstructVersionsToPersist(currentValues,values);
    try {
      getRocksDB().put(key.get(),StoreBinaryFormat.toByteArray(currentValues));
    }
 catch (    RocksDBException e) {
      logger.error(e);
      throw new PersistenceFailureException(e);
    }
 finally {
      if (logger.isTraceEnabled()) {
        String valueStr="";
        for (        Versioned<byte[]> val : currentValues) {
          valueStr+=val + ",";
        }
        logger.trace("Completed PUT (" + getName() + ") to key "+ key+ " (keyRef: "+ System.identityHashCode(key)+ " values "+ valueStr+ " in "+ (System.nanoTime() - startTimeNs)+ " ns at "+ System.currentTimeMillis());
      }
    }
  }
  return obsoleteVals;
}
