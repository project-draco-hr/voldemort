{
  Store<ByteArray,byte[]> store1=server1.getStoreMap().get(storeName);
  Store<ByteArray,byte[]> store2=server2.getStoreMap().get(storeName);
  SerializerDefinition serDef=new SerializerDefinition("json","'string'");
  Serializer<Object> serializer=StoreUtils.unsafeGetSerializer(new DefaultSerializerFactory(),serDef);
  for (int i=1; i < 1000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    byte[] value=serializer.toBytes("value-" + i);
    assertEquals("either store1 or store2 will have the key:'key-" + i + "'",true,store1.get(key).size() > 0 || store2.get(key).size() > 0);
    assertEquals("value should match",new String(value),new String((store1.get(key).size() > 0) ? store1.get(key).get(0).getValue() : store2.get(key).get(0).getValue()));
  }
  final String newIndexDir=makeReadOnlyIndex(2000,3000);
  ReadOnlyBatchIndexSwapper indexSwapper=new ReadOnlyBatchIndexSwapper(){
    @Override public void configure(    Props props){
      props.put("voldemort.cluster.local.filePath",clusterFile);
      props.put("voldemort.store.name",storeName);
      props.put("source.local.path",newIndexDir);
      props.put("destination.remote.path",baseDir + File.separatorChar + (int)(Math.random() * 1000));
    }
    @Override public boolean copyRemoteFile(    String hostname,    String source,    String destination){
      int i=0;
      while (i++ < 5)       try {
        FileUtils.copyFile(new File(source),new File(destination));
        if (new File(destination).exists()) {
          return true;
        }
      }
 catch (      IOException e) {
      }
      return false;
    }
  }
;
  indexSwapper.run();
  for (int i=1; i < 1000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    assertEquals("store 1 get for key:" + i + " should be empty",0,store1.get(key).size());
    assertEquals("store 2 get for key:" + i + " should be empty",0,store2.get(key).size());
  }
  for (int i=2000; i < 3000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    byte[] value=serializer.toBytes("value-" + i);
    assertEquals("either store1 or store2 will have the key:'key-" + i + "'",true,store1.get(key).size() > 0 || store2.get(key).size() > 0);
    assertEquals("value should match",new String(value),new String((store1.get(key).size() > 0) ? store1.get(key).get(0).getValue() : store2.get(key).get(0).getValue()));
  }
}
