{
  startServers(0,1);
  StorageEngine<ByteArray,Slop,byte[]> slopStoreNode0=getVoldemortServer(0).getStoreRepository().getSlopStore().asSlopStore();
  final List<Slop> entrySet=ServerTestUtils.createRandomSlops(1,100,"test-replication-memory","users","test-replication-persistent","test-readrepair-memory","test-consistent","test-consistent-with-pref-list");
  populateSlops(0,slopStoreNode0,entrySet);
  StreamingSlopPusherJob pusher=new StreamingSlopPusherJob(getVoldemortServer(0).getStoreRepository(),getVoldemortServer(0).getMetadataStore(),new BannagePeriodFailureDetector(new FailureDetectorConfig().setNodes(cluster.getNodes()).setStoreVerifier(new ServerStoreVerifier(socketStoreFactory,metadataStore,configs[0]))),10 * 1000 * 1000,10 * 1000 * 1000);
  pusher.run();
  Thread.sleep(2000);
  Iterator<Slop> entryIterator=entrySet.listIterator();
  while (entryIterator.hasNext()) {
    Slop nextSlop=entryIterator.next();
    StorageEngine<ByteArray,byte[],byte[]> store=getVoldemortServer(1).getStoreRepository().getStorageEngine(nextSlop.getStoreName());
    if (nextSlop.getOperation().equals(Slop.Operation.PUT)) {
      assertNotSame("entry should be present at store",0,store.get(nextSlop.getKey(),null).size());
      assertEquals("entry value should match",new String(nextSlop.getValue()),new String(store.get(nextSlop.getKey(),null).get(0).getValue()));
    }
 else     if (nextSlop.getOperation().equals(Slop.Operation.DELETE)) {
      assertEquals("entry value should match",0,store.get(nextSlop.getKey(),null).size());
    }
    assertEquals("slop should have gone",0,slopStoreNode0.get(nextSlop.makeKey(),null).size());
  }
  stopServers(0,1);
}
