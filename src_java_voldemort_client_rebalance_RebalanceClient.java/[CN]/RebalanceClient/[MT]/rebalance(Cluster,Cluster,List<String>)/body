{
  adminClient.setCluster(currentCluster);
  if (!RebalanceUtils.getClusterRebalancingToken()) {
    throw new VoldemortException("Failed to get Cluster permission to rebalance sleep and retry ...");
  }
  final Queue<Pair<Integer,List<RebalanceStealInfo>>> rebalanceTaskQueue=RebalanceUtils.getRebalanceTaskQueue(currentCluster,targetCluster,storeList);
  logRebalancingPlan(rebalanceTaskQueue);
  for (int nThreads=0; nThreads < this.maxParallelRebalancing; nThreads++) {
    this.executor.execute(new Runnable(){
      public void run(){
        while (!rebalanceTaskQueue.isEmpty()) {
          Pair<Integer,List<RebalanceStealInfo>> rebalanceTask=rebalanceTaskQueue.poll();
          if (null != rebalanceTask) {
            int stealerNodeId=rebalanceTask.getFirst();
            addNodeIfnotPresent(targetCluster,stealerNodeId);
            Node stealerNode=adminClient.getCluster().getNodeById(stealerNodeId);
            List<RebalanceStealInfo> rebalanceSubTaskList=rebalanceTask.getSecond();
            while (rebalanceSubTaskList.size() > 0) {
              RebalanceStealInfo rebalanceSubTask=rebalanceSubTaskList.remove(0);
              logger.debug("Starting rebalancing for stealerNode:" + stealerNode + " rebalanceInfo:"+ rebalanceSubTask);
              try {
                commitClusterChanges(stealerNode,rebalanceSubTask);
                attemptRebalanceSubTask(rebalanceSubTask);
                logger.debug("Successfully finished RebalanceSubTask attempt:" + rebalanceSubTask);
              }
 catch (              Exception e) {
                logger.warn("rebalancing task (" + rebalanceSubTask + ") failed with exception:",e);
              }
            }
          }
        }
      }
    }
);
  }
  executorShutDown(executor);
}
