{
  logger.info("Current Cluster configuration:" + currentCluster);
  logger.info("Target Cluster configuration:" + targetCluster);
  adminClient.setAdminClientCluster(currentCluster);
  List<String> storeList=RebalanceUtils.getStoreNameList(currentCluster,adminClient);
  if (!RebalanceUtils.getClusterRebalancingToken()) {
    throw new VoldemortException("Failed to get Cluster permission to rebalance sleep and retry ...");
  }
  final Queue<Pair<Integer,List<RebalancePartitionsInfo>>> rebalanceTaskQueue=RebalanceUtils.getRebalanceTaskQueue(currentCluster,targetCluster,storeList);
  logRebalancingPlan(rebalanceTaskQueue);
  for (int nThreads=0; nThreads < this.rebalanceConfig.getMaxParallelRebalancing(); nThreads++) {
    this.executor.execute(new Runnable(){
      public void run(){
        while (!rebalanceTaskQueue.isEmpty()) {
          logger.info("rebalanceTaskQueue size:" + rebalanceTaskQueue.size());
          Pair<Integer,List<RebalancePartitionsInfo>> rebalanceTask=rebalanceTaskQueue.poll();
          if (null != rebalanceTask) {
            int stealerNodeId=rebalanceTask.getFirst();
            List<RebalancePartitionsInfo> rebalanceSubTaskList=rebalanceTask.getSecond();
            while (rebalanceSubTaskList.size() > 0) {
              int index=(int)Math.random() * rebalanceSubTaskList.size();
              RebalancePartitionsInfo rebalanceSubTask=rebalanceSubTaskList.remove(index);
              logger.info("Starting rebalancing for stealerNode:" + stealerNodeId + " rebalanceInfo:"+ rebalanceSubTask);
              try {
                commitClusterChanges(stealerNodeId,targetCluster,rebalanceSubTask);
                attemptRebalanceSubTask(rebalanceSubTask);
                logger.info("Successfully finished RebalanceSubTask attempt:" + rebalanceSubTask);
              }
 catch (              Exception e) {
                logger.warn("rebalancing task (" + rebalanceSubTask + ") failed with exception:",e);
              }
            }
          }
        }
        logger.debug("Thread run() finished:\n");
      }
    }
);
  }
  executorShutDown(executor);
}
