{
  adminClient.setCluster(currentCluster);
  if (!RebalanceUtils.getClusterRebalancingToken()) {
    throw new VoldemortException("Failed to get Cluster permission to rebalance sleep and retry ...");
  }
  final Map<Integer,List<RebalanceStealInfo>> stealPartitionsMap=RebalanceUtils.getStealPartitionsMap(storeName,currentCluster,targetCluster);
  logger.info("Rebalancing plan:\n" + RebalanceUtils.getStealPartitionsMapAsString(stealPartitionsMap));
  final Map<Integer,AtomicBoolean> nodeRebalancingLock=createRebalancingLocks(stealPartitionsMap);
  final Semaphore semaphore=new Semaphore(config.getMaxParallelRebalancingNodes());
  while (!stealPartitionsMap.isEmpty()) {
    this.executor.execute(new Runnable(){
      public void run(){
        if (acquireSemaphore(semaphore)) {
          try {
            int stealerNodeId=RebalanceUtils.getRandomStealerNodeId(stealPartitionsMap);
            if (nodeRebalancingLock.get(stealerNodeId).compareAndSet(false,true)) {
              RebalanceStealInfo rebalanceStealInfo=RebalanceUtils.getOneStealInfoAndUpdateStealMap(stealerNodeId,stealPartitionsMap);
              if (rebalanceCommit(stealPartitionsMap,stealerNodeId,rebalanceStealInfo)) {
                attemptOneRebalanceTransfer(stealerNodeId,rebalanceStealInfo);
              }
              nodeRebalancingLock.get(stealerNodeId).set(false);
            }
          }
 catch (          Exception e) {
            logger.warn("Rebalance step failed",e);
          }
 finally {
            semaphore.release();
            logger.debug("rebalancing semaphore released.");
          }
        }
 else {
          logger.warn(new VoldemortException("Failed to get rebalance task permit."));
        }
      }
      private boolean rebalanceCommit(      Map<Integer,List<RebalanceStealInfo>> stealPartitionsMap,      int stealerNodeId,      RebalanceStealInfo rebalanceStealInfo){
        try {
          adminClient.setCluster(RebalanceUtils.updateAndPropagateCluster(adminClient,getStealerNode(currentCluster,targetCluster,stealerNodeId),rebalanceStealInfo));
          return true;
        }
 catch (        Exception e) {
          logger.warn("Failed to commit rebalance on node:" + stealerNodeId,e);
          RebalanceUtils.revertStealPartitionsMap(stealPartitionsMap,stealerNodeId,rebalanceStealInfo);
        }
        return false;
      }
      private Node getStealerNode(      Cluster currentCluster,      Cluster targetCluster,      int stealerNodeId){
        if (RebalanceUtils.containsNode(currentCluster,stealerNodeId))         return currentCluster.getNodeById(stealerNodeId);
 else         return RebalanceUtils.updateNode(targetCluster.getNodeById(stealerNodeId),new ArrayList<Integer>());
      }
      /** 
 * Given a stealerNode and stealInfo {@link RebalanceStealInfo}tries stealing unless succeed or failed max number of allowed
 * tries.
 * @param stealPartitionsMap
 */
      private void attemptOneRebalanceTransfer(      int stealerNodeId,      RebalanceStealInfo stealInfo){
        while (stealInfo.getAttempt() < config.getMaxRebalancingAttempt()) {
          try {
            stealInfo.setAttempt(stealInfo.getAttempt() + 1);
            int rebalanceAsyncId=getAdminClient().rebalanceNode(stealerNodeId,stealInfo);
            AsyncOperationStatus status=getAdminClient().getAsyncRequestStatus(stealerNodeId,rebalanceAsyncId);
            while (!status.isComplete()) {
              logger.info("Rebalance transfer " + stealerNodeId + " status:"+ status.getStatus());
              try {
                Thread.sleep(60 * 1000);
              }
 catch (              InterruptedException e) {
                Thread.currentThread().interrupt();
              }
              status=getAdminClient().getAsyncRequestStatus(stealerNodeId,rebalanceAsyncId);
            }
            return;
          }
 catch (          Exception e) {
            logger.warn("Failed Attempt number " + stealInfo.getAttempt() + " Rebalance transfer "+ stealerNodeId+ " <== "+ stealInfo.getDonorId()+ " "+ stealInfo.getPartitionList()+ " with exception:",e);
          }
        }
        throw new VoldemortException("Failed rebalance transfer to:" + stealerNodeId + " <== from:"+ stealInfo.getDonorId()+ " partitions:"+ stealInfo.getPartitionList()+ ")");
      }
    }
);
  }
}
