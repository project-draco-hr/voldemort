{
  adminClient.setCluster(currentCluster);
  if (!RebalanceUtils.getClusterRebalancingToken()) {
    throw new VoldemortException("Failed to get Cluster permission to rebalance sleep and retry ...");
  }
  final Map<Integer,List<RebalanceStealInfo>> stealPartitionsMap=RebalanceUtils.getStealPartitionsMap(storeName,currentCluster,targetCluster);
  logger.info("Rebalancing plan:\n" + RebalanceUtils.getStealPartitionsMapAsString(stealPartitionsMap));
  final Map<Integer,AtomicBoolean> nodeRebalancingLock=createRebalancingLocks(stealPartitionsMap);
  final Semaphore semaphore=new Semaphore(config.getMaxParallelRebalancingNodes());
  while (!stealPartitionsMap.isEmpty()) {
    this.executor.execute(new Runnable(){
      public void run(){
        if (acquireSemaphore(semaphore)) {
          try {
            int stealerNodeId=RebalanceUtils.getRandomStealerNodeId(stealPartitionsMap);
            Node stealerNode=getStealerNode(currentCluster,targetCluster,stealerNodeId);
            if (nodeRebalancingLock.get(stealerNodeId).compareAndSet(false,true)) {
              RebalanceStealInfo rebalanceStealInfo=RebalanceUtils.getOneStealInfoAndUpdateStealMap(stealerNodeId,stealPartitionsMap);
              if (RebalanceUtils.rebalanceCommitOrRevert(stealPartitionsMap,stealerNode,rebalanceStealInfo,getAdminClient())) {
                boolean success=RebalanceUtils.attemptRebalanceTransfer(stealerNode,rebalanceStealInfo,getAdminClient());
                if (!success) {
                  if (rebalanceStealInfo.getAttempt() < config.getMaxRebalancingAttempt()) {
                    rebalanceStealInfo.setAttempt(rebalanceStealInfo.getAttempt() + 1);
                    RebalanceUtils.revertStealPartitionsMap(stealPartitionsMap,stealerNodeId,rebalanceStealInfo);
                  }
 else {
                    logger.error("Rebalance attempt for node:" + stealerNodeId + " failed max times.");
                  }
                }
              }
              nodeRebalancingLock.get(stealerNodeId).set(false);
            }
          }
 catch (          Exception e) {
            logger.warn("Rebalance step failed",e);
          }
 finally {
            semaphore.release();
            logger.debug("rebalancing semaphore released.");
          }
        }
 else {
          logger.warn(new VoldemortException("Failed to get rebalance task permit."));
        }
      }
      private Node getStealerNode(      Cluster currentCluster,      Cluster targetCluster,      int stealerNodeId){
        if (RebalanceUtils.containsNode(currentCluster,stealerNodeId))         return currentCluster.getNodeById(stealerNodeId);
 else         return RebalanceUtils.updateNode(targetCluster.getNodeById(stealerNodeId),new ArrayList<Integer>());
      }
    }
);
  }
}
