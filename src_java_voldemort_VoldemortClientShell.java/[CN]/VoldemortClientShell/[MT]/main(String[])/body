{
  OptionParser parser=new OptionParser();
  parser.accepts("client-zone-id","client zone id for zone routing").withRequiredArg().describedAs("zone-id").ofType(Integer.class);
  parser.accepts("enable-pipeline-routed-store");
  parser.accepts("enable-zone-routing");
  OptionSet options=parser.parse(args);
  List<String> nonOptions=options.nonOptionArguments();
  if (nonOptions.size() < 2 || nonOptions.size() > 3) {
    System.err.println("Usage: java VoldemortClientShell [options] store_name bootstrap_url [command_file]");
    parser.printHelpOn(System.err);
    System.exit(-1);
  }
  String storeName=nonOptions.get(0);
  String bootstrapUrl=nonOptions.get(1);
  String commandsFileName="";
  BufferedReader fileReader=null;
  BufferedReader inputReader=null;
  try {
    if (nonOptions.size() == 3) {
      commandsFileName=nonOptions.get(2);
      fileReader=new BufferedReader(new FileReader(commandsFileName));
    }
    inputReader=new BufferedReader(new InputStreamReader(System.in));
  }
 catch (  IOException e) {
    Utils.croak("Failure to open input stream: " + e.getMessage());
  }
  ClientConfig clientConfig=new ClientConfig().setBootstrapUrls(bootstrapUrl);
  if (options.has("client-zone-id")) {
    clientConfig.setClientZoneId(new Integer((String)options.valueOf("client-zone-id")).intValue());
  }
  if (options.has("enable-pipeline-routed-store")) {
    clientConfig.setEnablePipelineRoutedStore(true);
  }
  if (options.has("enable-zone-routing")) {
    clientConfig.setEnableZoneRouting(true);
  }
  StoreClientFactory factory=new SocketStoreClientFactory(clientConfig);
  try {
    client=(DefaultStoreClient<Object,Object>)factory.getStoreClient(storeName);
  }
 catch (  Exception e) {
    Utils.croak("Could not connect to server: " + e.getMessage());
  }
  System.out.println("Established connection to " + storeName + " via "+ bootstrapUrl);
  System.out.print(PROMPT);
  if (fileReader != null) {
    processCommands(factory,fileReader,true);
    fileReader.close();
  }
  processCommands(factory,inputReader,false);
}
