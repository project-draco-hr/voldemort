{
  if (args.length < 2 || args.length > 3)   Utils.croak("USAGE: java VoldemortClientShell store_name bootstrap_url [command_file]");
  String storeName=args[0];
  String bootstrapUrl=args[1];
  BufferedReader reader=null;
  try {
    if (args.length == 3)     reader=new BufferedReader(new FileReader(args[2]));
 else     reader=new BufferedReader(new InputStreamReader(System.in));
  }
 catch (  IOException e) {
    Utils.croak("Failure to open input stream: " + e.getMessage());
  }
  StoreClientFactory factory=new SocketStoreClientFactory(Executors.newFixedThreadPool(5),3,10,2000,2000,2000,bootstrapUrl);
  DefaultStoreClient<Object,Object> client=null;
  try {
    client=(DefaultStoreClient<Object,Object>)factory.getStoreClient(storeName);
  }
 catch (  Exception e) {
    Utils.croak("Could not connect to server: " + e.getMessage());
  }
  System.out.println("Established connection to " + storeName + " via "+ bootstrapUrl);
  System.out.print(PROMPT);
  for (String line=reader.readLine(); line != null; line=reader.readLine()) {
    if (line.trim().equals(""))     continue;
    try {
      if (line.toLowerCase().startsWith("put")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("put".length())));
        client.put(tightenNumericTypes(jsonReader.read()),tightenNumericTypes(jsonReader.read()));
      }
 else       if (line.toLowerCase().startsWith("get")) {
        logger.info("get called:");
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("get".length())));
        printVersioned(client.get(tightenNumericTypes(jsonReader.read())));
      }
 else       if (line.toLowerCase().startsWith("delete")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("delete".length())));
        client.delete(tightenNumericTypes(jsonReader.read()));
      }
 else       if (line.startsWith("locate")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("locate".length())));
        Object key=tightenNumericTypes(jsonReader.read());
        printNodeList(client.getResponsibleNodes(key));
      }
 else       if (line.startsWith("help")) {
        System.out.println("Commands:");
        System.out.println("put key value -- Associate the given value with the key.");
        System.out.println("get key -- Retrieve the value associated with the key.");
        System.out.println("delete key -- Remove all values associated with the key.");
        System.out.println("locate key -- Determine which servers host the give key.");
        System.out.println("help -- Print this message.");
        System.out.println("exit -- Exit from this shell.");
        System.out.println();
      }
 else       if (line.startsWith("quit") || line.startsWith("exit")) {
        System.out.println("k k thx bye.");
        System.exit(0);
      }
 else {
        System.err.println("Invalid command.");
      }
    }
 catch (    SerializationException e) {
      System.err.print("Error serializing values: ");
      System.err.println(e.getMessage());
    }
catch (    VoldemortException e) {
      System.err.println("Exception thrown during operation.");
      e.printStackTrace(System.err);
    }
catch (    ArrayIndexOutOfBoundsException e) {
      System.err.println("Invalid command.");
    }
catch (    Exception e) {
      System.err.println("Unexpected error:");
      e.printStackTrace(System.err);
    }
    System.out.print(PROMPT);
  }
}
