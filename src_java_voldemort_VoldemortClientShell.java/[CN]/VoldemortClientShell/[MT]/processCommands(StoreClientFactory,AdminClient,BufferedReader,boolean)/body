{
  for (String line=reader.readLine(); line != null; line=reader.readLine()) {
    if (line.trim().equals(""))     continue;
    if (printCommands)     System.out.println(line);
    try {
      if (line.toLowerCase().startsWith("put")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("put".length())));
        Object key=tightenNumericTypes(jsonReader.read());
        Object value=tightenNumericTypes(jsonReader.read());
        if (jsonReader.hasMore())         client.put(key,value,tightenNumericTypes(jsonReader.read()));
 else         client.put(key,value);
      }
 else       if (line.toLowerCase().startsWith("getall")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("getall".length())));
        List<Object> keys=new ArrayList<Object>();
        try {
          while (true)           keys.add(jsonReader.read());
        }
 catch (        EndOfFileException e) {
        }
        Map<Object,Versioned<Object>> vals=client.getAll(keys);
        if (vals.size() > 0) {
          for (          Map.Entry<Object,Versioned<Object>> entry : vals.entrySet()) {
            System.out.print(entry.getKey());
            System.out.print(" => ");
            printVersioned(entry.getValue());
          }
        }
 else {
          System.out.println("null");
        }
      }
 else       if (line.toLowerCase().startsWith("getmetadata")) {
        String[] args=line.substring("getmetadata".length() + 1).split("\\s+");
        int remoteNodeId=Integer.valueOf(args[0]);
        String key=args[1];
        Versioned<String> versioned=adminClient.metadataMgmtOps.getRemoteMetadata(remoteNodeId,key);
        if (versioned == null) {
          System.out.println("null");
        }
 else {
          System.out.println(versioned.getVersion());
          System.out.print(": ");
          System.out.println(versioned.getValue());
          System.out.println();
        }
      }
 else       if (line.toLowerCase().startsWith("get")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("get".length())));
        Object key=tightenNumericTypes(jsonReader.read());
        if (jsonReader.hasMore())         printVersioned(client.get(key,tightenNumericTypes(jsonReader.read())));
 else         printVersioned(client.get(key));
      }
 else       if (line.toLowerCase().startsWith("delete")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("delete".length())));
        client.delete(tightenNumericTypes(jsonReader.read()));
      }
 else       if (line.startsWith("preflist")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("preflist".length())));
        Object key=tightenNumericTypes(jsonReader.read());
        printNodeList(client.getResponsibleNodes(key),factory.getFailureDetector());
      }
 else       if (line.toLowerCase().startsWith("fetchkeys")) {
        String[] args=line.substring("fetchkeys".length() + 1).split("\\s+");
        int remoteNodeId=Integer.valueOf(args[0]);
        String storeName=args[1];
        List<Integer> partititionList=parseCsv(args[2]);
        Iterator<ByteArray> partitionKeys=adminClient.bulkFetchOps.fetchKeys(remoteNodeId,storeName,partititionList,null,false);
        BufferedWriter writer=null;
        try {
          if (args.length > 3) {
            writer=new BufferedWriter(new FileWriter(new File(args[3])));
          }
 else           writer=new BufferedWriter(new OutputStreamWriter(System.out));
        }
 catch (        IOException e) {
          System.err.println("Failed to open the output stream");
          e.printStackTrace();
        }
        if (writer != null) {
          while (partitionKeys.hasNext()) {
            ByteArray keyByteArray=partitionKeys.next();
            StringBuilder lineBuilder=new StringBuilder();
            lineBuilder.append(ByteUtils.getString(keyByteArray.get(),"UTF-8"));
            lineBuilder.append("\n");
            writer.write(lineBuilder.toString());
          }
          writer.flush();
        }
      }
 else       if (line.toLowerCase().startsWith("fetch")) {
        String[] args=line.substring("fetch".length() + 1).split("\\s+");
        int remoteNodeId=Integer.valueOf(args[0]);
        String storeName=args[1];
        List<Integer> partititionList=parseCsv(args[2]);
        Iterator<Pair<ByteArray,Versioned<byte[]>>> partitionEntries=adminClient.bulkFetchOps.fetchEntries(remoteNodeId,storeName,partititionList,null,false);
        BufferedWriter writer=null;
        try {
          if (args.length > 3) {
            writer=new BufferedWriter(new FileWriter(new File(args[3])));
          }
 else           writer=new BufferedWriter(new OutputStreamWriter(System.out));
        }
 catch (        IOException e) {
          System.err.println("Failed to open the output stream");
          e.printStackTrace();
        }
        if (writer != null) {
          while (partitionEntries.hasNext()) {
            Pair<ByteArray,Versioned<byte[]>> pair=partitionEntries.next();
            ByteArray keyByteArray=pair.getFirst();
            Versioned<byte[]> versioned=pair.getSecond();
            StringBuilder lineBuilder=new StringBuilder();
            lineBuilder.append(ByteUtils.getString(keyByteArray.get(),"UTF-8"));
            lineBuilder.append("\t");
            lineBuilder.append(versioned.getVersion());
            lineBuilder.append("\t");
            lineBuilder.append(ByteUtils.getString(versioned.getValue(),"UTF-8"));
            lineBuilder.append("\n");
            writer.write(lineBuilder.toString());
          }
          writer.flush();
        }
      }
 else       if (line.startsWith("help")) {
        System.out.println();
        System.out.println("Commands:");
        System.out.println(PROMPT + "put key value --- Associate the given value with the key.");
        System.out.println(PROMPT + "get key --- Retrieve the value associated with the key.");
        System.out.println(PROMPT + "getall key1 [key2...] --- Retrieve the value(s) associated with the key(s).");
        System.out.println(PROMPT + "delete key --- Remove all values associated with the key.");
        System.out.println(PROMPT + "preflist key --- Get node preference list for given key.");
        String metaKeyValues=voldemort.store.metadata.MetadataStore.METADATA_KEYS.toString();
        System.out.println(PROMPT + "getmetadata node_id meta_key --- Get store metadata associated " + "with meta_key from node_id. meta_key may be one of "+ metaKeyValues.substring(1,metaKeyValues.length() - 1)+ ".");
        System.out.println(PROMPT + "fetchkeys node_id store_name partitions <file_name> --- Fetch all keys " + "from given partitions (a comma separated list) of store_name on "+ "node_id. Optionally, write to file_name. "+ "Use getmetadata to determine appropriate values for store_name and partitions");
        System.out.println(PROMPT + "fetch node_id store_name partitions <file_name> --- Fetch all entries " + "from given partitions (a comma separated list) of store_name on "+ "node_id. Optionally, write to file_name. "+ "Use getmetadata to determine appropriate values for store_name and partitions");
        System.out.println(PROMPT + "help --- Print this message.");
        System.out.println(PROMPT + "exit --- Exit from this shell.");
        System.out.println();
      }
 else       if (line.startsWith("quit") || line.startsWith("exit")) {
        System.out.println("k k thx bye.");
        System.exit(0);
      }
 else {
        System.err.println("Invalid command. (Try 'help' for usage.)");
      }
    }
 catch (    EndOfFileException e) {
      System.err.println("Expected additional token.");
    }
catch (    SerializationException e) {
      System.err.print("Error serializing values: ");
      e.printStackTrace();
    }
catch (    VoldemortException e) {
      System.err.println("Exception thrown during operation.");
      e.printStackTrace(System.err);
    }
catch (    ArrayIndexOutOfBoundsException e) {
      System.err.println("Invalid command. (Try 'help' for usage.)");
    }
catch (    Exception e) {
      System.err.println("Unexpected error:");
      e.printStackTrace(System.err);
    }
    System.out.print(PROMPT);
  }
}
