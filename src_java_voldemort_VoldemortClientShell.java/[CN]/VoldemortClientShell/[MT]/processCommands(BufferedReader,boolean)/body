{
  for (String line=reader.readLine(); line != null; line=reader.readLine()) {
    if (line.trim().equals(""))     continue;
    if (printCommands)     System.out.println(line);
    try {
      if (line.toLowerCase().startsWith("put")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("put".length())));
        client.put(tightenNumericTypes(jsonReader.read()),tightenNumericTypes(jsonReader.read()));
      }
 else       if (line.toLowerCase().startsWith("getall")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("getall".length())));
        List<Object> keys=new ArrayList<Object>();
        try {
          while (true)           keys.add(jsonReader.read());
        }
 catch (        EndOfFileException e) {
        }
        Map<Object,Versioned<Object>> vals=client.getAll(keys);
        if (vals.size() > 0) {
          for (          Map.Entry<Object,Versioned<Object>> entry : vals.entrySet()) {
            System.out.print(entry.getKey());
            System.out.print(" => ");
            printVersioned(entry.getValue());
          }
        }
 else {
          System.out.println("null");
        }
      }
 else       if (line.toLowerCase().startsWith("get")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("get".length())));
        printVersioned(client.get(tightenNumericTypes(jsonReader.read())));
      }
 else       if (line.toLowerCase().startsWith("delete")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("delete".length())));
        client.delete(tightenNumericTypes(jsonReader.read()));
      }
 else       if (line.startsWith("preflist")) {
        JsonReader jsonReader=new JsonReader(new StringReader(line.substring("preflist".length())));
        Object key=tightenNumericTypes(jsonReader.read());
        printNodeList(client.getResponsibleNodes(key));
      }
 else       if (line.startsWith("help")) {
        System.out.println("Commands:");
        System.out.println("put key value -- Associate the given value with the key.");
        System.out.println("get key -- Retrieve the value associated with the key.");
        System.out.println("getall key -- Retrieve the value(s) associated with the key.");
        System.out.println("delete key -- Remove all values associated with the key.");
        System.out.println("preflist key -- Get node preference list for given key.");
        System.out.println("help -- Print this message.");
        System.out.println("exit -- Exit from this shell.");
        System.out.println();
      }
 else       if (line.startsWith("quit") || line.startsWith("exit")) {
        System.out.println("k k thx bye.");
        System.exit(0);
      }
 else {
        System.err.println("Invalid command.");
      }
    }
 catch (    EndOfFileException e) {
      System.err.println("Expected additional token.");
    }
catch (    SerializationException e) {
      System.err.print("Error serializing values: ");
      e.printStackTrace();
    }
catch (    VoldemortException e) {
      System.err.println("Exception thrown during operation.");
      e.printStackTrace(System.err);
    }
catch (    ArrayIndexOutOfBoundsException e) {
      System.err.println("Invalid command.");
    }
catch (    Exception e) {
      System.err.println("Unexpected error:");
      e.printStackTrace(System.err);
    }
    System.out.print(PROMPT);
  }
}
