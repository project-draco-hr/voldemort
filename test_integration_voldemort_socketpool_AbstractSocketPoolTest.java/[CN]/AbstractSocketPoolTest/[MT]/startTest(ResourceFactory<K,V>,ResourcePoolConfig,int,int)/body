{
  final KeyedResourcePool<K,V> pool=new KeyedResourcePool<K,V>(factory,config);
  final ConcurrentHashMap<K,AtomicInteger> resourceInHand=new ConcurrentHashMap<K,AtomicInteger>();
  ExecutorService executor=Executors.newFixedThreadPool(nThreads);
  final TestStats testStats=new TestStats();
  final AtomicBoolean passed=new AtomicBoolean(true);
  for (int i=0; i < nRequests; i++) {
    final K key=getRequestKey();
    resourceInHand.putIfAbsent(key,new AtomicInteger(0));
    executor.execute(new Runnable(){
      public void run(){
        try {
          V resource=pool.checkout(key);
          resourceInHand.get(key).incrementAndGet();
          if (resourceInHand.get(key).get() > config.getMaxPoolSize()) {
            passed.set(false);
          }
          assertEquals("resources In Hand(" + resourceInHand.get(key).get() + ") should be less than equal to pool size("+ config.getMaxPoolSize()+ ")",true,resourceInHand.get(key).get() <= config.getMaxPoolSize());
          doSomethingWithResource(key,resource);
          pool.checkin(key,resource);
          resourceInHand.get(key).decrementAndGet();
        }
 catch (        TimeoutException e) {
          ++testStats.timeoutRequests;
          return;
        }
catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  executor.shutdown();
  executor.awaitTermination(5 * 60,TimeUnit.SECONDS);
  if (!passed.get()) {
    fail();
  }
  return testStats;
}
