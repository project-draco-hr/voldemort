{
  adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,metadataStore.getCluster(),maxParallelStoresRebalancing * 4,maxParallelStoresRebalancing * 2);
  final List<Exception> failures=new ArrayList<Exception>();
  final List<String> readOnlyStoresCompleted=new ArrayList<String>();
  try {
    logger.info("starting rebalancing task" + stealInfo);
    for (    final String storeName : ImmutableList.copyOf(stealInfo.getUnbalancedStoreList())) {
      executors.submit(new Runnable(){
        public void run(){
          try {
            boolean isReadOnlyStore=metadataStore.getStoreDef(storeName).getType().compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;
            rebalanceStore(storeName,adminClient,stealInfo,isReadOnlyStore);
            if (!isReadOnlyStore) {
              List<String> tempUnbalancedStoreList=new ArrayList<String>(stealInfo.getUnbalancedStoreList());
              tempUnbalancedStoreList.remove(storeName);
              stealInfo.setUnbalancedStoreList(tempUnbalancedStoreList);
            }
 else {
              readOnlyStoresCompleted.add(storeName);
            }
            rebalancer.setRebalancingState(stealInfo);
          }
 catch (          Exception e) {
            logger.error("rebalanceSubTask:" + stealInfo + " failed for store:"+ storeName,e);
            failures.add(e);
          }
        }
      }
);
    }
    waitForShutdown();
    List<String> unbalancedStores=Lists.newArrayList(stealInfo.getUnbalancedStoreList());
    if (unbalancedStores.isEmpty()) {
      logger.info("Rebalancer: rebalance " + stealInfo + " completed successfully.");
      metadataStore.cleanRebalancingState(stealInfo);
    }
 else {
      unbalancedStores.removeAll(readOnlyStoresCompleted);
      if (unbalancedStores.size() > 0) {
        throw new VoldemortRebalancingException("Failed to rebalance task " + stealInfo,failures);
      }
 else {
        logger.info("Rebalancer: rebalance " + stealInfo + " for read-write completed successfully. Need to swap read-only stores. ");
        metadataStore.put(MetadataStore.SERVER_STATE_KEY,VoldemortState.REBALANCING_MASTER_SWAP_SERVER);
      }
    }
  }
  finally {
    rebalancer.releaseRebalancingPermit(stealInfo.getDonorId());
    adminClient.stop();
    adminClient=null;
  }
}
