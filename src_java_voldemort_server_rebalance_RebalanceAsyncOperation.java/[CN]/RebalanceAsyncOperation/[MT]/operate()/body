{
  adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,metadataStore.getCluster(),voldemortConfig.getMaxParallelStoresRebalancing(),1);
  final List<Exception> failures=new ArrayList<Exception>();
  try {
    for (    final String storeName : ImmutableList.copyOf(stealInfo.getUnbalancedStoreList())) {
      executors.submit(new Runnable(){
        public void run(){
          try {
            boolean isReadOnlyStore=metadataStore.getStoreDef(storeName).getType().compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;
            if (logger.isDebugEnabled()) {
              logger.debug("operate() -  storeName: " + storeName + ", stealInfo: "+ stealInfo);
            }
            rebalanceStore(storeName,adminClient,stealInfo,isReadOnlyStore);
            List<String> tempUnbalancedStoreList=new ArrayList<String>(stealInfo.getUnbalancedStoreList());
            tempUnbalancedStoreList.remove(storeName);
            stealInfo.setUnbalancedStoreList(tempUnbalancedStoreList);
            metadataStore.deleteRebalancingState(stealInfo);
          }
 catch (          Exception e) {
            logger.error("rebalanceSubTask:" + stealInfo + " failed for store:"+ storeName+ " - "+ e.getMessage(),e);
            failures.add(e);
          }
        }
      }
);
    }
    waitForShutdown();
    List<String> unbalancedStores=Lists.newArrayList(stealInfo.getUnbalancedStoreList());
    if (unbalancedStores.isEmpty()) {
      logger.info("Rebalancer: rebalance " + stealInfo + " completed successfully.");
      metadataStore.deleteRebalancingState(stealInfo);
    }
 else {
      throw new VoldemortRebalancingException("Failed to rebalance task " + stealInfo,failures);
    }
  }
  finally {
    if (logger.isInfoEnabled()) {
      logger.info("Releasing permit for Donor: " + stealInfo.getDonorId());
    }
    rebalancer.releaseRebalancingPermit(stealInfo.getDonorId());
    adminClient.stop();
    adminClient=null;
  }
}
