{
  List<RebalanceTask> taskList=Lists.newArrayList();
  if (rebalanceConfig.isStealerBasedRebalancing()) {
    for (    RebalancePartitionsInfo partitionsInfo : rebalancePartitionPlanList) {
      StealerBasedRebalanceTask rebalanceTask=new StealerBasedRebalanceTask(taskId,partitionsInfo,rebalanceConfig,donorPermits[partitionsInfo.getDonorId()],adminClient);
      taskList.add(rebalanceTask);
      service.execute(rebalanceTask);
    }
  }
 else {
    HashMap<Integer,List<RebalancePartitionsInfo>> donorNodeBasedPartitionsInfo=RebalanceUtils.groupPartitionsInfoByNode(rebalancePartitionPlanList,false);
    for (    Entry<Integer,List<RebalancePartitionsInfo>> entries : donorNodeBasedPartitionsInfo.entrySet()) {
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException e) {
      }
      DonorBasedRebalanceTask rebalanceTask=new DonorBasedRebalanceTask(taskId,entries.getValue(),rebalanceConfig,donorPermits[entries.getValue().get(0).getDonorId()],adminClient);
      taskList.add(rebalanceTask);
      service.execute(rebalanceTask);
    }
  }
  return taskList;
}
