{
  Versioned<Cluster> currentVersionedCluster=RebalanceUtils.getLatestCluster(new ArrayList<Integer>(),adminClient);
  logger.info("Current Cluster configuration:" + currentVersionedCluster);
  logger.info("Target Cluster configuration:" + targetCluster);
  Cluster currentCluster=currentVersionedCluster.getValue();
  adminClient.setAdminClientCluster(currentCluster);
  List<String> storeList=RebalanceUtils.getStoreNameList(currentCluster,adminClient);
  if (!RebalanceUtils.getClusterRebalancingToken()) {
    throw new VoldemortException("Failed to get Cluster permission to rebalance sleep and retry ...");
  }
  final RebalanceClusterPlan rebalanceClusterPlan=new RebalanceClusterPlan(currentCluster,targetCluster,storeList,rebalanceConfig.isDeleteAfterRebalancingEnabled());
  logger.info(rebalanceClusterPlan);
  currentCluster=getClusterWithNewNodes(currentCluster,targetCluster);
  adminClient.setAdminClientCluster(currentCluster);
  for (int nThreads=0; nThreads < this.rebalanceConfig.getMaxParallelRebalancing(); nThreads++) {
    this.executor.execute(new Runnable(){
      public void run(){
        while (!rebalanceClusterPlan.getRebalancingTaskQueue().isEmpty()) {
          RebalanceNodePlan rebalanceTask=rebalanceClusterPlan.getRebalancingTaskQueue().poll();
          if (null != rebalanceTask) {
            int stealerNodeId=rebalanceTask.getStealerNode();
            List<RebalancePartitionsInfo> rebalanceSubTaskList=rebalanceTask.getRebalanceTaskList();
            while (rebalanceSubTaskList.size() > 0) {
              int index=(int)Math.random() * rebalanceSubTaskList.size();
              RebalancePartitionsInfo rebalanceSubTask=rebalanceSubTaskList.remove(index);
              logger.info("Starting rebalancing for stealerNode:" + stealerNodeId + " rebalanceInfo:"+ rebalanceSubTask);
              try {
                int rebalanceAsyncId=adminClient.rebalanceNode(rebalanceSubTask);
                try {
                  commitClusterChanges(adminClient.getAdminClientCluster().getNodeById(stealerNodeId),targetCluster,rebalanceSubTask);
                }
 catch (                Exception e) {
                  adminClient.stopAsyncRequest(rebalanceSubTask.getStealerId(),rebalanceAsyncId);
                  throw e;
                }
                adminClient.waitForCompletion(rebalanceSubTask.getStealerId(),rebalanceAsyncId,rebalanceConfig.getRebalancingClientTimeoutSeconds(),TimeUnit.SECONDS);
                logger.info("Successfully finished RebalanceSubTask attempt:" + rebalanceSubTask);
              }
 catch (              Exception e) {
                logger.warn("rebalancing task (" + rebalanceSubTask + ") failed with exception:",e);
              }
            }
          }
        }
        logger.debug("Thread run() finished:\n");
      }
    }
);
  }
  executorShutDown(executor);
}
