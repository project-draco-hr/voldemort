{
  final Map<Node,Set<Integer>> stealerToStolenPrimaryPartitions=new HashMap<Node,Set<Integer>>();
  for (  Node stealerNode : targetCluster.getNodes()) {
    stealerToStolenPrimaryPartitions.put(stealerNode,RebalanceUtils.getStolenPrimaries(currentCluster,targetCluster,stealerNode.getId()));
  }
  for (  Node stealerNode : targetCluster.getNodes()) {
    Set<Integer> stolenPrimaryPartitions=stealerToStolenPrimaryPartitions.get(stealerNode);
    if (stolenPrimaryPartitions == null || stolenPrimaryPartitions.isEmpty()) {
      RebalanceUtils.printLog(stealerNode.getId(),logger,"No partitions to steal");
      continue;
    }
    RebalanceUtils.printLog(stealerNode.getId(),logger,"Number of primary partitions being moved = " + stolenPrimaryPartitions.size() + " - "+ stolenPrimaryPartitions);
    Node stealerNodeUpdated=currentCluster.getNodeById(stealerNode.getId());
    for (    Integer donatedPrimaryPartition : stolenPrimaryPartitions) {
      Cluster transitionCluster=RebalanceUtils.createUpdatedCluster(currentCluster,stealerNodeUpdated,donatedPrimaryPartition);
      stealerNodeUpdated=transitionCluster.getNodeById(stealerNodeUpdated.getId());
      final RebalanceClusterPlan rebalanceClusterPlan=new RebalanceClusterPlan(currentCluster,transitionCluster,storeDefs,rebalanceConfig.isDeleteAfterRebalancingEnabled());
      final OrderedClusterTransition orderedClusterTransition=new OrderedClusterTransition(currentCluster,transitionCluster,storeDefs,rebalanceClusterPlan);
      RebalanceUtils.printLog(stealerNode.getId(),logger,orderedClusterTransition.toString());
      if (!rebalanceConfig.isShowPlanEnabled()) {
        rebalancePerPartitionTransition(stealerNode.getId(),orderedClusterTransition);
      }
      currentCluster=transitionCluster;
    }
  }
}
