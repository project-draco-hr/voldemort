{
  final Cluster batchCurrentCluster=batchPlan.getCurrentCluster();
  final List<StoreDefinition> batchCurrentStoreDefs=batchPlan.getCurrentStoreDefs();
  final Cluster batchFinalCluster=batchPlan.getFinalCluster();
  final List<StoreDefinition> batchFinalStoreDefs=batchPlan.getFinalStoreDefs();
  try {
    final List<RebalanceTaskInfo> rebalanceTaskInfoList=batchPlan.getBatchPlan();
    if (rebalanceTaskInfoList.isEmpty()) {
      RebalanceUtils.printBatchLog(batchId,logger,"Skipping batch " + batchId + " since it is empty.");
      adminClient.rebalanceOps.rebalanceStateChange(batchCurrentCluster,batchFinalCluster,batchCurrentStoreDefs,batchFinalStoreDefs,rebalanceTaskInfoList,false,true,false,false,true);
      return;
    }
    RebalanceUtils.printBatchLog(batchId,logger,"Starting batch " + batchId + ".");
    List<StoreDefinition> readOnlyStoreDefs=StoreDefinitionUtils.filterStores(batchFinalStoreDefs,true);
    List<StoreDefinition> readWriteStoreDefs=StoreDefinitionUtils.filterStores(batchFinalStoreDefs,false);
    boolean hasReadOnlyStores=readOnlyStoreDefs != null && readOnlyStoreDefs.size() > 0;
    boolean hasReadWriteStores=readWriteStoreDefs != null && readWriteStoreDefs.size() > 0;
    boolean finishedReadOnlyPhase=false;
    List<RebalanceTaskInfo> filteredRebalancePartitionPlanList=RebalanceUtils.filterTaskPlanWithStores(rebalanceTaskInfoList,readOnlyStoreDefs);
    rebalanceStateChange(batchId,batchCurrentCluster,batchCurrentStoreDefs,batchFinalCluster,batchFinalStoreDefs,filteredRebalancePartitionPlanList,hasReadOnlyStores,hasReadWriteStores,finishedReadOnlyPhase);
    if (hasReadOnlyStores) {
      RebalanceBatchPlanProgressBar progressBar=batchPlan.getProgressBar(batchId);
      executeSubBatch(batchId,progressBar,batchCurrentCluster,batchCurrentStoreDefs,filteredRebalancePartitionPlanList,hasReadOnlyStores,hasReadWriteStores,finishedReadOnlyPhase);
    }
    finishedReadOnlyPhase=true;
    filteredRebalancePartitionPlanList=RebalanceUtils.filterTaskPlanWithStores(rebalanceTaskInfoList,readWriteStoreDefs);
    rebalanceStateChange(batchId,batchCurrentCluster,batchCurrentStoreDefs,batchFinalCluster,batchFinalStoreDefs,filteredRebalancePartitionPlanList,hasReadOnlyStores,hasReadWriteStores,finishedReadOnlyPhase);
    if (hasReadWriteStores) {
      proxyPause();
      RebalanceBatchPlanProgressBar progressBar=batchPlan.getProgressBar(batchId);
      executeSubBatch(batchId,progressBar,batchCurrentCluster,batchCurrentStoreDefs,filteredRebalancePartitionPlanList,hasReadOnlyStores,hasReadWriteStores,finishedReadOnlyPhase);
    }
    RebalanceUtils.printBatchLog(batchId,logger,"Successfully terminated batch " + batchId + ".");
  }
 catch (  Exception e) {
    RebalanceUtils.printErrorLog(batchId,logger,"Error in batch " + batchId + " - "+ e.getMessage(),e);
    throw new VoldemortException("Rebalance failed on batch " + batchId,e);
  }
}
