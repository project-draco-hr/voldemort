{
  if (verbose) {
    System.out.println("Performing consistency fix of key: " + keyInHexFormat);
  }
  byte[] keyInBytes;
  List<Integer> nodeIdList=null;
  int masterPartitionId=-1;
  try {
    keyInBytes=ByteUtils.fromHexString(keyInHexFormat);
    masterPartitionId=storeInstance.getMasterPartitionId(keyInBytes);
    nodeIdList=storeInstance.getReplicationNodeList(masterPartitionId);
  }
 catch (  Exception exception) {
    if (verbose) {
      System.out.println("Aborting fixKey due to bad init.");
      exception.printStackTrace();
    }
    return new doKeyGetStatus(Status.BAD_INIT);
  }
  ByteArray keyAsByteArray=new ByteArray(keyInBytes);
  Map<Integer,QueryKeyResult> nodeIdToKeyValues=new HashMap<Integer,QueryKeyResult>();
  Status fixKeyResult=doRead(nodeIdList,keyInBytes,keyInHexFormat,verbose,nodeIdToKeyValues);
  if (fixKeyResult != Status.SUCCESS) {
    return new doKeyGetStatus(fixKeyResult);
  }
  List<NodeValue<ByteArray,byte[]>> nodeValues=Lists.newArrayList();
  fixKeyResult=processReadReplies(nodeIdList,keyAsByteArray,keyInHexFormat,verbose,nodeIdToKeyValues,nodeValues);
  if (fixKeyResult != Status.SUCCESS) {
    return new doKeyGetStatus(fixKeyResult);
  }
  List<NodeValue<ByteArray,byte[]>> toReadRepair=resolveReadConflicts(verbose,nodeValues);
  return new doKeyGetStatus(Status.SUCCESS,toReadRepair);
}
