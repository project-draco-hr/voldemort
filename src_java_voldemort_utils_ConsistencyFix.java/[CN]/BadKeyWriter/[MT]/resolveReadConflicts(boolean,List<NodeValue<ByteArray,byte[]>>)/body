{
  if (verbose) {
    System.out.println("Resolving conflicts in responses.");
  }
  ReadRepairer<ByteArray,byte[]> readRepairer=new ReadRepairer<ByteArray,byte[]>();
  List<NodeValue<ByteArray,byte[]>> toReadRepair=Lists.newArrayList();
  for (  NodeValue<ByteArray,byte[]> v : readRepairer.getRepairs(nodeValues)) {
    Versioned<byte[]> versioned=Versioned.value(v.getVersioned().getValue(),((VectorClock)v.getVersion()).clone());
    if (verbose) {
      System.out.println("\tAdding toReadRepair: key (" + v.getKey() + "), version ("+ versioned.getVersion()+ ")");
    }
    toReadRepair.add(new NodeValue<ByteArray,byte[]>(v.getNodeId(),v.getKey(),versioned));
  }
  if (verbose) {
    System.out.println("Repair work to be done:");
    for (    NodeValue<ByteArray,byte[]> nodeKeyValue : toReadRepair) {
      System.out.println("\tRepair key " + nodeKeyValue.getKey() + "on node with id "+ nodeKeyValue.getNodeId()+ " for version "+ nodeKeyValue.getVersion());
    }
  }
  return toReadRepair;
}
