{
  try {
    int counter=0;
    for (String keyNumValsLine=fileReader.readLine(); keyNumValsLine != null; keyNumValsLine=fileReader.readLine()) {
      String badKeyEntry=keyNumValsLine;
      String keyNumVals=keyNumValsLine.trim();
      if (!keyNumVals.isEmpty()) {
        counter++;
        String parsed[]=keyNumVals.split(",");
        if (parsed.length != 2) {
          throw new IOException("KeyNumVal line did not parse into two elements: " + keyNumVals);
        }
        logger.trace("parsed[0]: <" + parsed[0] + ">, parsed[1] <"+ parsed[1]+ ">");
        String key=parsed[0];
        ByteArray keyByteArray=new ByteArray(ByteUtils.fromHexString(key));
        int numVals=Integer.parseInt(parsed[1]);
        logger.debug("BadKeyReader read line: key (" + key + ") and counter ("+ counter+ ") and numVals is ("+ numVals+ ")");
        List<Versioned<byte[]>> values=new ArrayList<Versioned<byte[]>>();
        for (int i=0; i < numVals; ++i) {
          String valueVersionLine=fileReader.readLine();
          badKeyEntry.concat(valueVersionLine);
          String valueVersion=valueVersionLine.trim();
          if (valueVersion.isEmpty()) {
            throw new IOException("ValueVersion line was empty!");
          }
          parsed=valueVersion.split(",",2);
          if (parsed.length != 2) {
            throw new IOException("ValueVersion line did not parse into two elements: " + valueVersion);
          }
          byte[] value=ByteUtils.fromHexString(parsed[0]);
          VectorClock vectorClock=parseVersion(parsed[1]);
          values.add(new Versioned<byte[]>(value,vectorClock));
        }
        QueryKeyResult queryKeyResult=new QueryKeyResult(keyByteArray,values);
        if (!consistencyFix.isParseOnly()) {
          BadKey badKey=new BadKey(key,badKeyEntry);
          consistencyFixWorkers.submit(new ConsistencyFixWorker(badKey,consistencyFix,badKeyQOut,queryKeyResult));
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error("Exception reading badKeyFile " + badKeyFileIn + " : "+ e.getMessage());
    hasException=true;
  }
 finally {
    latch.countDown();
    try {
      fileReader.close();
    }
 catch (    IOException ioe) {
      logger.warn("IOException during fileReader.close in BadKeyReader thread.");
    }
  }
}
