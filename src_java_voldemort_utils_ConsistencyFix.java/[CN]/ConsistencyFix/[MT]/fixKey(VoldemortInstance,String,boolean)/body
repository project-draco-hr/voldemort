{
  int masterPartitionId=vInstance.getMasterPartitionId(keyInHexFormat);
  List<Integer> nodeIdList=vInstance.getReplicationNodeList(masterPartitionId);
  byte[] key=ByteUtils.fromHexString(keyInHexFormat);
  List<ByteArray> keys=new ArrayList<ByteArray>();
  keys.add(new ByteArray(key));
  System.out.println("Reading key-values for specified key: " + keyInHexFormat);
  Map<Integer,Iterator<Pair<ByteArray,Pair<List<Versioned<byte[]>>,Exception>>>> nodeIdToKeyValues;
  nodeIdToKeyValues=new HashMap<Integer,Iterator<Pair<ByteArray,Pair<List<Versioned<byte[]>>,Exception>>>>();
  for (  int nodeId : nodeIdList) {
    Iterator<Pair<ByteArray,Pair<List<Versioned<byte[]>>,Exception>>> keyValues;
    keyValues=vInstance.getAdminClient().queryKeys(nodeId,vInstance.getStoreName(),keys.iterator());
    nodeIdToKeyValues.put(nodeId,keyValues);
  }
  System.out.println("Confirming all nodes (" + nodeIdList + ") responded with key-values for specified key: "+ keyInHexFormat);
  List<NodeValue<ByteArray,byte[]>> nodeValues=Lists.newArrayList();
  boolean exceptionsEncountered=false;
  for (  int nodeId : nodeIdList) {
    System.out.println("\t Processing response from node with id:" + nodeId);
    Pair<ByteArray,Pair<List<Versioned<byte[]>>,Exception>> keyValue;
    if (nodeIdToKeyValues.get(nodeId).hasNext()) {
      System.out.println("\t... There was a key-value returned from node with id:" + nodeId);
      keyValue=nodeIdToKeyValues.get(nodeId).next();
      Exception e=keyValue.getSecond().getSecond();
      if (e != null) {
        System.out.println("\t... Exception encountered while fetching key " + keyInHexFormat + " from node with nodeId "+ nodeId+ " : "+ e.getMessage());
        exceptionsEncountered=true;
      }
 else {
        ByteArray keyByteArray=keyValue.getFirst();
        List<Versioned<byte[]>> values=keyValue.getSecond().getFirst();
        if (values.isEmpty()) {
          System.out.println("\t... Adding null version to nodeValues");
          Versioned<byte[]> versioned=new Versioned<byte[]>(null);
          nodeValues.add(new NodeValue<ByteArray,byte[]>(nodeId,new ByteArray(key),versioned));
        }
 else {
          for (          Versioned<byte[]> value : values) {
            System.out.println("\t... Adding following version to nodeValues: " + value.getVersion());
            nodeValues.add(new NodeValue<ByteArray,byte[]>(nodeId,keyByteArray,value));
          }
        }
      }
    }
 else {
      System.out.println("\t... No key-value returned from node with id:" + nodeId);
      System.out.println("\t... Adding null version to nodeValues");
      Versioned<byte[]> versioned=new Versioned<byte[]>(null);
      nodeValues.add(new NodeValue<ByteArray,byte[]>(nodeId,new ByteArray(key),versioned));
    }
  }
  if (exceptionsEncountered) {
    System.err.println("Aborting fixKey because exceptions were encountered when fetching key-values.");
    return;
  }
  System.out.println("Resolving conflicts in responses.");
  ReadRepairer<ByteArray,byte[]> readRepairer=new ReadRepairer<ByteArray,byte[]>();
  List<NodeValue<ByteArray,byte[]>> toReadRepair=Lists.newArrayList();
  for (  NodeValue<ByteArray,byte[]> v : readRepairer.getRepairs(nodeValues)) {
    Versioned<byte[]> versioned=Versioned.value(v.getVersioned().getValue(),((VectorClock)v.getVersion()).clone());
    System.out.println("\tAdding toReadRepair: key (" + v.getKey() + "), version ("+ versioned.getVersion()+ ")");
    toReadRepair.add(new NodeValue<ByteArray,byte[]>(v.getNodeId(),v.getKey(),versioned));
  }
  System.out.println("Repair work to be done:");
  for (  NodeValue<ByteArray,byte[]> nodeKeyValue : toReadRepair) {
    System.out.println("\tRepair key " + nodeKeyValue.getKey() + "on node with id "+ nodeKeyValue.getNodeId()+ " for version "+ nodeKeyValue.getVersion());
  }
  System.out.println("Performing repair work:");
  boolean allRepairsSuccessful=true;
  for (  NodeValue<ByteArray,byte[]> nodeKeyValue : toReadRepair) {
    System.out.println("\tDoing repair for node with id:" + nodeKeyValue.getNodeId());
    Exception e=vInstance.getAdminClient().repairEntry(vInstance.getStoreName(),nodeKeyValue);
    if (e != null) {
      System.out.println("\t... Repair of key " + nodeKeyValue.getKey() + "on node with id "+ nodeKeyValue.getNodeId()+ " for version "+ nodeKeyValue.getVersion()+ " failed because of exception : "+ e.getMessage());
      allRepairsSuccessful=false;
    }
  }
  if (!allRepairsSuccessful) {
    System.err.println("Aborting fixKey because exceptions were encountered when reparing key-values.");
    System.out.println("Fix failed...");
    return;
  }
  System.out.println("Fix completed successfully!!");
  return;
}
