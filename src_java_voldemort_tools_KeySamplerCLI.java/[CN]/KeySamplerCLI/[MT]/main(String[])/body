{
  OptionParser parser=null;
  OptionSet options=null;
  try {
    parser=getParser();
    options=parser.parse(args);
  }
 catch (  OptionException oe) {
    parser.printHelpOn(System.out);
    printUsageAndDie("Exception when parsing arguments : " + oe.getMessage());
    return;
  }
  if (options.hasArgument("help")) {
    parser.printHelpOn(System.out);
    printUsage();
    return;
  }
  if (!options.hasArgument("url") || !options.hasArgument("out-dir")) {
    parser.printHelpOn(System.out);
    printUsageAndDie("Missing a required argument.");
    return;
  }
  String url=(String)options.valueOf("url");
  String outDir=(String)options.valueOf("out-dir");
  Utils.mkdirs(new File(outDir));
  List<String> storeNames=null;
  if (options.hasArgument("store-names")) {
    @SuppressWarnings("unchecked") List<String> list=(List<String>)options.valuesOf("store-names");
    storeNames=list;
  }
  List<Integer> partitionIds=null;
  if (options.hasArgument("partition-ids")) {
    @SuppressWarnings("unchecked") List<Integer> list=(List<Integer>)options.valuesOf("partition-ids");
    partitionIds=list;
  }
  Integer nodeParallelism=DEFAULT_NODE_PARALLELISM;
  if (options.hasArgument("parallelism")) {
    nodeParallelism=(Integer)options.valueOf("parallelism");
  }
  Integer recordsPerPartition=DEFAULT_RECORDS_PER_PARTITION;
  if (options.hasArgument("records-per-partition")) {
    recordsPerPartition=(Integer)options.valueOf("records-per-partition");
  }
  Integer keysPerSecondLimit=DEFAULT_KEYS_PER_SECOND_LIMIT;
  if (options.hasArgument("keys-per-second-limit")) {
    keysPerSecondLimit=(Integer)options.valueOf("keys-per-second-limit");
  }
  System.err.println("throttle: " + keysPerSecondLimit);
  Integer progressPeriodOps=DEFAULT_PROGRESS_PERIOD_OPS;
  if (options.hasArgument("progress-period-ops")) {
    progressPeriodOps=(Integer)options.valueOf("progress-period-ops");
  }
  KeySamplerCLI sampler=new KeySamplerCLI(url,outDir,storeNames,partitionIds,nodeParallelism,recordsPerPartition,keysPerSecondLimit,progressPeriodOps);
  try {
    if (!sampler.sampleStores()) {
      logger.error("Some stores were not successfully sampled.");
    }
  }
  finally {
    sampler.stop();
  }
}
