{
  Map<Node,List<ByteArray>> nodeToKeysMap=Maps.newHashMap();
  Map<ByteArray,List<Node>> keyToExtraNodesMap=Maps.newHashMap();
  for (  ByteArray key : keys) {
    List<Node> nodes=null;
    try {
      nodes=getNodes(key);
    }
 catch (    VoldemortException e) {
      pipelineData.setFatalError(e);
      pipeline.addEvent(Event.ERROR);
      return;
    }
    List<Node> preferredNodes=Lists.newArrayListWithCapacity(preferred);
    List<Node> extraNodes=Lists.newArrayListWithCapacity(3);
    if (pipelineData.getZonesRequired() != null) {
      if (pipelineData.getZonesRequired() > this.clientZone.getProximityList().size()) {
        throw new VoldemortException("Number of zones required should be less than the total number of zones");
      }
      if (pipelineData.getZonesRequired() > required) {
        throw new VoldemortException("Number of zones required should be less than the required number of " + pipeline.getOperation().getSimpleName() + "s");
      }
      Map<Integer,List<Node>> zoneIdToNode=new HashMap<Integer,List<Node>>();
      for (      Node node : nodes) {
        List<Node> nodesList=null;
        if (zoneIdToNode.containsKey(node.getZoneId())) {
          nodesList=zoneIdToNode.get(node.getZoneId());
        }
 else {
          nodesList=new ArrayList<Node>();
          zoneIdToNode.put(node.getZoneId(),nodesList);
        }
        nodesList.add(node);
      }
      nodes=new ArrayList<Node>();
      LinkedList<Integer> proximityList=this.clientZone.getProximityList();
      for (int index=0; index < pipelineData.getZonesRequired(); index++) {
        List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
        if (zoneNodes != null) {
          nodes.add(zoneNodes.remove(0));
        }
      }
      nodes.addAll(zoneIdToNode.get(this.clientZone.getId()));
      for (int index=0; index < proximityList.size(); index++) {
        List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
        if (zoneNodes != null)         nodes.addAll(zoneNodes);
      }
    }
    for (    Node node : nodes) {
      if (preferredNodes.size() < preferred)       preferredNodes.add(node);
 else       extraNodes.add(node);
    }
    for (    Node node : preferredNodes) {
      List<ByteArray> nodeKeys=nodeToKeysMap.get(node);
      if (nodeKeys == null) {
        nodeKeys=Lists.newArrayList();
        nodeToKeysMap.put(node,nodeKeys);
      }
      nodeKeys.add(key);
    }
    if (!extraNodes.isEmpty()) {
      List<Node> list=keyToExtraNodesMap.get(key);
      if (list == null)       keyToExtraNodesMap.put(key,extraNodes);
 else       list.addAll(extraNodes);
    }
  }
  pipelineData.setKeyToExtraNodesMap(keyToExtraNodesMap);
  pipelineData.setNodeToKeysMap(nodeToKeysMap);
  pipeline.addEvent(completeEvent);
}
