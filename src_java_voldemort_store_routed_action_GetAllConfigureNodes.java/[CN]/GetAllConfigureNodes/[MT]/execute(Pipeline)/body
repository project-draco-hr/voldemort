{
  Map<Node,List<ByteArray>> nodeToKeysMap=Maps.newHashMap();
  Map<ByteArray,List<Node>> keyToExtraNodesMap=Maps.newHashMap();
  for (  ByteArray key : keys) {
    List<Node> nodes=null;
    List<Node> originalNodes=null;
    try {
      originalNodes=getNodes(key);
    }
 catch (    VoldemortException e) {
      pipelineData.setFatalError(e);
      pipeline.addEvent(Event.ERROR);
      return;
    }
    List<Node> preferredNodes=Lists.newArrayListWithCapacity(preferred);
    List<Node> extraNodes=Lists.newArrayListWithCapacity(3);
    if (zoneAffinity != null && zoneAffinity.isGetAllOpZoneAffinityEnabled()) {
      nodes=new ArrayList<Node>();
      for (      Node node : originalNodes) {
        if (node.getZoneId() == clientZone.getId()) {
          nodes.add(node);
        }
      }
    }
 else {
      nodes=originalNodes;
    }
    if (pipelineData.getZonesRequired() != null) {
      validateZonesRequired(this.clientZone,pipelineData.getZonesRequired());
      Map<Integer,List<Node>> zoneIdToNode=convertToZoneNodeMap(nodes);
      nodes=new ArrayList<Node>();
      List<Integer> proximityList=this.clientZone.getProximityList();
      for (int index=0; index < pipelineData.getZonesRequired(); index++) {
        List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
        if (zoneNodes != null) {
          nodes.add(zoneNodes.remove(0));
        }
      }
      List<Node> zoneIDNodeList=zoneIdToNode.get(this.clientZone.getId());
      if (zoneIDNodeList != null) {
        nodes.addAll(zoneIDNodeList);
      }
      for (int index=0; index < proximityList.size(); index++) {
        List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
        if (zoneNodes != null)         nodes.addAll(zoneNodes);
      }
    }
    for (    Node node : nodes) {
      if (preferredNodes.size() < preferred)       preferredNodes.add(node);
 else       extraNodes.add(node);
    }
    for (    Node node : preferredNodes) {
      List<ByteArray> nodeKeys=nodeToKeysMap.get(node);
      if (nodeKeys == null) {
        nodeKeys=Lists.newArrayList();
        nodeToKeysMap.put(node,nodeKeys);
      }
      nodeKeys.add(key);
    }
    if (!extraNodes.isEmpty()) {
      List<Node> list=keyToExtraNodesMap.get(key);
      if (list == null)       keyToExtraNodesMap.put(key,extraNodes);
 else       list.addAll(extraNodes);
    }
  }
  pipelineData.setKeyToExtraNodesMap(keyToExtraNodesMap);
  pipelineData.setNodeToKeysMap(nodeToKeysMap);
  pipelineData.setTransforms(transforms);
  pipeline.addEvent(completeEvent);
}
