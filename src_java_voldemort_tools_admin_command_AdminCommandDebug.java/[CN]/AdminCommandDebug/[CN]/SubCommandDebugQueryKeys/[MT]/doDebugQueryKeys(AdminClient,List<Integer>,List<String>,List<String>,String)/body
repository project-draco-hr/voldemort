{
  Integer storeDefNodeId=nodeIds.get(0);
  Map<String,StoreDefinition> storeDefinitions=AdminToolUtils.getUserStoreDefMapOnNode(adminClient,storeDefNodeId);
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(System.out));
  for (  String keyString : keyStrings) {
    for (    final String storeName : storeNames) {
      StoreDefinition storeDefinition=storeDefinitions.get(storeName);
      if (storeDefinition == null) {
        throw new StoreNotFoundException("Store " + storeName + " not found.");
      }
      out.write("STORE_NAME: " + storeDefinition.getName() + "\n");
      final SerializerDefinition keySerializerDef=storeDefinition.getKeySerializer();
      final SerializerDefinition valueSerializerDef=storeDefinition.getValueSerializer();
      SerializerFactory serializerFactory=new DefaultSerializerFactory();
      @SuppressWarnings("unchecked") final Serializer<Object> keySerializer=(Serializer<Object>)serializerFactory.getSerializer(keySerializerDef);
      @SuppressWarnings("unchecked") final Serializer<Object> valueSerializer=(Serializer<Object>)serializerFactory.getSerializer(valueSerializerDef);
      final CompressionStrategy keyCompressionStrategy;
      final CompressionStrategy valueCompressionStrategy;
      if (keySerializerDef != null && keySerializerDef.hasCompression()) {
        keyCompressionStrategy=new CompressionStrategyFactory().get(keySerializerDef.getCompression());
      }
 else {
        keyCompressionStrategy=null;
      }
      if (valueSerializerDef != null && valueSerializerDef.hasCompression()) {
        valueCompressionStrategy=new CompressionStrategyFactory().get(valueSerializerDef.getCompression());
      }
 else {
        valueCompressionStrategy=null;
      }
      if (keyCompressionStrategy == null) {
        out.write("KEY_COMPRESSION_STRATEGY: None\n");
      }
 else {
        out.write("KEY_COMPRESSION_STRATEGY: " + keyCompressionStrategy.getType() + "\n");
      }
      out.write("KEY_SERIALIZER_NAME: " + keySerializerDef.getName() + "\n");
      for (      Map.Entry<Integer,String> entry : keySerializerDef.getAllSchemaInfoVersions().entrySet()) {
        out.write(String.format("KEY_SCHEMA VERSION=%d\n",entry.getKey()));
        out.write("====================================\n");
        out.write(entry.getValue());
        out.write("\n====================================\n");
      }
      out.write("\n");
      if (valueCompressionStrategy == null) {
        out.write("VALUE_COMPRESSION_STRATEGY: None\n");
      }
 else {
        out.write("VALUE_COMPRESSION_STRATEGY: " + valueCompressionStrategy.getType() + "\n");
      }
      out.write("VALUE_SERIALIZER_NAME: " + valueSerializerDef.getName() + "\n");
      for (      Map.Entry<Integer,String> entry : valueSerializerDef.getAllSchemaInfoVersions().entrySet()) {
        out.write(String.format("VALUE_SCHEMA %d\n",entry.getKey()));
        out.write("====================================\n");
        out.write(entry.getValue());
        out.write("\n====================================\n");
      }
      out.write("\n");
      ByteArray key;
      try {
        if (keyType.equals(AdminParserUtils.OPT_JSON)) {
          Object keyObject;
          String keySerializerName=keySerializerDef.getName();
          if (isAvroSchema(keySerializerName)) {
            Schema keySchema=Schema.parse(keySerializerDef.getCurrentSchemaInfo());
            JsonDecoder decoder=new JsonDecoder(keySchema,keyString);
            GenericDatumReader<Object> datumReader=new GenericDatumReader<Object>(keySchema);
            keyObject=datumReader.read(null,decoder);
          }
 else           if (keySerializerName.equals(DefaultSerializerFactory.JSON_SERIALIZER_TYPE_NAME)) {
            JsonReader jsonReader=new JsonReader(new StringReader(keyString));
            keyObject=jsonReader.read();
          }
 else {
            keyObject=keyString;
          }
          key=new ByteArray(keySerializer.toBytes(keyObject));
        }
 else         if (keyType.equals(AdminParserUtils.OPT_HEX)) {
          key=new ByteArray(ByteUtils.fromHexString(keyString));
        }
 else {
          key=null;
        }
      }
 catch (      SerializationException se) {
        System.err.println("Error serializing key " + keyString);
        System.err.println("If this is a JSON key, you need to include escaped quotation marks in the command line if it is a string");
        se.printStackTrace();
        return;
      }
catch (      DecoderException de) {
        System.err.println("Error decoding key " + keyString);
        de.printStackTrace();
        return;
      }
catch (      IOException io) {
        System.err.println("Error parsing avro string " + keyString);
        io.printStackTrace();
        return;
      }
      boolean printedKey=false;
      for (      Integer nodeId : nodeIds) {
        Iterator<QueryKeyResult> iterator;
        iterator=adminClient.streamingOps.queryKeys(nodeId,storeName,Arrays.asList(key).iterator());
        QueryKeyResult queryKeyResult=iterator.next();
        byte[] keyBytes=queryKeyResult.getKey().get();
        Object keyObject=keySerializer.toObject((null == keyCompressionStrategy) ? keyBytes : keyCompressionStrategy.inflate(keyBytes));
        if (!printedKey) {
          out.write("KEY_BYTES\n====================================\n");
          out.write(queryKeyResult.getKey().toString());
          out.write("\n====================================\n");
          out.write("KEY_TEXT\n====================================\n");
          if (keyObject instanceof GenericRecord) {
            out.write(keyObject.toString());
          }
 else {
            new JsonFactory(new ObjectMapper()).createJsonGenerator(out).writeObject(keyObject);
          }
          out.write("\n====================================\n\n");
          printedKey=true;
        }
        out.write(String.format("\nQueried node %d on store %s\n",nodeId,storeName));
        if (queryKeyResult.hasValues() && queryKeyResult.getValues().size() > 0) {
          int versionCount=0;
          out.write("VALUE " + versionCount + "\n");
          for (          Versioned<byte[]> versioned : queryKeyResult.getValues()) {
            VectorClock version=(VectorClock)versioned.getVersion();
            out.write("VECTOR_CLOCK_BYTE: " + ByteUtils.toHexString(version.toBytes()) + "\n");
            out.write("VECTOR_CLOCK_TEXT: " + version.toString() + '['+ new Date(version.getTimestamp()).toString()+ "]\n");
            byte[] valueBytes=versioned.getValue();
            out.write("VALUE_BYTE\n====================================\n");
            out.write(ByteUtils.toHexString(valueBytes));
            out.write("\n====================================\n");
            out.write("VALUE_TEXT\n====================================\n");
            Object valueObject=valueSerializer.toObject((null == valueCompressionStrategy) ? valueBytes : valueCompressionStrategy.inflate(valueBytes));
            if (valueObject instanceof GenericRecord) {
              out.write(valueObject.toString());
            }
 else {
              new JsonFactory(new ObjectMapper()).createJsonGenerator(out).writeObject(valueObject);
            }
            out.write("\n====================================\n");
            versionCount++;
          }
        }
 else {
          out.write("VALUE_RESPONSE\n====================================\n");
          if (queryKeyResult.hasException()) {
            out.write(queryKeyResult.getException().toString());
          }
 else {
            out.write("null");
          }
          out.write("\n====================================\n");
        }
        out.flush();
      }
    }
  }
}
