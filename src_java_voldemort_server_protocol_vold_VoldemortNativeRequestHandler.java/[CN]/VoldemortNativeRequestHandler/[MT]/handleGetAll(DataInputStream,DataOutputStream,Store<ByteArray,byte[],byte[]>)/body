{
  long startTimeMs=-1;
  long startTimeNs=-1;
  if (logger.isDebugEnabled()) {
    startTimeMs=System.currentTimeMillis();
    startTimeNs=System.nanoTime();
  }
  int numKeys=inputStream.readInt();
  List<ByteArray> keys=new ArrayList<ByteArray>(numKeys);
  for (int i=0; i < numKeys; i++)   keys.add(readKey(inputStream));
  Map<ByteArray,byte[]> transforms=null;
  if (protocolVersion > 2) {
    if (inputStream.readBoolean()) {
      int size=inputStream.readInt();
      transforms=new HashMap<ByteArray,byte[]>(size);
      for (int i=0; i < size; i++) {
        transforms.put(readKey(inputStream),readTransforms(inputStream));
      }
    }
  }
  Map<ByteArray,List<Versioned<byte[]>>> results=null;
  try {
    results=store.getAll(keys,transforms);
    outputStream.writeShort(0);
  }
 catch (  VoldemortException e) {
    logger.error(e.getMessage());
    writeException(outputStream,e);
    return;
  }
  outputStream.writeInt(results.size());
  if (logger.isDebugEnabled())   logger.debug("GETALL start");
  for (  Map.Entry<ByteArray,List<Versioned<byte[]>>> entry : results.entrySet()) {
    outputStream.writeInt(entry.getKey().length());
    outputStream.write(entry.getKey().get());
    writeResults(outputStream,entry.getValue());
    if (logger.isDebugEnabled()) {
      debugLogReturnValue(entry.getKey(),entry.getValue(),startTimeMs,startTimeNs,"GETALL");
    }
  }
  if (logger.isDebugEnabled())   logger.debug("GETALL end");
}
