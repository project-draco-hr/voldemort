{
  checkStoreEnabled();
  StoreUtils.assertValidKeys(keys);
  Map<ByteArray,List<Versioned<byte[]>>> results=StoreUtils.newEmptyHashMap(keys);
  try {
    fileModificationLock.readLock().lock();
    List<KeyValueLocation> keysAndValueLocations=Lists.newArrayList();
    for (    ByteArray key : keys) {
      try {
        int chunk=fileSet.getChunkForKey(key.get());
        if (chunk < 0) {
          throw new IllegalStateException("Invalid chunk id returned: " + chunk);
        }
        int valueLocation=searchStrategy.indexOf(fileSet.indexFileFor(chunk),fileSet.keyToStorageFormat(key.get()),fileSet.getIndexFileSize(chunk));
        if (valueLocation >= 0)         keysAndValueLocations.add(new KeyValueLocation(chunk,key,valueLocation));
      }
 catch (      IllegalStateException e) {
        logger.warn("ChunkedFileSet.getChunkForKey() did not execute successfully for store '" + getName() + "'. Skipping key in getAll: "+ ByteUtils.toHexString(key.get()),e);
        continue;
      }
    }
    Collections.sort(keysAndValueLocations);
    for (    KeyValueLocation keyVal : keysAndValueLocations) {
      byte[] value=fileSet.readValue(keyVal.getKey().get(),keyVal.getChunk(),keyVal.getValueLocation());
      if (value.length > 0)       results.put(keyVal.getKey(),Collections.singletonList(Versioned.value(value)));
    }
    return results;
  }
  finally {
    fileModificationLock.readLock().unlock();
  }
}
