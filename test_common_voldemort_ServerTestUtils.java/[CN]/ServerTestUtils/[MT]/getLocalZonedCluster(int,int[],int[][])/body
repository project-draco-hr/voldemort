{
  if (numberOfZones < 1) {
    throw new VoldemortException("The number of zones must be positive (" + numberOfZones + ")");
  }
  if (nodesPerZone.length != numberOfZones) {
    throw new VoldemortException("Mismatch between numberOfZones (" + numberOfZones + ") and size of nodesPerZone array ("+ nodesPerZone+ ").");
  }
  int numNodes=0;
  for (  Integer nodesInZone : nodesPerZone) {
    numNodes+=nodesInZone;
  }
  if (partitionMap.length != numNodes) {
    throw new VoldemortException("Mismatch between numNodes (" + numNodes + ") and size of partitionMap array ("+ partitionMap+ ").");
  }
  List<Node> nodes=new ArrayList<Node>();
  int[] ports=findFreePorts(3 * numNodes);
  int nodeId=0;
  for (int zoneId=0; zoneId < numberOfZones; zoneId++) {
    for (int j=0; j < nodesPerZone[zoneId]; j++) {
      List<Integer> partitions=new ArrayList<Integer>(partitionMap[nodeId].length);
      for (      int p : partitionMap[nodeId]) {
        partitions.add(p);
      }
      nodes.add(new Node(nodeId,"localhost",ports[3 * nodeId],ports[3 * nodeId + 1],ports[3 * nodeId + 2],zoneId,partitions));
      nodeId++;
    }
  }
  List<Zone> zones=Lists.newArrayList();
  for (int i=0; i < numberOfZones; i++) {
    LinkedList<Integer> proximityList=Lists.newLinkedList();
    int zoneId=i + 1;
    for (int j=0; j < numberOfZones; j++) {
      proximityList.add(zoneId % numberOfZones);
      zoneId++;
    }
    zones.add(new Zone(i,proximityList));
  }
  return new Cluster("cluster",nodes,zones);
}
