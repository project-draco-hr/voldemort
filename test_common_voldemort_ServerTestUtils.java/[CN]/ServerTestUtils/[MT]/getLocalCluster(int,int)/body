{
  if (numberOfZones > 0 && numberOfNodes > 0 && numberOfNodes % numberOfZones != 0) {
    throw new VoldemortException("The number of nodes (" + numberOfNodes + ") is not divisible by number of zones ("+ numberOfZones+ ")");
  }
  int[] ports=findFreePorts(3 * numberOfNodes);
  List<Integer> partitions=Lists.newArrayList();
  for (int i=0; i < 10 * numberOfNodes; i++)   partitions.add(i);
  Collections.shuffle(partitions);
  int numberOfNodesPerZone=numberOfNodes / numberOfZones;
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < numberOfNodes; i++) {
    nodes.add(new Node(i,"localhost",ports[3 * i],ports[3 * i + 1],ports[3 * i + 2],i / numberOfNodesPerZone,partitions.subList(10 * i,10 * i + 10)));
  }
  if (numberOfZones > 1) {
    List<Zone> zones=Lists.newArrayList();
    for (int i=0; i < numberOfZones; i++) {
      LinkedList<Integer> proximityList=Lists.newLinkedList();
      int zoneId=i + 1;
      for (int j=0; j < numberOfZones; j++) {
        proximityList.add(zoneId % numberOfZones);
        zoneId++;
      }
      zones.add(new Zone(i,proximityList));
    }
    return new Cluster("cluster",nodes,zones);
  }
 else {
    return new Cluster("cluster",nodes);
  }
}
