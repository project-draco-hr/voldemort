{
  if (numberOfZones < 1) {
    throw new VoldemortException("The number of zones must be positive (" + numberOfZones + ")");
  }
  if (nodeIdsPerZone.length != numberOfZones) {
    throw new VoldemortException("Mismatch between numberOfZones (" + numberOfZones + ") and size of nodesPerZone array ("+ nodeIdsPerZone.length+ ").");
  }
  int numNodes=0;
  for (  int nodeIdsInZone[] : nodeIdsPerZone) {
    numNodes+=nodeIdsInZone.length;
  }
  if (partitionMap.length != numNodes) {
    throw new VoldemortException("Mismatch between numNodes (" + numNodes + ") and size of partitionMap array ("+ partitionMap+ ").");
  }
  List<Node> nodes=new ArrayList<Node>();
  int partitionMapOffset=0;
  for (int zoneId=0; zoneId < numberOfZones; zoneId++) {
    for (    int nodeId : nodeIdsPerZone[zoneId]) {
      List<Integer> partitions=new ArrayList<Integer>(partitionMap[nodeId].length);
      for (      int p : partitionMap[partitionMapOffset]) {
        partitions.add(p);
      }
      nodes.add(new Node(nodeId,"node-" + nodeId,64000,64001,64002,zoneId,partitions));
      partitionMapOffset++;
    }
  }
  List<Zone> zones=Lists.newArrayList();
  for (int i=0; i < numberOfZones; i++) {
    LinkedList<Integer> proximityList=Lists.newLinkedList();
    int zoneId=i + 1;
    for (int j=0; j < numberOfZones; j++) {
      proximityList.add(zoneId % numberOfZones);
      zoneId++;
    }
    zones.add(new Zone(i,proximityList));
  }
  return new Cluster("cluster",nodes,zones);
}
