{
  int numberOfZones=zoneIds.length;
  if (numberOfZones < 1) {
    throw new VoldemortException("The number of zones must be positive (" + numberOfZones + ")");
  }
  if (nodeIdsPerZone.length != numberOfZones) {
    throw new VoldemortException("Mismatch between numberOfZones (" + numberOfZones + ") and size of nodesPerZone array ("+ nodeIdsPerZone.length+ ").");
  }
  int numNodes=0;
  for (  int nodeIdsInZone[] : nodeIdsPerZone) {
    numNodes+=nodeIdsInZone.length;
  }
  if (partitionMap.length != numNodes) {
    throw new VoldemortException("Mismatch between numNodes (" + numNodes + ") and size of partitionMap array ("+ partitionMap+ ").");
  }
  List<Node> nodes=new ArrayList<Node>();
  int partitionOffset=0;
  int zoneOffset=0;
  for (  int zoneId : zoneIds) {
    for (    int nodeId : nodeIdsPerZone[zoneOffset]) {
      List<Integer> partitions=new ArrayList<Integer>(partitionMap[partitionOffset].length);
      for (      int p : partitionMap[partitionOffset]) {
        partitions.add(p);
      }
      nodes.add(new Node(nodeId,"localhost",ports[partitionOffset * 3],ports[partitionOffset * 3 + 1],ports[partitionOffset * 3 + 2],zoneId,partitions));
      partitionOffset++;
    }
    zoneOffset++;
  }
  List<Zone> zones=getZonesFromZoneIds(zoneIds);
  return new Cluster("cluster",nodes,zones);
}
