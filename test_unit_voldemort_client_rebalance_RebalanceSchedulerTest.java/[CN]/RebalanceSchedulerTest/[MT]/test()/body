{
  RebalanceScheduler mockedScheduler=Mockito.spy(scheduler);
  Cluster zzCurrent=ClusterTestUtils.getZZCluster();
  adminClient=ServerTestUtils.getAdminClient(zzCurrent);
  Map<String,List<Integer>> outerMap=new HashMap<String,List<Integer>>();
  List<Integer> someList=Arrays.asList(0,1,2);
  outerMap.put("storeA",someList);
  int stealerId=0;
  int donorId=1;
  RebalanceTaskInfo partitionsInfo=new RebalanceTaskInfo(stealerId,donorId,(HashMap<String,List<Integer>>)outerMap,zzCurrent);
  StealerBasedRebalanceTask sbTask=new StealerBasedRebalanceTask(0,0,partitionsInfo,donorPermit,adminClient,progressBar,mockedScheduler);
  sbTaskList.add(sbTask);
  sbTaskList.add(sbTask);
  sbTaskList.add(sbTask);
  sbTaskList.add(sbTask);
  sbTaskList.add(sbTask);
  mockedScheduler.initializeLatch(sbTaskList.size());
  mockedScheduler.populateTasksByStealer(sbTaskList);
  StealerBasedRebalanceTask scheduledTask=mockedScheduler.scheduleNextTask(false);
  org.junit.Assert.assertNotNull(sbTask);
  org.junit.Assert.assertEquals(sbTask,scheduledTask);
  mockedScheduler.removeNodesFromWorkerList(Arrays.asList(stealerId,donorId));
  mockedScheduler.addNodesToWorkerList(Arrays.asList(stealerId));
  mockedScheduler.removeNodesFromWorkerList(Arrays.asList(donorId));
  org.junit.Assert.assertEquals(mockedScheduler.scheduleNextTask(false),null);
  mockedScheduler.addNodesToWorkerList(Arrays.asList(donorId));
  mockedScheduler.removeNodesFromWorkerList(Arrays.asList(stealerId));
  org.junit.Assert.assertEquals(mockedScheduler.scheduleNextTask(false),null);
  mockedScheduler.addNodesToWorkerList(Arrays.asList(donorId));
  mockedScheduler.addNodesToWorkerList(Arrays.asList(stealerId));
  org.junit.Assert.assertEquals(mockedScheduler.scheduleNextTask(false),null);
  mockedScheduler.removeNodesFromWorkerList(Arrays.asList(stealerId,donorId));
  StealerBasedRebalanceTask nextscheduledTask=mockedScheduler.scheduleNextTask(false);
  org.junit.Assert.assertNotNull(sbTask);
  org.junit.Assert.assertEquals(sbTask,nextscheduledTask);
}
