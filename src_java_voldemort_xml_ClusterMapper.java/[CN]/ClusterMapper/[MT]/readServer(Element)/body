{
  int id=Integer.parseInt(server.getChildText(SERVER_ID_ELMT));
  String host=server.getChildText(HOST_ELMT);
  int httpPort=Integer.parseInt(server.getChildText(HTTP_PORT_ELMT));
  int socketPort=Integer.parseInt(server.getChildText(SOCKET_PORT_ELMT));
  int adminPort=(null != server.getChildText(ADMIN_PORT_ELMT)) ? Integer.parseInt(server.getChildText(ADMIN_PORT_ELMT)) : -1;
  int restPort=(null != server.getChildText(REST_PORT_ELMT)) ? Integer.parseInt(server.getChildText(REST_PORT_ELMT)) : -1;
  int zoneId=(null != server.getChildText(ZONE_ID_ELMT)) ? Integer.parseInt(server.getChildText(ZONE_ID_ELMT)) : Zone.DEFAULT_ZONE_ID;
  String partitionsText=server.getChildText(SERVER_PARTITIONS_ELMT).trim();
  List<Integer> partitions=new ArrayList<Integer>();
  for (  String aPartition : Utils.COMMA_SEP.split(partitionsText))   if (aPartition.trim().length() > 0) {
    Integer partition=Integer.parseInt(aPartition.trim());
    if (partition > MAX_PARTITIONID) {
      throw new SAXException("Partition id cannot be greater than " + MAX_PARTITIONID);
    }
    partitions.add(partition);
  }
  if (restPort == -1) {
    return new Node(id,host,httpPort,socketPort,adminPort,zoneId,partitions);
  }
 else {
    return new Node(id,host,httpPort,socketPort,adminPort,zoneId,partitions,restPort);
  }
}
