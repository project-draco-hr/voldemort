{
  CompositeVoldemortRequest<ByteArray,byte[]> requestWrapper=null;
  long operationTimeoutInMs=1500;
  boolean resolveConflicts=true;
  String timeoutValStr=this.request.getHeader(X_VOLD_REQUEST_TIMEOUT_MS);
  if (timeoutValStr != null) {
    try {
      Long.parseLong(timeoutValStr);
    }
 catch (    NumberFormatException nfe) {
      handleBadRequest(e,"Incorrect timeout parameter. Cannot parse this to long: " + timeoutValStr + ". Details: "+ nfe.getMessage());
      return null;
    }
  }
  String inconsistencyResolverOption=this.request.getHeader(X_VOLD_INCONSISTENCY_RESOLVER);
  if (inconsistencyResolverOption != null) {
    if (inconsistencyResolverOption.equalsIgnoreCase(CUSTOM_RESOLVING_STRATEGY)) {
      resolveConflicts=false;
    }
 else     if (!inconsistencyResolverOption.equalsIgnoreCase(DEFAULT_RESOLVING_STRATEGY)) {
      handleBadRequest(e,"Invalid Inconsistency Resolving strategy specified in the Request : " + inconsistencyResolverOption);
      return null;
    }
  }
  List<ByteArray> keyList=readKey(requestURI);
  if (keyList == null) {
    handleBadRequest(e,"Error: No key specified !");
    return null;
  }
  byte operationType=getOperationType(httpMethod,keyList);
switch (operationType) {
case VoldemortOpCode.GET_OP_CODE:
    requestWrapper=new CompositeGetVoldemortRequest<ByteArray,byte[]>(keyList.get(0),operationTimeoutInMs,resolveConflicts);
  break;
case VoldemortOpCode.GET_ALL_OP_CODE:
requestWrapper=new CompositeGetAllVoldemortRequest<ByteArray,byte[]>(keyList,operationTimeoutInMs,resolveConflicts);
break;
case VoldemortOpCode.PUT_OP_CODE:
ChannelBuffer content=request.getContent();
if (!content.readable()) {
handleBadRequest(e,"Contents not readable");
return null;
}
ByteArray putKey=null;
if (keyList.size() == 1) {
putKey=keyList.get(0);
}
 else {
handleBadRequest(e,"Cannot have multiple keys in a put operation");
return null;
}
byte[] putValue=readValue(content);
requestWrapper=new CompositePutVoldemortRequest<ByteArray,byte[]>(putKey,putValue,operationTimeoutInMs);
break;
case VoldemortOpCode.DELETE_OP_CODE:
VectorClock vc=getVectorClock(this.request.getHeader(X_VOLD_VECTOR_CLOCK));
requestWrapper=new CompositeDeleteVoldemortRequest<ByteArray,byte[]>(keyList.get(0),vc,operationTimeoutInMs);
break;
default :
handleBadRequest(e,"Illegal Operation.");
return null;
}
return requestWrapper;
}
