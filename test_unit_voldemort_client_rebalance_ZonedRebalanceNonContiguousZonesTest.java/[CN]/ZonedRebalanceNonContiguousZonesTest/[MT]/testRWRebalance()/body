{
  logger.info("Starting testRWRebalance");
  try {
    int zoneIds[]=new int[]{1,3};
    int nodesPerZone[][]=new int[][]{{3,4},{9,10}};
    int partitionMap[][]=new int[][]{{0,2,4,6},{},{1,3,5,7},{}};
    Cluster currentCluster=ServerTestUtils.getLocalNonContiguousZonedCluster(zoneIds,nodesPerZone,partitionMap,ClusterTestUtils.getClusterPorts());
    Cluster finalCluster=UpdateClusterUtils.createUpdatedCluster(currentCluster,10,Lists.newArrayList(2,6));
    finalCluster=UpdateClusterUtils.createUpdatedCluster(finalCluster,4,Lists.newArrayList(3,7));
    List<Integer> serverList=Arrays.asList(3,4,9,10);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("admin.max.threads","5");
    currentCluster=startServers(currentCluster,storeDefFileWithoutReplication,serverList,configProps);
    String bootstrapUrl=getBootstrapUrl(currentCluster,3);
    ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,finalCluster);
    try {
      populateData(currentCluster,rwStoreDefWithoutReplication);
      rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(4,9));
      checkConsistentMetadata(finalCluster,serverList);
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRWRebalance ",ae);
    throw ae;
  }
}
