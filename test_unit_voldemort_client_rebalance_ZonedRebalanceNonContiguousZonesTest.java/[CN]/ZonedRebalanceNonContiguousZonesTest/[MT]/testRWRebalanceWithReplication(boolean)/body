{
  logger.info("Starting testRWRebalanceWithReplication");
  int zoneIds[]=new int[]{1,3};
  int nodesPerZone[][]=new int[][]{{3,4},{9,10}};
  int partitionMap[][]=new int[][]{{0,2,4},{6},{1,3,5},{7}};
  Cluster currentCluster=ServerTestUtils.getLocalNonContiguousZonedCluster(zoneIds,nodesPerZone,partitionMap,ClusterTestUtils.getClusterPorts());
  Cluster finalCluster=UpdateClusterUtils.createUpdatedCluster(currentCluster,10,Lists.newArrayList(2));
  finalCluster=UpdateClusterUtils.createUpdatedCluster(finalCluster,4,Lists.newArrayList(3));
  List<Integer> serverList=Arrays.asList(3,4,9,10);
  Map<String,String> configProps=new HashMap<String,String>();
  configProps.put("admin.max.threads","5");
  if (serial) {
    configProps.put("max.parallel.stores.rebalancing",String.valueOf(1));
  }
  currentCluster=startServers(currentCluster,storeDefFileWithReplication,serverList,configProps);
  String bootstrapUrl=getBootstrapUrl(currentCluster,3);
  int maxParallel=5;
  ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,maxParallel,finalCluster);
  try {
    populateData(currentCluster,rwStoreDefWithReplication);
    rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(3,4,9,10));
    checkConsistentMetadata(finalCluster,serverList);
  }
  finally {
    stopServer(serverList);
  }
}
