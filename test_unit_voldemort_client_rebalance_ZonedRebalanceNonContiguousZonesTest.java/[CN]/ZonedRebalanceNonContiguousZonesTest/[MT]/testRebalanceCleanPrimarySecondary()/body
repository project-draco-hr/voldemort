{
  logger.info("Starting testRebalanceCleanPrimary");
  try {
    int zoneIds[]=new int[]{1,3};
    int nodesPerZone[][]=new int[][]{{3,4,5},{9,10,11}};
    int partitionMap[][]=new int[][]{{0},{1,6},{2},{3},{4,7},{5}};
    Cluster currentCluster=ServerTestUtils.getLocalNonContiguousZonedCluster(zoneIds,nodesPerZone,partitionMap,ClusterTestUtils.getClusterPorts());
    Cluster finalCluster=UpdateClusterUtils.createUpdatedCluster(currentCluster,5,Lists.newArrayList(7));
    finalCluster=UpdateClusterUtils.createUpdatedCluster(finalCluster,11,Lists.newArrayList(6));
    List<Integer> serverList=Arrays.asList(3,4,5,9,10,11);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("enable.repair","true");
    currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
    String bootstrapUrl=getBootstrapUrl(currentCluster,3);
    ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,finalCluster);
    try {
      populateData(currentCluster,rwStoreDefWithReplication);
      AdminClient admin=rebalanceKit.controller.getAdminClient();
      List<ByteArray> p6KeySamples=sampleKeysFromPartition(admin,4,rwStoreDefWithReplication.getName(),Arrays.asList(6),20);
      List<ByteArray> p1KeySamples=sampleKeysFromPartition(admin,4,rwStoreDefWithReplication.getName(),Arrays.asList(1),20);
      List<ByteArray> p3KeySamples=sampleKeysFromPartition(admin,3,rwStoreDefWithReplication.getName(),Arrays.asList(3),20);
      List<ByteArray> p2KeySamples=sampleKeysFromPartition(admin,4,rwStoreDefWithReplication.getName(),Arrays.asList(2),20);
      List<ByteArray> p7KeySamples=sampleKeysFromPartition(admin,10,rwStoreDefWithReplication.getName(),Arrays.asList(7),20);
      rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(3,4,5,9));
      checkConsistentMetadata(finalCluster,serverList);
      for (int i=0; i < 6; i++) {
        admin.storeMntOps.repairJob(serverList.get(i));
      }
      for (int i=0; i < 6; i++) {
        ServerTestUtils.waitForAsyncOperationOnServer(serverMap.get(serverList.get(i)),"Repair",5000);
      }
      checkForKeyExistence(admin,5,rwStoreDefWithReplication.getName(),p6KeySamples);
      checkForKeyExistence(admin,3,rwStoreDefWithReplication.getName(),p2KeySamples);
      checkForKeyExistence(admin,4,rwStoreDefWithReplication.getName(),p1KeySamples);
      checkForKeyExistence(admin,3,rwStoreDefWithReplication.getName(),p3KeySamples);
      checkForKeyExistence(admin,10,rwStoreDefWithReplication.getName(),p7KeySamples);
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRebalanceCleanPrimarySecondary ",ae);
    throw ae;
  }
}
