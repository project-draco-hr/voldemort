{
  LaunchConfiguration launchConfiguration=new LaunchConfiguration(ami);
  launchConfiguration.setInstanceType(InstanceType.valueOf(instanceType.name()));
  launchConfiguration.setKeyName(keypairId);
  launchConfiguration.setMinCount(instanceCount);
  launchConfiguration.setMaxCount(instanceCount);
  ReservationDescription reservationDescription=ec2.runInstances(launchConfiguration);
  List<String> instanceIds=new ArrayList<String>();
  for (  ReservationDescription.Instance instance : reservationDescription.getInstances()) {
    String instanceId=instance.getInstanceId();
    if (logger.isInfoEnabled())     logger.info("Instance " + instanceId + " launched");
    instanceIds.add(instanceId);
    if (listener != null)     listener.instanceCreated(instanceId);
  }
  List<HostNamePair> hostNamePairs=new ArrayList<HostNamePair>();
  while (!instanceIds.isEmpty()) {
    try {
      if (logger.isDebugEnabled())       logger.debug("Sleeping for " + POLL_INTERVAL + " seconds...");
      Thread.sleep(POLL_INTERVAL * 1000);
    }
 catch (    InterruptedException e) {
      break;
    }
    for (    ReservationDescription res : ec2.describeInstances(instanceIds)) {
      if (res.getInstances() != null) {
        for (        Instance instance : res.getInstances()) {
          String state=String.valueOf(instance.getState()).toLowerCase();
          if (!state.equals("running")) {
            if (logger.isDebugEnabled())             logger.debug("Instance " + instance.getInstanceId() + " in state: "+ state);
            continue;
          }
          HostNamePair hostNamePair=getHostNamePair(instance);
          if (hostNamePair == null) {
            if (logger.isWarnEnabled())             logger.warn("Instance " + instance.getInstanceId() + " in running state, but missing external and/or internal host name");
            continue;
          }
          hostNamePairs.add(hostNamePair);
          if (logger.isInfoEnabled())           logger.info("Instance " + instance.getInstanceId() + " running with external host name: "+ hostNamePair.getExternalHostName()+ ", internal host name: "+ hostNamePair.getInternalHostName());
          instanceIds.remove(instance.getInstanceId());
        }
      }
    }
  }
  return hostNamePairs;
}
