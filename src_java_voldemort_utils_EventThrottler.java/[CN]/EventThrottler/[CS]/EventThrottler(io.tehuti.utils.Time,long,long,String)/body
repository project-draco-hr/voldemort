{
  this.maxRatePerSecond=maxRatePerSecond;
  if (maxRatePerSecond > 0) {
    this.time=Utils.notNull(time);
    if (intervalMs <= 0) {
      throw new IllegalArgumentException("intervalMs must be a positive number.");
    }
    this.rateConfig=new MetricConfig().timeWindow(intervalMs,TimeUnit.MILLISECONDS).quota(Quota.lessThan(maxRatePerSecond));
    this.rate=new Rate(TimeUnit.SECONDS);
    if (throttlerName == null) {
      this.metricsRepository=new MetricsRepository(time);
      this.rateSensor=metricsRepository.sensor(THROTTLER_NAME,rateConfig);
      rateSensor.add(THROTTLER_NAME + ".rate",rate,rateConfig);
    }
 else {
      this.metricsRepository=sharedMetricsRepository;
synchronized (sharedMetricsRepository) {
        Sensor existingSensor=sharedMetricsRepository.getSensor(throttlerName);
        if (existingSensor != null) {
          this.rateSensor=existingSensor;
        }
 else {
          this.rateSensor=sharedMetricsRepository.sensor(throttlerName);
          this.rateSensor.add(throttlerName + ".rate",rate,rateConfig);
        }
      }
    }
  }
 else {
    this.time=null;
    this.metricsRepository=null;
    this.rate=null;
    this.rateSensor=null;
    this.rateConfig=null;
  }
  if (logger.isDebugEnabled())   logger.debug("EventThrottler constructed with maxRatePerSecond = " + maxRatePerSecond);
}
