{
  if (entriesPartitionIterator == null) {
    if (currentIndex == partitionList.size() || counter >= recordsPerPartition) {
      logger.info("Done fetching  store " + storageEngine.getName() + " : "+ counter+ " records processed.");
      return StreamRequestHandlerState.COMPLETE;
    }
    boolean found=false;
    while (!found && (currentIndex < partitionList.size())) {
      Integer currentPartition=partitionList.get(currentIndex);
      Integer currentReplicaType=replicaTypeList.get(currentIndex);
      if (!fetchedPartitions.contains(currentPartition) && StoreInstance.checkPartitionBelongsToNode(currentPartition,currentReplicaType,nodeId,initialCluster,storeDef)) {
        fetchedPartitions.add(currentPartition);
        found=true;
        logger.info("Fetching [partition: " + currentPartition + ", replica type:"+ currentReplicaType+ "] for store "+ storageEngine.getName());
        entriesPartitionIterator=storageEngine.entries(currentPartition);
      }
      currentIndex++;
    }
  }
 else {
    long startNs=System.nanoTime();
    if (entriesPartitionIterator.hasNext()) {
      counter++;
      Pair<ByteArray,Versioned<byte[]>> entry=entriesPartitionIterator.next();
      if (streamStats != null) {
        streamStats.reportStorageTime(operation,System.nanoTime() - startNs);
        streamStats.reportStreamingScan(operation);
      }
      ByteArray key=entry.getFirst();
      Versioned<byte[]> value=entry.getSecond();
      throttler.maybeThrottle(key.length());
      if (filter.accept(key,value)) {
        fetched++;
        if (streamStats != null)         streamStats.reportStreamingFetch(operation);
        VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
        VAdminProto.PartitionEntry partitionEntry=VAdminProto.PartitionEntry.newBuilder().setKey(ProtoUtils.encodeBytes(key)).setVersioned(ProtoUtils.encodeVersioned(value)).build();
        response.setPartitionEntry(partitionEntry);
        Message message=response.build();
        startNs=System.nanoTime();
        ProtoUtils.writeMessage(outputStream,message);
        if (streamStats != null)         streamStats.reportNetworkTime(operation,System.nanoTime() - startNs);
        throttler.maybeThrottle(AdminServiceRequestHandler.valueSize(value));
      }
      if (0 == counter % STAT_RECORDS_INTERVAL) {
        long totalTime=(System.currentTimeMillis() - startTime) / Time.MS_PER_SECOND;
        logger.info("Fetch entries scanned " + counter + " entries, fetched "+ fetched+ " entries for store '"+ storageEngine.getName()+ "' replicaToPartitionList:"+ replicaToPartitionList+ " in "+ totalTime+ " s");
      }
    }
    if (!entriesPartitionIterator.hasNext() || counter >= recordsPerPartition) {
      entriesPartitionIterator.close();
      entriesPartitionIterator=null;
    }
  }
  return StreamRequestHandlerState.WRITING;
}
