{
  if (entriesPartitionIterator == null) {
    if (currentIndex == partitionList.size()) {
      stats.closeHandle(handle);
      return StreamRequestHandlerState.COMPLETE;
    }
    boolean found=false;
    while (!found && (currentIndex < partitionList.size())) {
      Integer currentPartition=partitionList.get(currentIndex);
      Integer currentReplicaType=replicaTypeList.get(currentIndex);
      if (!fetchedPartitions.contains(currentPartition) && RebalanceUtils.checkPartitionBelongsToNode(currentPartition,currentReplicaType,nodeId,initialCluster,storeDef)) {
        fetchedPartitions.add(currentPartition);
        found=true;
        logger.info("Fetching [partition: " + currentPartition + ", replica type:"+ currentReplicaType+ "] for store "+ storageEngine.getName());
        entriesPartitionIterator=storageEngine.entries(currentPartition.shortValue());
      }
      currentIndex++;
    }
  }
 else {
    long startNs=System.nanoTime();
    if (entriesPartitionIterator.hasNext()) {
      counter++;
      if (counter % skipRecords == 0) {
        Pair<ByteArray,Versioned<byte[]>> entry=entriesPartitionIterator.next();
        stats.recordDiskTime(handle,System.nanoTime() - startNs);
        ByteArray key=entry.getFirst();
        Versioned<byte[]> value=entry.getSecond();
        throttler.maybeThrottle(key.length());
        if (filter.accept(key,value)) {
          fetched++;
          handle.incrementEntriesScanned();
          VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
          VAdminProto.PartitionEntry partitionEntry=VAdminProto.PartitionEntry.newBuilder().setKey(ProtoUtils.encodeBytes(key)).setVersioned(ProtoUtils.encodeVersioned(value)).build();
          response.setPartitionEntry(partitionEntry);
          Message message=response.build();
          startNs=System.nanoTime();
          ProtoUtils.writeMessage(outputStream,message);
          stats.recordNetworkTime(handle,System.nanoTime() - startNs);
          throttler.maybeThrottle(AdminServiceRequestHandler.valueSize(value));
        }
      }
 else {
        stats.recordDiskTime(handle,System.nanoTime() - startNs);
      }
      if (0 == counter % 100000) {
        long totalTime=(System.currentTimeMillis() - startTime) / 1000;
        logger.info("Fetch entries scanned " + counter + " entries, fetched "+ fetched+ " entries for store '"+ storageEngine.getName()+ "' replicaToPartitionList:"+ replicaToPartitionList+ " in "+ totalTime+ " s");
      }
    }
    if (!entriesPartitionIterator.hasNext()) {
      entriesPartitionIterator.close();
      entriesPartitionIterator=null;
    }
  }
  return StreamRequestHandlerState.WRITING;
}
