{
  this.data=new HashMap<String,String>(TEST_SIZE);
  for (int i=0; i < TEST_SIZE; i++)   this.data.put(TestUtils.randomLetters(10),TestUtils.randomLetters(10));
  File dataFile=File.createTempFile("test",".txt");
  dataFile.deleteOnExit();
  BufferedWriter writer=new BufferedWriter(new FileWriter(dataFile));
  for (  Map.Entry<String,String> entry : this.data.entrySet())   writer.write("\"" + entry.getKey() + "\"\t\""+ entry.getValue()+ "\"\n");
  writer.close();
  BufferedReader reader=new BufferedReader(new FileReader(dataFile));
  JsonReader jsonReader=new JsonReader(reader);
  Cluster cluster=new Cluster("test",Collections.singletonList(new Node(0,"localhost",8080,6666,Arrays.asList(0,1,2,3,4))));
  SerializerDefinition serDef=new SerializerDefinition("json","'string'");
  StoreDefinition storeDef=new StoreDefinition("test",StorageEngineType.READONLY,serDef,serDef,RoutingTier.CLIENT,1,1,1,1,1,1);
  RoutingStrategy router=new ConsistentRoutingStrategy(cluster.getNodes(),1);
  this.dataDir=TestUtils.getTempDirectory();
  JsonStoreBuilder storeBuilder=new JsonStoreBuilder(jsonReader,cluster,storeDef,router,dataDir,100,1);
  storeBuilder.build();
  new File(dataDir,"0.index").renameTo(new File(dataDir,"test.index"));
  new File(dataDir,"0.data").renameTo(new File(dataDir,"test.data"));
  @SuppressWarnings("unchecked") Serializer<Object> serializer=(Serializer<Object>)new DefaultSerializerFactory().getSerializer(serDef);
  this.store=new SerializingStore<Object,Object>(new RandomAccessFileStore("test",this.dataDir,1,3,1000,100 * 1000 * 1000),serializer,serializer);
}
