{
  if (!metadataStore.getServerStateUnlocked().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
    logger.error("Cannot run repair job since Voldemort server is not in normal state");
    return;
  }
  ClosableIterator<Pair<ByteArray,Versioned<byte[]>>> iterator=null;
  Date startTime=new Date();
  logger.info("Started repair job at " + startTime);
  Map<String,Long> localStats=Maps.newHashMap();
  for (  StoreDefinition storeDef : metadataStore.getStoreDefList()) {
    localStats.put(storeDef.getName(),0L);
  }
  if (!acquireRepairPermit())   return;
  try {
    RoutingStrategyFactory routingStrategyFactory=new RoutingStrategyFactory();
    for (    StoreDefinition storeDef : metadataStore.getStoreDefList()) {
      if (isWritableStore(storeDef)) {
        logger.info("Repairing store " + storeDef.getName());
        StorageEngine<ByteArray,byte[],byte[]> engine=storeRepo.getStorageEngine(storeDef.getName());
        iterator=engine.entries();
        RoutingStrategy routingStrategy=routingStrategyFactory.updateRoutingStrategy(storeDef,metadataStore.getCluster());
        long repairSlops=0L;
        long numDeletedKeys=0;
        while (iterator.hasNext()) {
          Pair<ByteArray,Versioned<byte[]>> keyAndVal=iterator.next();
          List<Node> nodes=routingStrategy.routeRequest(keyAndVal.getFirst().get());
          if (!hasDestination(nodes)) {
            engine.delete(keyAndVal.getFirst(),keyAndVal.getSecond().getVersion());
            numDeletedKeys=this.deleteProgress.incrementAndGet();
          }
          long itemsScanned=this.scanProgress.incrementAndGet();
          if (itemsScanned % deleteBatchSize == 0)           logger.info("#Scanned:" + itemsScanned + " #Deleted:"+ numDeletedKeys);
        }
        closeIterator(iterator);
        localStats.put(storeDef.getName(),repairSlops);
        logger.info("Completed store " + storeDef.getName() + " #Scanned:"+ this.scanProgress.get()+ " #Deleted:"+ this.deleteProgress.get());
      }
    }
  }
 catch (  Exception e) {
    logger.error(e,e);
  }
 finally {
    closeIterator(iterator);
    this.repairPermits.release(this.getClass().getCanonicalName());
synchronized (this) {
      totalEntriesScanned+=scanProgress.get();
      scanProgress.set(0);
      totalEntriesDeleted+=deleteProgress.get();
      deleteProgress.set(0);
    }
    logger.info("Completed repair job started at " + startTime);
  }
}
