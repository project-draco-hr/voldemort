{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print usage information");
  parser.accepts("threads","number of threads").withRequiredArg().ofType(Integer.class);
  parser.accepts("requests","[REQUIRED] number of requests").withRequiredArg().ofType(Integer.class);
  parser.accepts("store-dir","[REQUIRED] store directory").withRequiredArg().describedAs("directory");
  parser.accepts("request-file","file get request ids from").withRequiredArg();
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"requests","store-dir");
  if (missing.size() > 0) {
    System.err.println("Missing required arguments: " + Join.join(", ",missing));
    parser.printHelpOn(System.err);
    System.exit(1);
  }
  final int numThreads=CmdUtils.valueOf(options,"threads",10);
  final int numRequests=(Integer)options.valueOf("requests");
  final String inputFile=(String)options.valueOf("request-file");
  String storeDir=(String)options.valueOf("store-dir");
  final Store<ByteArray,byte[]> store=new ReadOnlyStorageEngine("test",new File(storeDir),0,numThreads,10000L);
  final AtomicInteger obsoletes=new AtomicInteger(0);
  final AtomicInteger nullResults=new AtomicInteger(0);
  final AtomicInteger totalResults=new AtomicInteger(0);
  final BlockingQueue<String> requestIds=new ArrayBlockingQueue<String>(20000);
  final Executor executor=Executors.newFixedThreadPool(1);
  Runnable requestGenerator;
  if (inputFile == null) {
    requestGenerator=new Runnable(){
      public void run(){
        System.out.println("Generating random requests.");
        Random random=new Random();
        try {
          while (true)           requestIds.put(Integer.toString(random.nextInt(numRequests)));
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
;
  }
 else {
    requestGenerator=new Runnable(){
      public void run(){
        try {
          System.out.println("Using request file to generate requests.");
          BufferedReader reader=new BufferedReader(new FileReader(inputFile),1000000);
          while (true) {
            String line=reader.readLine();
            if (line == null)             return;
            requestIds.put(line.trim());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
  }
  executor.execute(requestGenerator);
  final Serializer<Object> keySerializer=new JsonTypeSerializer(JsonTypeDefinition.fromJson("'string'"),true);
  final AtomicInteger current=new AtomicInteger();
  PerformanceTest readWriteTest=new PerformanceTest(){
    @Override public void doOperation(    int index) throws Exception {
      try {
        totalResults.incrementAndGet();
        int curr=current.getAndIncrement();
        List<Versioned<byte[]>> results=store.get(new ByteArray(keySerializer.toBytes(requestIds.take())));
        if (curr % 10000 == 0)         System.out.println(curr);
        if (results.size() == 0)         nullResults.incrementAndGet();
      }
 catch (      ObsoleteVersionException e) {
        obsoletes.incrementAndGet();
      }
    }
  }
;
  readWriteTest.run(numRequests,numThreads);
  System.out.println("Random Access Read Only store Results:");
  System.out.println("Null reads ratio:" + (nullResults.doubleValue()) / totalResults.doubleValue());
  readWriteTest.printStats();
  System.exit(0);
}
