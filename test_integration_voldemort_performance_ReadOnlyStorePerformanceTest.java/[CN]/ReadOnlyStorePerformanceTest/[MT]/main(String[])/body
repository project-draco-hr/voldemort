{
  if (args.length != 4)   Utils.croak("USAGE: java " + ReadOnlyStorePerformanceTest.class.getName() + " num-threads num-requests server-properties-file storeName");
  int numThreads=Integer.parseInt(args[0]);
  int numRequests=Integer.parseInt(args[1]);
  String serverPropsFile=args[2];
  String storeName=args[3];
  final VoldemortConfig voldemortConfig=new VoldemortConfig(new Props(new File(serverPropsFile)));
  final Store<ByteArray,byte[]> store=new RandomAccessFileStorageConfiguration(voldemortConfig).getStore(storeName);
  File storeFile=new File(voldemortConfig.getMetadataDirectory() + File.separatorChar + "stores.xml");
  final List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new java.io.FileReader(storeFile));
  final AtomicInteger obsoletes=new AtomicInteger(0);
  final AtomicInteger nullResults=new AtomicInteger(0);
  final AtomicInteger totalResults=new AtomicInteger(0);
  int storeIndex=-1;
  boolean found=false;
  for (  StoreDefinition def : storeDefs) {
    storeIndex++;
    if (def.getName().equals(storeName)) {
      found=true;
      break;
    }
  }
  if (!found) {
    Utils.croak("Store should be present in StoreList");
  }
  final Serializer keySerializer=new DefaultSerializerFactory().getSerializer(storeDefs.get(storeIndex).getKeySerializer());
  PerformanceTest readWriteTest=new PerformanceTest(){
    private final int MaxMemberID=(35 * 1000 * 1000);
    @Override public void doOperation(    int index) throws Exception {
      try {
        Integer memberId=new Integer((int)(Math.random() * MaxMemberID));
        totalResults.incrementAndGet();
        List<Versioned<byte[]>> results=store.get(new ByteArray(keySerializer.toBytes(memberId)));
        if (results.size() == 0)         nullResults.incrementAndGet();
      }
 catch (      ObsoleteVersionException e) {
        obsoletes.incrementAndGet();
      }
    }
  }
;
  readWriteTest.run(numRequests,numThreads);
  System.out.println("Random Access Read Only store Results:");
  System.out.println("null Reads ratio:" + (nullResults.doubleValue()) / totalResults.doubleValue());
  readWriteTest.printStats();
}
