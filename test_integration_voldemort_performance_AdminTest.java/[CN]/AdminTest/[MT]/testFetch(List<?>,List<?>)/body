{
  final SetMultimap<Integer,Integer> nodePartitions=HashMultimap.create();
  if (optPartitions != null && optNodes != null) {
    for (    Object node : optNodes) {
      for (      Object partition : optPartitions)       nodePartitions.put((Integer)node,(Integer)partition);
    }
  }
 else   if (optPartitions != null) {
    for (    Object partition : optPartitions) {
      for (      Integer node : getNodes((Integer)partition)) {
        nodePartitions.put(node,(Integer)partition);
      }
    }
  }
 else   if (optNodes != null) {
    for (    Object node : optNodes) {
      nodePartitions.putAll((Integer)node,getPartitions((Integer)node));
    }
  }
 else   throw new IllegalStateException();
  for (  final Integer node : nodePartitions.keySet()) {
    System.out.println("Testing fetch of node " + node + " partitions "+ nodePartitions.get(node)+ ": \n");
    measureFunction(new Measurable(){
      public long apply(){
        long i=0;
        Iterator<Pair<ByteArray,Versioned<byte[]>>> result=adminClient.doFetchPartitionEntries(node,storeName,new ArrayList<Integer>(nodePartitions.get(node)),null);
        while (result.hasNext()) {
          i++;
          result.next();
        }
        return i;
      }
    }
,1);
  }
}
