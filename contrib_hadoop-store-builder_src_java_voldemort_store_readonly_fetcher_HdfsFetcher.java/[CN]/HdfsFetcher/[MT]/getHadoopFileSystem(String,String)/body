{
  final Configuration config=getConfiguration(sourceFileUrl,hadoopConfigPath);
  final Path path=new Path(sourceFileUrl);
  boolean isHftpBasedFetch=isHftpBasedPath(sourceFileUrl);
  FileSystem fs=null;
  if (HdfsFetcher.keytabPath.length() > 0 && !isHftpBasedFetch) {
    for (int attempt=0; attempt < maxAttempts; attempt++) {
      boolean isValidFilesystem=false;
      if (!new File(HdfsFetcher.keytabPath).exists()) {
        logger.error("Invalid keytab file path. Please provide a valid keytab path");
        throw new VoldemortException("Error in getting Hadoop filesystem. Invalid keytab file path.");
      }
synchronized (this) {
        UserGroupInformation.setConfiguration(config);
        UserGroupInformation.loginUserFromKeytab(HdfsFetcher.kerberosPrincipal,HdfsFetcher.keytabPath);
        try {
          logger.info("I've logged in and am now Doasing as " + UserGroupInformation.getCurrentUser().getUserName());
          fs=UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<FileSystem>(){
            @Override public FileSystem run() throws Exception {
              FileSystem fs=path.getFileSystem(config);
              return fs;
            }
          }
);
          isValidFilesystem=true;
        }
 catch (        InterruptedException e) {
          logger.error(e.getMessage(),e);
        }
catch (        Exception e) {
          logger.error("Got an exception while getting the filesystem object: ");
          logger.error("Exception class : " + e.getClass());
          e.printStackTrace();
          for (          StackTraceElement et : e.getStackTrace()) {
            logger.error(et.toString());
          }
        }
      }
      if (isValidFilesystem) {
        break;
      }
 else       if (attempt < maxAttempts - 1) {
        logger.error("Attempt#" + attempt + " Could not get a valid Filesystem object. Trying again in "+ retryDelayMs+ " ms");
        sleepForRetryDelayMs();
      }
    }
  }
 else {
    fs=path.getFileSystem(config);
  }
  return fs;
}
