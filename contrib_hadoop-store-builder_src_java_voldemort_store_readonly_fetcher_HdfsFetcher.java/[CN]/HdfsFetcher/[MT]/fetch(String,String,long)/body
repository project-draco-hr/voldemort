{
  ObjectName jmxName=null;
  HdfsCopyStats stats=null;
  FileSystem fs=null;
  try {
    fs=HadoopUtils.getHadoopFileSystem(voldemortConfig,source);
    final Path path=new Path(source);
    File destination=new File(dest);
    if (destination.exists()) {
      throw new VoldemortException("Version directory " + destination.getAbsolutePath() + " already exists");
    }
    boolean isFile=fs.isFile(path);
    stats=new HdfsCopyStats(source,destination,enableStatsFile,maxVersionsStatsFile,isFile,new HdfsPathInfo(fs,path));
    jmxName=JmxUtils.registerMbean("hdfs-copy-" + copyCount.getAndIncrement(),stats);
    logger.info("Starting fetch for : " + source);
    boolean result=fetch(fs,path,destination,null,stats,null,-1,diskQuotaSizeInKB);
    logger.info("Completed fetch : " + source);
    if (result) {
      return destination;
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    if (stats != null) {
      stats.reportError("File fetcher failed for destination " + dest,e);
    }
    String errorMessage="Error thrown while trying to get data from Hadoop filesystem : ";
    logger.error(errorMessage,e);
    if (e instanceof VoldemortException) {
      throw e;
    }
 else {
      throw new VoldemortException(errorMessage,e);
    }
  }
 finally {
    if (jmxName != null)     JmxUtils.unregisterMbean(jmxName);
    if (stats != null) {
      stats.complete();
    }
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      IOException e) {
        String errorMessage="Got IOException while trying to close the filesystem instance (harmless).";
        if (stats != null) {
          stats.reportError(errorMessage,e);
        }
        logger.info(errorMessage,e);
      }
    }
  }
}
