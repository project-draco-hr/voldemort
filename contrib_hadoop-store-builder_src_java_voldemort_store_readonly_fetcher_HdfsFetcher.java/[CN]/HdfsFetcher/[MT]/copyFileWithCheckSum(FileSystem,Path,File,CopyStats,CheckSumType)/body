{
  CheckSum fileCheckSumGenerator=null;
  logger.debug("Starting copy of " + source + " to "+ dest);
  FSDataInputStream input=null;
  OutputStream output=null;
  for (int attempt=0; attempt < maxAttempts; attempt++) {
    boolean success=true;
    try {
      if (checkSumType != null) {
        fileCheckSumGenerator=CheckSum.getInstance(checkSumType);
      }
      logger.info("Attempt " + attempt + " at copy of "+ source+ " to "+ dest);
      input=fs.open(source);
      output=new BufferedOutputStream(new FileOutputStream(dest));
      byte[] buffer=new byte[bufferSize];
      while (true) {
        int read=input.read(buffer);
        if (read < 0) {
          break;
        }
 else {
          output.write(buffer,0,read);
        }
        if (fileCheckSumGenerator != null) {
          fileCheckSumGenerator.update(buffer,0,read);
        }
        if (throttler != null) {
          throttler.maybeThrottle(read);
        }
        stats.recordBytes(read);
        if (stats.getBytesSinceLastReport() > reportingIntervalBytes) {
          NumberFormat format=NumberFormat.getNumberInstance();
          format.setMaximumFractionDigits(2);
          logger.info(stats.getTotalBytesCopied() / (1024 * 1024) + " MB copied at " + format.format(stats.getBytesPerSecond() / (1024 * 1024)) + " MB/sec - " + format.format(stats.getPercentCopied()) + " % complete, destination:" + dest);
          if (this.status != null) {
            this.status.setStatus(stats.getTotalBytesCopied() / (1024 * 1024) + " MB copied at " + format.format(stats.getBytesPerSecond() / (1024 * 1024)) + " MB/sec - " + format.format(stats.getPercentCopied()) + " % complete, destination:" + dest);
          }
          stats.reset();
        }
      }
      logger.info("Completed copy of " + source + " to "+ dest);
    }
 catch (    Throwable te) {
      success=false;
      logger.error("Error during copying file ",te);
      te.printStackTrace();
      if (attempt < maxAttempts - 1) {
        logger.info("Will retry copying after " + retryDelayMs + " ms");
        sleepForRetryDelayMs();
      }
 else {
        logger.info("Fetcher giving up copy after " + maxAttempts + " attempts");
        throw te;
      }
    }
 finally {
      IOUtils.closeQuietly(output);
      IOUtils.closeQuietly(input);
      if (success) {
        break;
      }
    }
    logger.debug("Completed copy of " + source + " to "+ dest);
  }
  return fileCheckSumGenerator;
}
