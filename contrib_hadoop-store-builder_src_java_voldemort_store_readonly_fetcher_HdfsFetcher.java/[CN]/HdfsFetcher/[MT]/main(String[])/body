{
  if (args.length < 1)   Utils.croak("USAGE: java " + HdfsFetcher.class.getName() + " url [keytab location] [kerberos username]");
  String url=args[0];
  String keytabLocation="";
  String proxyUser="";
  if (args.length >= 3) {
    keytabLocation=args[1];
    proxyUser=args[2];
  }
  long maxBytesPerSec=1024 * 1024 * 1024;
  Path p=new Path(url);
  final Configuration config=new Configuration();
  final URI uri=new URI(url);
  config.setInt("io.file.buffer.size",VoldemortConfig.DEFAULT_BUFFER_SIZE);
  config.set("hadoop.rpc.socket.factory.class.ClientProtocol",ConfigurableSocketFactory.class.getName());
  config.setInt("io.socket.receive.buffer",1 * 1024 * 1024 - 10000);
  FileSystem fs=null;
  if (keytabLocation.length() > 0) {
    logger.debug("keytab path = " + keytabLocation + " and proxy user = "+ proxyUser);
    UserGroupInformation.loginUserFromKeytab(proxyUser,keytabLocation);
    logger.debug("I've logged in and am now Doasing as " + UserGroupInformation.getCurrentUser().getUserName());
    try {
      fs=UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<FileSystem>(){
        public FileSystem run() throws Exception {
          FileSystem fs=FileSystem.get(uri,config);
          return fs;
        }
      }
);
    }
 catch (    InterruptedException e) {
      logger.error(e.getMessage());
    }
  }
 else {
    fs=FileSystem.get(uri,config);
  }
  FileStatus status=fs.getFileStatus(p);
  long size=status.getLen();
  HdfsFetcher fetcher=new HdfsFetcher(maxBytesPerSec,VoldemortConfig.REPORTING_INTERVAL_BYTES,VoldemortConfig.DEFAULT_BUFFER_SIZE);
  long start=System.currentTimeMillis();
  File location=fetcher.fetch(url,System.getProperty("java.io.tmpdir") + File.separator + start);
  double rate=size * Time.MS_PER_SECOND / (double)(System.currentTimeMillis() - start);
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(2);
  System.out.println("Fetch to " + location + " completed: "+ nf.format(rate / (1024.0 * 1024.0))+ " MB/sec.");
  fs.close();
}
