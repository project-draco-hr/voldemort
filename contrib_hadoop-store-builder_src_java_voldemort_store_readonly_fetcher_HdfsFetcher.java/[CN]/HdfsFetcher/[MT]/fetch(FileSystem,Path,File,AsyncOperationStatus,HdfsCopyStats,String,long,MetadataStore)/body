{
  AdminClient adminClient=null;
  try {
    adminClient=new AdminClient(metadataStore.getCluster(),new AdminClientConfig(),new ClientConfig());
    FetchStrategy fetchStrategy=new BasicFetchStrategy(this,fs,stats,status,bufferSize);
    if (!fs.isFile(source)) {
      Utils.mkdirs(dest);
      HdfsDirectory directory=new HdfsDirectory(fs,source);
      HdfsFile metadataFile=directory.getMetadataFile();
      Long estimatedDiskSize=-1L;
      if (metadataFile != null) {
        File copyLocation=new File(dest,metadataFile.getPath().getName());
        fetchStrategy.fetch(metadataFile,copyLocation,null);
        directory.initializeMetadata(copyLocation);
        String diskSizeInBytes=(String)directory.getMetadata().get(ReadOnlyStorageMetadata.DISK_SIZE_IN_BYTES);
        estimatedDiskSize=(diskSizeInBytes != null && diskSizeInBytes != "") ? (Long.parseLong(diskSizeInBytes)) : -1L;
      }
      Versioned<String> diskQuotaSizeInKB=adminClient.quotaMgmtOps.getQuotaForNode(storeName,QuotaType.STORAGE_SPACE,metadataStore.getNodeId());
      if (diskQuotaSizeInKB != null) {
        checkIfQuotaExceeded(diskQuotaSizeInKB,storeName,dest,estimatedDiskSize);
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("store: " + storeName + " is a Non Quota type store.");
        }
      }
      Map<HdfsFile,byte[]> fileCheckSumMap=fetchStrategy.fetch(directory,dest);
      return directory.validateCheckSum(fileCheckSumMap);
    }
 else     if (allowFetchOfFiles) {
      Utils.mkdirs(dest);
      HdfsFile file=new HdfsFile(fs.getFileStatus(source));
      String fileName=file.getDiskFileName();
      File copyLocation=new File(dest,fileName);
      fetchStrategy.fetch(file,copyLocation,CheckSumType.NONE);
      return true;
    }
    logger.error("Source " + source.toString() + " should be a directory");
    return false;
  }
  finally {
    if (adminClient != null) {
      adminClient.close();
    }
  }
}
