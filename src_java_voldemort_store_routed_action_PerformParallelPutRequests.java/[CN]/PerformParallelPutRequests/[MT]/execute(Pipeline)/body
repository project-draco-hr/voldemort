{
  final Node masterNode=pipelineData.getMaster();
  final List<Node> nodes=pipelineData.getNodes();
  final Versioned<byte[]> versionedCopy=pipelineData.getVersionedCopy();
  final Integer numNodesTouchedInSerialPut=nodes.indexOf(masterNode) + 1;
  numNodesPendingResponse=nodes.size() - numNodesTouchedInSerialPut;
  if (logger.isDebugEnabled())   logger.debug("PUT {key:" + key + "} MasterNode={id:"+ masterNode.getId()+ "} totalNodesToAsyncPut="+ numNodesPendingResponse);
  for (int i=numNodesTouchedInSerialPut; i < nodes.size(); i++) {
    final Node node=nodes.get(i);
    pipelineData.incrementNodeIndex();
    NonblockingStoreCallback callback=new NonblockingStoreCallback(){
      @Override public void requestComplete(      Object result,      long requestTime){
        boolean responseHandledByMaster=false;
        if (logger.isDebugEnabled())         logger.debug("PUT {key:" + key + "} response received from node={id:"+ node.getId()+ "} in "+ requestTime+ " ms)");
        Response<ByteArray,Object> response;
        response=new Response<ByteArray,Object>(node,key,result,requestTime);
        if (logger.isDebugEnabled()) {
          logger.debug("PUT {key:" + key + "} Parallel put thread trying to return result to main thread");
        }
        responseHandledByMaster=pipelineData.getSynchronizer().tryDelegateResponseHandling(response);
        if (logger.isDebugEnabled()) {
          logger.debug("PUT {key:" + key + "} Master thread accepted the response: "+ responseHandledByMaster);
        }
        if (!responseHandledByMaster) {
          if (logger.isDebugEnabled()) {
            logger.debug("PUT {key:" + key + "} Master thread did not accept the response: will handle in worker thread");
          }
          if (PipelineRoutedStore.isSlopableFailure(response.getValue())) {
            if (logger.isDebugEnabled())             logger.debug("PUT {key:" + key + "} failed on node={id:"+ node.getId()+ ",host:"+ node.getHost()+ "}");
            if (isHintedHandoffEnabled()) {
              boolean triedDelegateSlop=pipelineData.getSynchronizer().tryDelegateSlop(node);
              if (logger.isDebugEnabled()) {
                logger.debug("PUT {key:" + key + "} triedDelegateSlop: "+ triedDelegateSlop);
              }
              if (!triedDelegateSlop) {
                Slop slop=new Slop(pipelineData.getStoreName(),Slop.Operation.PUT,key,versionedCopy.getValue(),transforms,node.getId(),new Date());
                pipelineData.addFailedNode(node);
                if (logger.isDebugEnabled())                 logger.debug("PUT {key:" + key + "} Start registering Slop(node:"+ node.getId()+ ",host:"+ node.getHost()+ ")");
                hintedHandoff.sendHintParallel(node,versionedCopy.getVersion(),slop);
                if (logger.isDebugEnabled())                 logger.debug("PUT {key:" + key + "} Sent out request to register Slop(node: "+ node.getId()+ ",host:"+ node.getHost()+ ")");
              }
            }
          }
 else {
            if (logger.isDebugEnabled()) {
              if (result instanceof Exception) {
                logger.debug("PUT {key:" + key + "} will not send hint. Response is ignorable exception: "+ result.getClass().toString());
              }
 else {
                logger.debug("PUT {key:" + key + "} will not send hint. Response is success");
              }
            }
          }
          if (result instanceof Exception && !(result instanceof ObsoleteVersionException)) {
            if (response.getValue() instanceof InvalidMetadataException) {
              pipelineData.reportException((InvalidMetadataException)response.getValue());
              logger.warn("Received invalid metadata problem after a successful " + pipeline.getOperation().getSimpleName() + " call on node "+ node.getId()+ ", store '"+ pipelineData.getStoreName()+ "'");
            }
 else {
              handleResponseError(response,pipeline,failureDetector);
            }
          }
        }
      }
    }
;
    if (logger.isTraceEnabled())     logger.trace("Submitting " + pipeline.getOperation().getSimpleName() + " request on node "+ node.getId()+ " for key "+ key);
    NonblockingStore store=nonblockingStores.get(node.getId());
    store.submitPutRequest(key,versionedCopy,transforms,callback,timeoutMs);
  }
  try {
    boolean preferredSatisfied=false;
    while (true) {
      long ellapsedNs=System.nanoTime() - pipelineData.getStartTimeNs();
      long remainingNs=(timeoutMs * Time.NS_PER_MS) - ellapsedNs;
      remainingNs=Math.max(0,remainingNs);
      if (numResponsesGot >= preferred - 1) {
        preferredSatisfied=true;
      }
      if (pipelineData.getSuccesses() >= required) {
        quorumSatisfied=true;
      }
      if (pipelineData.getZonesRequired() == null) {
        zonesSatisfied=true;
      }
 else {
        int numZonesSatisfied=pipelineData.getZoneResponses().size();
        if (numZonesSatisfied >= (pipelineData.getZonesRequired() + 1)) {
          zonesSatisfied=true;
        }
      }
      if (quorumSatisfied && zonesSatisfied && preferredSatisfied || remainingNs <= 0 || numNodesPendingResponse <= 0) {
        pipelineData.getSynchronizer().cutoffHandling();
        break;
      }
 else {
        if (logger.isTraceEnabled()) {
          logger.trace("PUT {key:" + key + "} trying to poll from queue");
        }
        Response<ByteArray,Object> response=pipelineData.getSynchronizer().responseQueuePoll(remainingNs,TimeUnit.NANOSECONDS);
        processResponse(response,pipeline);
        if (logger.isTraceEnabled()) {
          logger.trace("PUT {key:" + key + "} tried to poll from queue. Null?: "+ (response == null)+ " numResponsesGot:"+ numResponsesGot+ " parellelResponseToWait: "+ numNodesPendingResponse+ "; preferred-1: "+ (preferred - 1)+ "; preferredOK: "+ preferredSatisfied+ " quromOK: "+ quorumSatisfied+ "; zoneOK: "+ zonesSatisfied);
        }
      }
    }
    while (!pipelineData.getSynchronizer().responseQueueIsEmpty()) {
      Response<ByteArray,Object> response=pipelineData.getSynchronizer().responseQueuePoll(0,TimeUnit.NANOSECONDS);
      processResponse(response,pipeline);
    }
    if (!quorumSatisfied && pipelineData.getSuccesses() >= required) {
      quorumSatisfied=true;
    }
    if (!quorumSatisfied) {
      if (pipelineData.getZonesRequired() == null) {
        zonesSatisfied=true;
      }
 else {
        int numZonesSatisfied=pipelineData.getZoneResponses().size();
        if (numZonesSatisfied >= (pipelineData.getZonesRequired() + 1)) {
          zonesSatisfied=true;
        }
      }
    }
    if (quorumSatisfied && zonesSatisfied) {
      if (logger.isDebugEnabled()) {
        logger.debug("PUT {key:" + key + "} succeeded at parellel put stage");
      }
      pipelineData.getSynchronizer().disallowDelegateSlop();
      pipeline.addEvent(completeEvent);
    }
 else {
      VoldemortException fatalError;
      if (!quorumSatisfied) {
        if (logger.isDebugEnabled()) {
          logger.debug("PUT {key:" + key + "} failed due to insufficient nodes. required="+ required+ " success="+ pipelineData.getSuccesses());
        }
        fatalError=new InsufficientOperationalNodesException(required + " " + pipeline.getOperation().getSimpleName()+ "s required, but only "+ pipelineData.getSuccesses()+ " succeeded",new ArrayList<Node>(pipelineData.getReplicationSet()),new ArrayList<Node>(pipelineData.getNodes()),new ArrayList<Node>(pipelineData.getFailedNodes()),pipelineData.getFailures());
        pipelineData.setFatalError(fatalError);
      }
 else       if (!zonesSatisfied) {
        if (logger.isDebugEnabled()) {
          logger.debug("PUT {key:" + key + "} failed due to insufficient zones. required="+ pipelineData.getZonesRequired()+ 1+ " success="+ pipelineData.getZoneResponses().size());
        }
        fatalError=new InsufficientZoneResponsesException((pipelineData.getZonesRequired() + 1) + " " + pipeline.getOperation().getSimpleName()+ "s required zone, but only "+ (pipelineData.getZoneResponses().size())+ " succeeded. Failing nodes : "+ pipelineData.getFailedNodes());
        pipelineData.setFatalError(fatalError);
      }
      pipeline.abort();
    }
  }
 catch (  InterruptedException e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e,e);
  }
catch (  NoSuchElementException e) {
    if (logger.isEnabledFor(Level.ERROR))     logger.error("Response Queue is empty. There may be a bug in PerformParallelPutRequest",e);
  }
 finally {
    if (logger.isDebugEnabled()) {
      logger.debug("PUT {key:" + key + "} marking parallel put stage finished");
    }
  }
}
