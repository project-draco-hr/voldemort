{
  Node master=pipelineData.getMaster();
  Versioned<byte[]> versionedCopy=pipelineData.getVersionedCopy();
  if (logger.isDebugEnabled())   logger.debug("Serial put requests determined master node as " + master.getId() + ", submitting remaining requests in parallel");
  List<Node> nodes=pipelineData.getNodes();
  int firstParallelNodeIndex=nodes.indexOf(master) + 1;
  int attempts=nodes.size() - firstParallelNodeIndex;
  final Map<Integer,Response<ByteArray,Object>> responses=new ConcurrentHashMap<Integer,Response<ByteArray,Object>>();
  final CountDownLatch latch=new CountDownLatch(attempts);
  if (logger.isTraceEnabled())   logger.trace("Attempting " + attempts + " "+ pipeline.getOperation().getSimpleName()+ " operations in parallel");
  for (int i=firstParallelNodeIndex; i < (firstParallelNodeIndex + attempts); i++) {
    final Node node=nodes.get(i);
    pipelineData.incrementNodeIndex();
    NonblockingStoreCallback callback=new NonblockingStoreCallback(){
      public void requestComplete(      Object result,      long requestTime){
        if (logger.isTraceEnabled())         logger.trace(pipeline.getOperation().getSimpleName() + " response received (" + requestTime+ " ms.) from node "+ node.getId());
        responses.put(node.getId(),new Response<ByteArray,Object>(node,key,result,requestTime));
        latch.countDown();
      }
    }
;
    if (logger.isTraceEnabled())     logger.trace("Submitting " + pipeline.getOperation().getSimpleName() + " request on node "+ node.getId());
    NonblockingStore store=nonblockingStores.get(node.getId());
    store.submitPutRequest(key,versionedCopy,callback);
  }
  try {
    latch.await(timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e,e);
  }
  for (  Response<ByteArray,Object> response : responses.values()) {
    if (response.getValue() instanceof Exception) {
      if (handleResponseError(response,pipeline,failureDetector))       return;
    }
 else {
      pipelineData.incrementSuccesses();
      failureDetector.recordSuccess(response.getNode(),response.getRequestTime());
    }
  }
  if (pipelineData.getSuccesses() < required) {
    pipelineData.setFatalError(new InsufficientOperationalNodesException(required + " " + pipeline.getOperation().getSimpleName()+ "s required, but "+ pipelineData.getSuccesses()+ " succeeded",pipelineData.getFailures()));
    pipeline.addEvent(Event.ERROR);
  }
 else {
    pipeline.addEvent(completeEvent);
  }
}
