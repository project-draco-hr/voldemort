{
  StoreUtils.assertValidKey(key);
  getTLS();
  String strKey=new String(key.get());
  DBCursor cur=null;
  try {
    cur=coll.find(new Doc(KEY,strKey));
    for (    Doc d : cur) {
      VectorClock existingClock=new VectorClock(d.getBytes(CLOCK));
      Occured occured=value.getVersion().compare(existingClock);
      if (occured == Occured.BEFORE) {
        throw new ObsoleteVersionException("Key '" + strKey + " is obsolete.");
      }
 else       if (occured == Occured.AFTER) {
        coll.remove(new MongoSelector(d));
      }
    }
    Doc newData=new Doc(KEY,strKey);
    newData.put(VALUE,new BSONBytes(value.getValue()));
    newData.put(CLOCK,((VectorClock)value.getVersion()).toBytes());
    coll.insert(newData);
  }
 catch (  MongoDBIOException mioe) {
    try {
      init();
    }
 catch (    MongoDBException ee) {
      ee.printStackTrace();
    }
    throw new VoldemortException(mioe);
  }
catch (  MongoDBException e) {
    throw new VoldemortException(e);
  }
 finally {
    closeCursor(cur);
  }
}
