{
  return new Store<ByteArray,byte[],byte[]>(){
    @Override public void close() throws VoldemortException {
    }
    @Override public boolean delete(    ByteArray key,    Version version) throws VoldemortException {
      return false;
    }
    @Override public List<Versioned<byte[]>> get(    ByteArray key,    byte[] transforms) throws VoldemortException {
      return null;
    }
    @Override public Map<ByteArray,List<Versioned<byte[]>>> getAll(    Iterable<ByteArray> keys,    Map<ByteArray,byte[]> transforms) throws VoldemortException {
      return null;
    }
    @Override public Object getCapability(    StoreCapabilityType capability){
      return null;
    }
    @Override public String getName(){
      return null;
    }
    @Override public List<Version> getVersions(    ByteArray key){
      return null;
    }
    @Override public void put(    ByteArray key,    Versioned<byte[]> value,    byte[] transforms) throws VoldemortException {
    }
    @Override public List<Versioned<byte[]>> get(    CompositeVoldemortRequest<ByteArray,byte[]> request) throws VoldemortException {
      return null;
    }
    @Override public Map<ByteArray,List<Versioned<byte[]>>> getAll(    CompositeVoldemortRequest<ByteArray,byte[]> request) throws VoldemortException {
      return null;
    }
    @Override public void put(    CompositeVoldemortRequest<ByteArray,byte[]> request) throws VoldemortException {
    }
    @Override public boolean delete(    CompositeVoldemortRequest<ByteArray,byte[]> request) throws VoldemortException {
      return false;
    }
  }
;
}
