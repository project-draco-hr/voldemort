{
  Map<Integer,Store<ByteArray,byte[],byte[]>> subStores=Maps.newHashMap();
  for (  Node n : cluster.getNodes()) {
    Store<ByteArray,byte[],byte[]> subStore=null;
    if (failing != null && failing.contains(n.getId()))     subStore=new FailingStore<ByteArray,byte[],byte[]>("test",e);
 else     if (sleepy != null && sleepy.contains(n.getId()))     subStore=new SleepyStore<ByteArray,byte[],byte[]>(sleepMs,new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"));
 else     subStore=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test");
    subStores.put(n.getId(),subStore);
  }
  setFailureDetector(subStores);
  this.storeDef=ServerTestUtils.getStoreDef("test",reads,reads,writes,writes,zonereads,zonewrites,zoneReplicationFactor,HintedHandoffStrategyType.PROXIMITY_STRATEGY,strategy);
  routedStoreThreadPool=Executors.newFixedThreadPool(threads);
  RoutedStoreFactory routedStoreFactory=createFactory(timeOutMs);
  return routedStoreFactory.create(cluster,storeDef,subStores,failureDetector);
}
