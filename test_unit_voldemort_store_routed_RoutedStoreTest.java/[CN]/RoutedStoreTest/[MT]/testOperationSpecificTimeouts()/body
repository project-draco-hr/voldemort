{
  StoreDefinition definition=new StoreDefinitionBuilder().setName("test").setType("foo").setKeySerializer(new SerializerDefinition("test")).setValueSerializer(new SerializerDefinition("test")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(3).setPreferredReads(3).setRequiredReads(3).setPreferredWrites(3).setRequiredWrites(3).build();
  Map<Integer,Store<ByteArray,byte[],byte[]>> stores=new HashMap<Integer,Store<ByteArray,byte[],byte[]>>();
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < 3; i++) {
    Store<ByteArray,byte[],byte[]> store=new SleepyStore<ByteArray,byte[],byte[]>(200,new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"));
    stores.put(i,store);
    List<Integer> partitions=Arrays.asList(i);
    nodes.add(new Node(i,"none",0,0,0,partitions));
  }
  setFailureDetector(stores);
  routedStoreThreadPool=Executors.newFixedThreadPool(3);
  TimeoutConfig timeoutConfig=new TimeoutConfig(1500,false);
  timeoutConfig.setOperationTimeout(VoldemortOperation.GET,100);
  RoutedStoreFactory routedStoreFactory=new RoutedStoreFactory(true,routedStoreThreadPool,timeoutConfig);
  RoutedStore routedStore=routedStoreFactory.create(new Cluster("test",nodes),definition,stores,true,failureDetector);
  try {
    routedStore.put(new ByteArray("test".getBytes()),new Versioned<byte[]>(new byte[]{1}),null);
  }
 catch (  InsufficientOperationalNodesException e) {
    fail("Should not have failed");
  }
  try {
    routedStore.get(new ByteArray("test".getBytes()),null);
    fail("Should have thrown");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
}
