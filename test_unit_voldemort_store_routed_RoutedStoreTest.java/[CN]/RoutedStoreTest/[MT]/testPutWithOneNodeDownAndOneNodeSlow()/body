{
  cluster=VoldemortTestConstants.getThreeNodeCluster();
  StoreDefinition storeDef=ServerTestUtils.getStoreDef("test",3,2,2,2,2,RoutingStrategyType.CONSISTENT_STRATEGY);
  Map<Integer,Store<ByteArray,byte[]>> subStores=Maps.newHashMap();
  Map<Integer,NonblockingStore> nonblockingStores=new HashMap<Integer,NonblockingStore>();
  ExecutorService threadPool=Executors.newFixedThreadPool(1);
  int id1=Iterables.get(cluster.getNodes(),0).getId();
  int id2=Iterables.get(cluster.getNodes(),1).getId();
  int id3=Iterables.get(cluster.getNodes(),2).getId();
  subStores.put(id3,new InMemoryStorageEngine<ByteArray,byte[]>("test"));
  subStores.put(id1,new FailingStore<ByteArray,byte[]>("test"));
  subStores.put(id2,new SleepyStore<ByteArray,byte[]>(100,new InMemoryStorageEngine<ByteArray,byte[]>("test")));
  nonblockingStores.put(id1,new ThreadPoolBasedNonblockingStoreImpl(threadPool,subStores.get(id1)));
  nonblockingStores.put(id2,new ThreadPoolBasedNonblockingStoreImpl(threadPool,subStores.get(id2)));
  nonblockingStores.put(id3,new ThreadPoolBasedNonblockingStoreImpl(threadPool,subStores.get(id3)));
  setFailureDetector(subStores);
  RoutedStore routedStore=new RoutedStore("test",subStores,nonblockingStores,cluster,storeDef,true,threadPool,1000L,failureDetector);
  Store<ByteArray,byte[]> store=new InconsistencyResolvingStore<ByteArray,byte[]>(routedStore,new VectorClockInconsistencyResolver<byte[]>());
  store.put(aKey,new Versioned<byte[]>(aValue));
}
