{
  int timeout=50;
  StoreDefinition definition=new StoreDefinition("test","foo",new SerializerDefinition("test"),new SerializerDefinition("test"),RoutingTier.CLIENT,RoutingStrategyType.CONSISTENT_STRATEGY,3,3,3,3,3,0);
  Map<Integer,Store<ByteArray,byte[]>> stores=new HashMap<Integer,Store<ByteArray,byte[]>>();
  List<Node> nodes=new ArrayList<Node>();
  int totalDelay=0;
  for (int i=0; i < 3; i++) {
    int delay=4 + i * timeout;
    totalDelay+=delay;
    stores.put(i,new SleepyStore<ByteArray,byte[]>(delay,new InMemoryStorageEngine<ByteArray,byte[]>("test")));
    List<Integer> partitions=Arrays.asList(i);
    nodes.add(new Node(i,"none",0,0,partitions));
  }
  RoutedStore routedStore=new RoutedStore("test",stores,new Cluster("test",nodes),definition,3,false,timeout);
  long start=System.currentTimeMillis();
  try {
    routedStore.put(new ByteArray("test".getBytes()),new Versioned<byte[]>(new byte[]{1}));
    fail("Should have thrown");
  }
 catch (  InsufficientOperationalNodesException e) {
    long elapsed=System.currentTimeMillis() - start;
    assertTrue(elapsed + " < " + totalDelay,elapsed < totalDelay);
  }
}
