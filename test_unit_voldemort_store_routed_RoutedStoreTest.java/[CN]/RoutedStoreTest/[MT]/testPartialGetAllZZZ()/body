{
  HashMap<Integer,Integer> zoneReplicationFactor=Maps.newHashMap();
  zoneReplicationFactor.put(0,1);
  zoneReplicationFactor.put(1,1);
  zoneReplicationFactor.put(2,1);
  StoreDefinition definition=new StoreDefinitionBuilder().setName("test").setType("foo").setKeySerializer(new SerializerDefinition("test")).setValueSerializer(new SerializerDefinition("test")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setHintedHandoffStrategy(HintedHandoffStrategyType.PROXIMITY_STRATEGY).setReplicationFactor(3).setPreferredReads(3).setRequiredReads(3).setPreferredWrites(1).setRequiredWrites(1).setZoneCountReads(2).setZoneCountWrites(1).setZoneReplicationFactor(zoneReplicationFactor).build();
  Map<Integer,Store<ByteArray,byte[],byte[]>> stores=new HashMap<Integer,Store<ByteArray,byte[],byte[]>>();
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < 3; i++) {
    Store<ByteArray,byte[],byte[]> store=new SleepyStore<ByteArray,byte[],byte[]>(100 * (i + 1),new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"));
    stores.put(i,store);
    List<Integer> partitions=Arrays.asList(i);
    nodes.add(new Node(i,"none",0,0,0,i,partitions));
  }
  setFailureDetector(stores);
  routedStoreThreadPool=Executors.newFixedThreadPool(3);
  TimeoutConfig timeoutConfig=new TimeoutConfig(1500,true);
  timeoutConfig.setOperationTimeout(VoldemortOpCode.GET_ALL_OP_CODE,250);
  RoutedStoreFactory routedStoreFactory=createFactory();
  List<Zone> zones=Lists.newArrayList();
  for (int i=0; i < 3; i++) {
    LinkedList<Integer> zoneProximityList=Lists.newLinkedList();
    Set<Integer> zoneIds=Sets.newHashSet(0,1,2);
    zoneIds.remove(i);
    zoneProximityList.addAll(zoneIds);
    zones.add(new Zone(i,zoneProximityList));
  }
  RoutedStore routedStore=routedStoreFactory.create(new Cluster("test",nodes,zones),definition,stores,failureDetector,createConfig(timeoutConfig));
  Map<ByteArray,byte[]> expectedValues=Maps.newHashMap();
  for (byte i=1; i < 11; ++i) {
    ByteArray key=new ByteArray(new byte[]{i});
    byte[] value=new byte[]{(byte)(i + 50)};
    routedStore.put(key,Versioned.value(value),null);
    expectedValues.put(key,value);
  }
  Map<ByteArray,List<Versioned<byte[]>>> all=routedStore.getAll(expectedValues.keySet(),null);
  assert(expectedValues.size() > all.size());
  timeoutConfig.setPartialGetAllAllowed(false);
  try {
    all=routedStore.getAll(expectedValues.keySet(),null);
    fail("Should have failed");
  }
 catch (  Exception e) {
  }
}
