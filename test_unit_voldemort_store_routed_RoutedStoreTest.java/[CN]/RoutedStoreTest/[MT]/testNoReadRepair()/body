{
  cluster=VoldemortTestConstants.getThreeNodeCluster();
  StoreDefinition storeDef=ServerTestUtils.getStoreDef("test",3,2,1,3,2,RoutingStrategyType.CONSISTENT_STRATEGY);
  Map<Integer,Store<ByteArray,byte[],byte[]>> subStores=Maps.newHashMap();
  StatTrackingStore<ByteArray,byte[],byte[]> statTrackingStore=null;
  for (int i=0; i < 3; ++i) {
    int id=Iterables.get(cluster.getNodes(),i).getId();
    statTrackingStore=new StatTrackingStore<ByteArray,byte[],byte[]>(new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"),null);
    subStores.put(id,statTrackingStore);
  }
  setFailureDetector(subStores);
  routedStoreThreadPool=Executors.newFixedThreadPool(1);
  RoutedStoreFactory routedStoreFactory=new RoutedStoreFactory(isPipelineRoutedStoreEnabled,routedStoreThreadPool,1000L);
  RoutedStore routedStore=routedStoreFactory.create(cluster,storeDef,subStores,true,failureDetector);
  ByteArray key1=aKey;
  routedStore.put(key1,Versioned.value("value1".getBytes()),null);
  ByteArray key2=TestUtils.toByteArray("voldemort");
  routedStore.put(key2,Versioned.value("value2".getBytes()),null);
  long putCount=statTrackingStore.getStats().getCount(Tracked.PUT);
  routedStore.getAll(Arrays.asList(key1,key2),null);
  Thread.sleep(500);
  assertEquals("put count should remain the same if there are no read repairs",putCount,statTrackingStore.getStats().getCount(Tracked.PUT));
}
