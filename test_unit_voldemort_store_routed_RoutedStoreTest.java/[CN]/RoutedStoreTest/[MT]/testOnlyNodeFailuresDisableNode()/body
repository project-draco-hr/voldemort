{
  RoutingStrategy strategy;
  Cluster cluster;
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  Store<ByteArray,byte[]> s1=getStore(cluster,1,9,9,9,0,strategy,new VoldemortException());
  try {
    s1.put(aKey,new Versioned<byte[]>(aValue));
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,9);
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  Store<ByteArray,byte[]> s2=getStore(cluster,1,9,9,9,0,strategy,new UnreachableStoreException("no go"));
  try {
    s2.put(aKey,new Versioned<byte[]>(aValue));
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,0);
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  s1=getStore(cluster,1,9,9,9,0,strategy,new VoldemortException());
  try {
    s1.get(aKey);
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,9);
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  s2=getStore(cluster,1,9,9,9,0,strategy,new UnreachableStoreException("no go"));
  try {
    s2.get(aKey);
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,0);
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  s1=getStore(cluster,1,9,9,9,0,strategy,new VoldemortException());
  try {
    s1.delete(aKey,new VectorClock());
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,9);
  cluster=getNineNodeCluster();
  strategy=new RouteToAllStrategy(cluster.getNodes());
  s2=getStore(cluster,1,9,9,9,0,strategy,new UnreachableStoreException("no go"));
  try {
    s2.delete(aKey,new VectorClock());
    fail("Failure is expected");
  }
 catch (  InsufficientOperationalNodesException e) {
  }
  assertOperationalNodes(cluster,0);
}
