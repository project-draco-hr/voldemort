{
  int timeout=50;
  HashMap<Integer,Integer> zoneReplicationFactor=Maps.newHashMap();
  zoneReplicationFactor.put(0,1);
  zoneReplicationFactor.put(1,1);
  zoneReplicationFactor.put(2,1);
  StoreDefinition definition=new StoreDefinitionBuilder().setName("test").setType("foo").setKeySerializer(new SerializerDefinition("test")).setValueSerializer(new SerializerDefinition("test")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setHintedHandoffStrategy(HintedHandoffStrategyType.PROXIMITY_STRATEGY).setReplicationFactor(3).setPreferredReads(3).setRequiredReads(3).setPreferredWrites(3).setRequiredWrites(3).setZoneCountReads(2).setZoneCountWrites(2).setZoneReplicationFactor(zoneReplicationFactor).build();
  Map<Integer,Store<ByteArray,byte[],byte[]>> stores=new HashMap<Integer,Store<ByteArray,byte[],byte[]>>();
  List<Node> nodes=new ArrayList<Node>();
  int totalDelay=0;
  for (int i=0; i < 3; i++) {
    int delay=4 + i * timeout;
    totalDelay+=delay;
    Store<ByteArray,byte[],byte[]> store=new SleepyStore<ByteArray,byte[],byte[]>(delay,new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"));
    stores.put(i,store);
    List<Integer> partitions=Arrays.asList(i);
    nodes.add(new Node(i,"none",0,0,0,i,partitions));
  }
  setFailureDetector(stores);
  routedStoreThreadPool=Executors.newFixedThreadPool(3);
  RoutedStoreFactory routedStoreFactory=createFactory(timeout);
  List<Zone> zones=Lists.newArrayList();
  for (int i=0; i < 3; i++) {
    LinkedList<Integer> zoneProximityList=Lists.newLinkedList();
    Set<Integer> zoneIds=Sets.newHashSet(0,1,2);
    zoneIds.remove(i);
    zoneProximityList.addAll(zoneIds);
    zones.add(new Zone(i,zoneProximityList));
  }
  RoutedStore routedStore=routedStoreFactory.create(new Cluster("test",nodes,zones),definition,stores,failureDetector);
  long start=System.nanoTime();
  try {
    routedStore.get(new ByteArray("test".getBytes()),null);
    fail("Should have thrown");
  }
 catch (  InsufficientOperationalNodesException e) {
    long elapsed=(System.nanoTime() - start) / Time.NS_PER_MS;
    assertTrue(elapsed + " < " + totalDelay,elapsed < totalDelay);
  }
  start=System.nanoTime();
  try {
    routedStore.put(new ByteArray("test".getBytes()),new Versioned<byte[]>(new byte[]{1}),null);
    fail("Should have thrown");
  }
 catch (  InsufficientOperationalNodesException e) {
    long elapsed=(System.nanoTime() - start) / Time.NS_PER_MS;
    assertTrue(elapsed + " < " + totalDelay,elapsed < totalDelay);
  }
}
