{
  Map<Integer,Store<ByteArray,byte[],byte[]>> subStores=Maps.newHashMap();
  int count=0;
  for (  Node n : cluster.getNodes()) {
    if (count >= cluster.getNumberOfNodes())     throw new IllegalArgumentException(failing + " failing nodes, " + sleepy+ " sleepy nodes, but only "+ cluster.getNumberOfNodes()+ " nodes in the cluster.");
    Store<ByteArray,byte[],byte[]> subStore=null;
    if (count < failing)     subStore=new FailingStore<ByteArray,byte[],byte[]>("test",e);
 else     if (count < failing + sleepy)     subStore=new SleepyStore<ByteArray,byte[],byte[]>(Long.MAX_VALUE,new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test"));
 else     subStore=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test");
    subStores.put(n.getId(),subStore);
    count+=1;
  }
  setFailureDetector(subStores);
  StoreDefinition storeDef=ServerTestUtils.getStoreDef("test",reads + writes,reads,reads,writes,writes,strategy);
  routedStoreThreadPool=Executors.newFixedThreadPool(threads);
  RoutedStoreFactory routedStoreFactory=new RoutedStoreFactory(isPipelineRoutedStoreEnabled,routedStoreThreadPool,1000L);
  return routedStoreFactory.create(cluster,storeDef,subStores,true,failureDetector);
}
