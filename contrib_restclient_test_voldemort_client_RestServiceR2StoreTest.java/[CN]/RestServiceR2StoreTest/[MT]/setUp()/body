{
  logger.info(" Initial SEED used for random number generator: " + TestUtils.SEED);
  final int numServers=1;
  this.nodeId=0;
  servers=new VoldemortServer[numServers];
  try {
    Properties props=new Properties();
    props.setProperty("rest.enable","true");
    props.setProperty("http.enable","true");
    Cluster customCluster=clusterMapper.readCluster(new FileReader(clusterXmlFile),false);
    cluster=ServerTestUtils.startVoldemortCluster(servers,null,clusterXmlFile,storesXmlfile,props,customCluster);
  }
 catch (  IOException e) {
    fail("Failure to setup the cluster");
  }
  RESTClientConfig restClientConfig=new RESTClientConfig();
  restClientConfig.setHttpBootstrapURL("http://localhost:" + cluster.getNodeById(0).getRestPort()).setTimeoutMs(10000,TimeUnit.MILLISECONDS).setMaxR2ConnectionPoolSize(100);
  clientFactory=new HttpClientFactory();
  Map<String,String> properties=new HashMap<String,String>();
  properties.put(HttpClientFactory.POOL_SIZE_KEY,Integer.toString(restClientConfig.getMaxR2ConnectionPoolSize()));
  TransportClient transportClient=clientFactory.getClient(properties);
  R2Store r2Store=new R2Store(STORE_NAME,restClientConfig.getHttpBootstrapURL(),"0",transportClient,restClientConfig,0);
  store=r2Store;
}
