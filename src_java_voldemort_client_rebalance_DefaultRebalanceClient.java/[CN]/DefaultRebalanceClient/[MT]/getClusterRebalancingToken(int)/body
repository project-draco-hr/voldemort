{
  logger.info("Starting Cluster Rebalancing token Request.");
  Cluster cluster=adminClient.getCluster();
  int randomNodeId=(int)(Math.random() * cluster.getNumberOfNodes());
  final Version incrementedVersion=getIncrementedVersion(randomNodeId,MetadataStore.CLUSTER_STATE_KEY,requesterID);
  final Map<Integer,Boolean> succeededMap=Collections.synchronizedMap(new HashMap<Integer,Boolean>());
  final AtomicInteger succeeded=new AtomicInteger(0);
  final Semaphore semaphore=new Semaphore(cluster.getNumberOfNodes());
  for (  final Node node : cluster.getNodes())   this.executor.submit(new Runnable(){
    public void run(){
      try {
        semaphore.acquire();
        succeededMap.put(node.getId(),false);
        adminClient.updateRemoteClusterState(node.getId(),VoldemortState.REBALANCING_CLUSTER);
        succeeded.incrementAndGet();
        succeededMap.put(node.getId(),true);
      }
 catch (      Exception e) {
        logger.error("Failed to get rebalancing permit from Node:" + node);
      }
 finally {
        semaphore.release();
      }
    }
  }
);
  waitToFinish(semaphore,cluster.getNumberOfNodes());
  int succeedThreshold=(int)(config.getClusterMajorityThresholdPercentage() * cluster.getNumberOfNodes());
  if (succeeded.get() >= succeedThreshold)   return true;
  for (  Entry<Integer,Boolean> entry : succeededMap.entrySet())   if (entry.getValue())   adminClient.updateRemoteClusterState(entry.getKey(),VoldemortState.REBALANCING_CLUSTER);
  return false;
}
