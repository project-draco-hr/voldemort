{
  List<VoldemortService> services=new ArrayList<VoldemortService>();
  SchedulerService scheduler=new SchedulerService(voldemortConfig.getSchedulerThreads(),SystemTime.INSTANCE,voldemortConfig.canInterruptService());
  storageService=new StorageService(storeRepository,metadata,scheduler,voldemortConfig);
  asyncService=new AsyncOperationService(scheduler,ASYNC_REQUEST_CACHE_SIZE);
  jmxService=null;
  services.add(storageService);
  services.add(scheduler);
  services.add(asyncService);
  if (voldemortConfig.isAdminServerEnabled()) {
    Rebalancer rebalancer=null;
    if (voldemortConfig.isEnableRebalanceService()) {
      RebalancerService rebalancerService=new RebalancerService(storeRepository,metadata,voldemortConfig,asyncService,scheduler);
      services.add(rebalancerService);
      rebalancer=rebalancerService.getRebalancer();
    }
    SocketRequestHandlerFactory adminRequestHandlerFactory=new SocketRequestHandlerFactory(storageService,this.storeRepository,this.metadata,this.voldemortConfig,this.asyncService,scheduler,rebalancer,this);
    if (voldemortConfig.getUseNioConnector()) {
      logger.info("Using NIO Connector for Admin Service.");
      services.add(new NioSocketService(adminRequestHandlerFactory,identityNode.getAdminPort(),voldemortConfig.getAdminSocketBufferSize(),voldemortConfig.isNioAdminConnectorKeepAlive(),voldemortConfig.getNioAdminConnectorSelectors(),"admin-server",voldemortConfig.isJmxEnabled(),voldemortConfig.getNioAcceptorBacklog()));
    }
 else {
      logger.info("Using BIO Connector for Admin Service.");
      services.add(new SocketService(adminRequestHandlerFactory,identityNode.getAdminPort(),voldemortConfig.getAdminCoreThreads(),voldemortConfig.getAdminMaxThreads(),voldemortConfig.getAdminSocketBufferSize(),"admin-server",voldemortConfig.isJmxEnabled()));
    }
  }
  if (voldemortConfig.isGossipEnabled()) {
    services.add(new GossipService(this.metadata,scheduler,voldemortConfig));
  }
  if (voldemortConfig.isJmxEnabled()) {
    jmxService=new JmxService(this,this.metadata.getCluster(),storeRepository,services);
    services.add(jmxService);
  }
  return ImmutableList.copyOf(services);
}
