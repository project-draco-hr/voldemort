{
  this.failureDetectorConfig=new FailureDetectorConfig();
  OptionParser parser=new OptionParser();
  parser.accepts("async-scan-interval","Time interval (in milliseconds) at which the AsyncRecoveryFailureDetector checks for recovered nodes. Default: " + failureDetectorConfig.getAsyncScanInterval()).withRequiredArg().ofType(Long.class);
  parser.accepts("node-bannage-period","Time period (in milliseconds) for which a failed node is marked unavailable for the BannagePeriodFailureDetector. Default: " + failureDetectorConfig.getNodeBannagePeriod()).withRequiredArg().ofType(Long.class);
  parser.accepts("threshold-interval","Time interval (in milliseconds) for which a node is marked unavailable by the ThresholdFailureDetector for having fallen under the threshold for failures for the period, after which it is considered available. Default: " + failureDetectorConfig.getThresholdInterval()).withRequiredArg().ofType(Long.class);
  OptionSet options=parser.parse(args);
  if (options.has("help"))   printUsage(parser);
  Long asyncScanInterval=CmdUtils.valueOf(options,"async-scan-interval",failureDetectorConfig.getAsyncScanInterval());
  Long nodeBannagePeriod=CmdUtils.valueOf(options,"node-bannage-period",failureDetectorConfig.getNodeBannagePeriod());
  Long thresholdInterval=CmdUtils.valueOf(options,"threshold-interval",failureDetectorConfig.getThresholdInterval());
  Cluster cluster=getNineNodeCluster();
  failureDetectorConfig.setNodes(cluster.getNodes()).setStoreResolver(createMutableStoreResolver(cluster.getNodes())).setAsyncScanInterval(asyncScanInterval).setNodeBannagePeriod(nodeBannagePeriod).setThresholdInterval(thresholdInterval);
}
