{
  try {
    activeSessions.put(sessionId,this);
    DataInputStream inputStream=new DataInputStream(new BufferedInputStream(socket.getInputStream(),64000));
    DataOutputStream outputStream=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(),64000));
    RequestFormatType protocol=negotiateProtocol(inputStream,outputStream);
    RequestHandler handler=handlerFactory.getRequestHandler(protocol);
    logger.info("Client " + socket.getRemoteSocketAddress() + " connected successfully with protocol "+ protocol.getCode());
    while (!isInterrupted() && !socket.isClosed() && !isClosed) {
      handler.handleRequest(inputStream,outputStream);
      outputStream.flush();
    }
    if (isInterrupted())     logger.info(Thread.currentThread().getName() + " has been interrupted, closing session.");
  }
 catch (  EOFException e) {
    logger.info("Client " + socket.getRemoteSocketAddress() + " disconnected.");
  }
catch (  IOException e) {
    if (!isClosed)     logger.error(e);
  }
 finally {
    try {
      if (!socket.isClosed())       socket.close();
    }
 catch (    Exception e) {
      logger.error("Error while closing socket",e);
    }
    this.activeSessions.remove(sessionId);
  }
}
