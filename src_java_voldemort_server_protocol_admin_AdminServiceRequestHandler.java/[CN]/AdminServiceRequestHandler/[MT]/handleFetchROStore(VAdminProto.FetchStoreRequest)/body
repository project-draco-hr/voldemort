{
  final String fetchUrl=request.getStoreDir();
  final String storeName=request.getStoreName();
  int requestId=asyncService.getUniqueRequestId();
  VAdminProto.AsyncOperationStatusResponse.Builder response=VAdminProto.AsyncOperationStatusResponse.newBuilder().setRequestId(requestId).setComplete(false).setDescription("Fetch store").setStatus("started");
  try {
    if (!metadataStore.getReadOnlyFetchEnabledUnlocked()) {
      throw new ReadOnlyFetchDisabledException("Read-only fetcher is disabled in " + metadataStore.getServerStateUnlocked() + " state on node "+ metadataStore.getNodeId());
    }
    final ReadOnlyStorageEngine store=getReadOnlyStorageEngine(metadataStore,storeRepository,storeName);
    final long currentVersion=store.getCurrentVersionId();
    final long pushVersion;
    if (request.hasPushVersion()) {
      pushVersion=request.getPushVersion();
      if (pushVersion <= store.getCurrentVersionId())       throw new VoldemortException("Version of push specified (" + pushVersion + ") should be greater than current version "+ store.getCurrentVersionId()+ " for store "+ storeName+ " on node "+ metadataStore.getNodeId());
    }
 else {
      long maxVersion;
      File[] storeDirList=ReadOnlyUtils.getVersionDirs(new File(store.getStoreDirPath()));
      if (storeDirList == null || storeDirList.length == 0) {
        throw new VoldemortException("Push version required since no version folders exist for store " + storeName + " on node "+ metadataStore.getNodeId());
      }
 else {
        maxVersion=ReadOnlyUtils.getVersionId(ReadOnlyUtils.findKthVersionedDir(storeDirList,storeDirList.length - 1,storeDirList.length - 1)[0]);
      }
      pushVersion=maxVersion + 1;
      logger.warn("Push Version is not specified, this might create issues during rebalance/restore. Store" + storeName + " Generated version "+ pushVersion);
    }
    ReadOnlyStoreFetchOperation operation=new ReadOnlyStoreFetchOperation(requestId,metadataStore,store,fileFetcher,storeName,fetchUrl,pushVersion);
    asyncService.submitOperation(requestId,operation);
  }
 catch (  VoldemortException e) {
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    logger.error("handleFetchStore failed for request(" + request.toString() + ")",e);
  }
  return response.build();
}
