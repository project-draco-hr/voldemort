{
  VAdminProto.ReserveMemoryResponse.Builder response=VAdminProto.ReserveMemoryResponse.newBuilder();
  try {
    String storeName=request.getStoreName();
    long reserveMB=request.getSizeInMb();
synchronized (lock) {
      if (storeRepository.hasLocalStore(storeName)) {
        logger.info("Setting memory foot print of store '" + storeName + "' to "+ reserveMB+ " MB");
        List<StoreDefinition> storeDefList=metadataStore.getStoreDefList();
        for (int i=0; i < storeDefList.size(); i++) {
          StoreDefinition storeDef=storeDefList.get(i);
          if (!storeDef.isView() && storeDef.getName().equals(storeName)) {
            StoreDefinition newStoreDef=new StoreDefinitionBuilder().setName(storeDef.getName()).setType(storeDef.getType()).setDescription(storeDef.getDescription()).setOwners(storeDef.getOwners()).setKeySerializer(storeDef.getKeySerializer()).setValueSerializer(storeDef.getValueSerializer()).setRoutingPolicy(storeDef.getRoutingPolicy()).setRoutingStrategyType(storeDef.getRoutingStrategyType()).setReplicationFactor(storeDef.getReplicationFactor()).setPreferredReads(storeDef.getPreferredReads()).setRequiredReads(storeDef.getRequiredReads()).setPreferredWrites(storeDef.getPreferredWrites()).setRequiredWrites(storeDef.getRequiredWrites()).setRetentionPeriodDays(storeDef.getRetentionDays()).setRetentionScanThrottleRate(storeDef.getRetentionScanThrottleRate()).setZoneReplicationFactor(storeDef.getZoneReplicationFactor()).setZoneCountReads(storeDef.getZoneCountReads()).setZoneCountWrites(storeDef.getZoneCountWrites()).setHintedHandoffStrategy(storeDef.getHintedHandoffStrategyType()).setHintPrefListSize(storeDef.getHintPrefListSize()).setMemoryFootprintMB(reserveMB).build();
            storeDefList.set(i,newStoreDef);
            storageService.updateStore(newStoreDef);
            break;
          }
        }
        try {
          metadataStore.put(MetadataStore.STORES_KEY,storeDefList);
        }
 catch (        Exception e) {
          throw new VoldemortException(e);
        }
      }
 else {
        logger.error("Failure to reserve memory. Store '" + storeName + "' does not exist");
        throw new StoreOperationFailureException(String.format("Store '%s' does not exist on this server",storeName));
      }
    }
  }
 catch (  VoldemortException e) {
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    logger.error("handleReserveMemory failed for request(" + request.toString() + ")",e);
  }
  return response.build();
}
