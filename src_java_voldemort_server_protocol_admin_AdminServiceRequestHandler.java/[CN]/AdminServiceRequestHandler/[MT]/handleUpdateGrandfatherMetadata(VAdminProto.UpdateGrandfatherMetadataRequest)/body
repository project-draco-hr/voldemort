{
  List<RebalancePartitionsInfo> plans=Lists.newArrayList();
  VAdminProto.UpdateGrandfatherMetadataResponse.Builder response=VAdminProto.UpdateGrandfatherMetadataResponse.newBuilder();
  try {
    for (    InitiateRebalanceNodeRequest nodeRequest : request.getPlanList()) {
      plans.add(new RebalancePartitionsInfo(nodeRequest.getStealerId(),nodeRequest.getDonorId(),nodeRequest.getPartitionsList(),nodeRequest.getDeletePartitionsList(),nodeRequest.getStealMasterPartitionsList(),nodeRequest.getUnbalancedStoreList(),encodeROStoreVersionDirMap(nodeRequest.getStealerRoStoreToDirList()),encodeROStoreVersionDirMap(nodeRequest.getDonorRoStoreToDirList()),nodeRequest.getAttempt()));
    }
    if (metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
      metadataStore.put(MetadataStore.GRANDFATHERING_INFO,new GrandfatherState(plans));
      metadataStore.put(MetadataStore.SERVER_STATE_KEY,MetadataStore.VoldemortState.GRANDFATHERING_SERVER);
    }
 else {
      throw new VoldemortException("Voldemort server was not in normal state");
    }
  }
 catch (  VoldemortException e) {
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    logger.error("handleUpdateGrandfatherMetadata failed for request(" + request.toString() + ")",e);
    return response.build();
  }
  Versioned<byte[]> versioned=metadataStore.get(MetadataStore.SERVER_STATE_KEY,null).get(0);
  response.setVersion(ProtoUtils.encodeVersioned(versioned));
  return response.build();
}
