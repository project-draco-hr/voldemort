{
  VAdminProto.DeletePartitionEntriesResponse.Builder response=VAdminProto.DeletePartitionEntriesResponse.newBuilder();
  ClosableIterator<Pair<ByteArray,Versioned<byte[]>>> iterator=null;
  try {
    String storeName=request.getStore();
    List<Integer> partitions=request.getPartitionsList();
    StorageEngine<ByteArray,byte[],byte[]> storageEngine=getStorageEngine(storeRepository,storeName);
    VoldemortFilter filter=(request.hasFilter()) ? getFilterFromRequest(request.getFilter(),voldemortConfig,networkClassLoader) : new DefaultVoldemortFilter();
    RoutingStrategy routingStrategy=metadataStore.getRoutingStrategy(storageEngine.getName());
    EventThrottler throttler=new EventThrottler(voldemortConfig.getStreamMaxReadBytesPerSec());
    iterator=storageEngine.entries();
    int deleteSuccess=0;
    while (iterator.hasNext()) {
      Pair<ByteArray,Versioned<byte[]>> entry=iterator.next();
      ByteArray key=entry.getFirst();
      Versioned<byte[]> value=entry.getSecond();
      throttler.maybeThrottle(key.length() + valueSize(value));
      if (checkKeyBelongsToDeletePartition(key.get(),partitions,routingStrategy) && filter.accept(key,value)) {
        if (storageEngine.delete(key,value.getVersion()))         deleteSuccess++;
      }
    }
    response.setCount(deleteSuccess);
  }
 catch (  VoldemortException e) {
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    logger.error("handleDeletePartitionEntries failed for request(" + request.toString() + ")",e);
  }
 finally {
    if (null != iterator)     iterator.close();
  }
  return response.build();
}
