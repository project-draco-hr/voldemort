{
  logger.info("Received DisableStoreVersionRequest: " + disableStoreVersion.toString());
  VAdminProto.DisableStoreVersionResponse.Builder response=VAdminProto.DisableStoreVersionResponse.newBuilder();
  response.setNodeId(server.getMetadataStore().getNodeId());
  String storeName=disableStoreVersion.getStoreName();
  Long version=disableStoreVersion.getPushVersion();
  try {
    StorageEngine storeToDisable=storeRepository.getStorageEngine(storeName);
    if (storeToDisable == null) {
      response.setDisableSuccess(false).setInfo("The store '" + storeName + "' does not exist!");
    }
 else {
      StoreVersionManager storeVersionManager=(StoreVersionManager)storeToDisable.getCapability(StoreCapabilityType.DISABLE_STORE_VERSION);
      storeVersionManager.disableStoreVersion(version);
      response.setDisableSuccess(true).setDisablePersistenceSuccess(true).setInfo("The store '" + storeName + "' version "+ version+ " was successfully disabled.");
    }
  }
 catch (  PersistenceFailureException e) {
    response.setDisableSuccess(true).setDisablePersistenceSuccess(false).setInfo("The store '" + storeName + "' version "+ version+ " was disabled"+ " but the change could not be persisted and will thus remain in effect only"+ " until the next server restart. This is likely caused by the IO subsystem"+ " becoming read-only.");
  }
catch (  NoSuchCapabilityException e) {
    response.setDisableSuccess(false).setInfo("The store '" + storeName + "' does not support disabling versions!");
  }
catch (  Exception e) {
    logger.error("Got an unexpected exception while trying to disable store '" + storeName + "' version "+ version+ ".",e);
    response.setDisableSuccess(false).setInfo("The store '" + storeName + "' version "+ version+ " was not disabled because of an unexpected exception.");
  }
  logger.info("handleDisableStoreVersion returning response: " + response.getInfo());
  if (response.getDisableSuccess()) {
    VAdminProto.SetOfflineStateRequest offlineStateRequest=VAdminProto.SetOfflineStateRequest.newBuilder().setOfflineMode(true).build();
    handleSetOfflineState(offlineStateRequest);
  }
  return response.build();
}
