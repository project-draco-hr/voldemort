{
  final String fetchUrl=request.getStoreDir();
  final String storeName=request.getStoreName();
  int requestId=asyncService.getUniqueRequestId();
  VAdminProto.AsyncOperationStatusResponse.Builder response=VAdminProto.AsyncOperationStatusResponse.newBuilder().setRequestId(requestId).setComplete(false).setDescription("Fetch store").setStatus("started");
  try {
    asyncService.submitOperation(requestId,new AsyncOperation(requestId,"Fetch store"){
      private String fetchDirPath=null;
      @Override public void markComplete(){
        status.setComplete(true);
        status.setStatus(fetchDirPath);
      }
      @Override public void operate(){
        File fetchDir=null;
        if (fileFetcher == null) {
          fetchDir=new File(fetchUrl);
        }
 else {
          logger.info("Executing fetch of " + fetchUrl);
          updateStatus("Executing fetch of " + fetchUrl);
          try {
            fetchDir=fileFetcher.fetch(fetchUrl,storeName);
            updateStatus("Completed fetch of " + fetchUrl);
          }
 catch (          Exception e) {
            throw new VoldemortException("Exception in Fetcher = " + e.getMessage());
          }
          if (fetchDir == null) {
            throw new VoldemortException("Checksum failed for " + fetchUrl + " and store name = "+ storeName);
          }
 else {
            logger.info("Fetch complete.");
          }
        }
        fetchDirPath=new String(fetchDir.getAbsolutePath());
      }
      @Override public void stop(){
        status.setException(new VoldemortException("Fetcher interrupted"));
      }
    }
);
  }
 catch (  VoldemortException e) {
    response.setError(ProtoUtils.encodeError(errorCodeMapper,e));
    logger.error("handleFetchStore failed for request(" + request.toString() + ")",e);
  }
  return response.build();
}
