{
  String storeName=handleFetchFailure.getStoreName();
  long pushVersion=handleFetchFailure.getPushVersion();
  String extraInfo=handleFetchFailure.getInfo();
  Properties extraInfoProperties=new Properties();
  try {
    extraInfoProperties.load(new StringReader(extraInfo));
  }
 catch (  IOException e) {
    logger.error("Got IOException while trying to decipher a HandleFetchFailureRequest's info.",e);
  }
  logger.info("Received HandleFetchFailureRequest:\n" + "\tstore_name: " + storeName + "\n"+ "\tpush_version: "+ pushVersion+ "\n"+ "\tinfo: "+ extraInfoProperties.toString());
  VAdminProto.HandleFetchFailureResponse.Builder response=VAdminProto.HandleFetchFailureResponse.newBuilder();
  AdminClient adminClient=AdminClient.createTempAdminClient(voldemortConfig,metadataStore.getCluster(),1);
  int maxNodeFailure=voldemortConfig.getHighAvailabilityPushMaxNodeFailures();
  Set<Integer> nodesFailedInThisFetch=Sets.newHashSet(handleFetchFailure.getFailedNodesList());
  int failureCount=nodesFailedInThisFetch.size();
  boolean swapIsPossible=false;
  String responseMessage="";
  if (failureCount > maxNodeFailure) {
    responseMessage="We cannot use pushHighAvailability because there is more than " + maxNodeFailure + " nodes that failed their fetches...";
    logger.error(responseMessage);
  }
 else {
    FailedFetchLock distributedLock=null;
    try {
      distributedLock=FailedFetchLock.getLock(voldemortConfig,new Props(extraInfoProperties));
      distributedLock.acquireLock();
      Set<Integer> alreadyDisabledNodes=distributedLock.getDisabledNodes();
      Set<Integer> allNodesToBeDisabled=Sets.newHashSet();
      allNodesToBeDisabled.addAll(alreadyDisabledNodes);
      allNodesToBeDisabled.addAll(nodesFailedInThisFetch);
      if (allNodesToBeDisabled.size() > maxNodeFailure) {
        StringBuilder stringBuilder=new StringBuilder();
        stringBuilder.append("We cannot use pushHighAvailability because it would bring the total ");
        stringBuilder.append("number of nodes with disabled stores to more than ");
        stringBuilder.append(maxNodeFailure);
        stringBuilder.append("... alreadyDisabledNodes: [");
        boolean firstItem=true;
        for (        Integer nodeId : alreadyDisabledNodes) {
          if (firstItem) {
            firstItem=false;
          }
 else {
            stringBuilder.append(", ");
          }
          stringBuilder.append(nodeId);
        }
        stringBuilder.append("], nodesFailedInThisFetch: [");
        firstItem=true;
        for (        Integer nodeId : nodesFailedInThisFetch) {
          if (firstItem) {
            firstItem=false;
          }
 else {
            stringBuilder.append(", ");
          }
          stringBuilder.append(nodeId);
        }
        stringBuilder.append("]");
        responseMessage=stringBuilder.toString();
        logger.error(responseMessage);
      }
 else {
        String nodesString="node";
        if (nodesFailedInThisFetch.size() > 1) {
          nodesString+="s";
        }
        nodesString+=" [";
        boolean firstNode=true;
        for (        Integer nodeId : nodesFailedInThisFetch) {
          logger.warn("Will disable store '" + storeName + "' on node "+ nodeId);
          distributedLock.addDisabledNode(nodeId,storeName,pushVersion);
          if (firstNode) {
            firstNode=false;
          }
 else {
            nodesString+=", ";
          }
          nodesString+=nodeId;
          response.addDisableStoreResponses(adminClient.readonlyOps.disableStoreVersion(nodeId,storeName,pushVersion,extraInfo));
        }
        nodesString+="]";
        swapIsPossible=true;
        responseMessage="Swap will be possible even though " + nodesString + " failed to fetch.";
        logger.info(responseMessage);
      }
    }
 catch (    ClassNotFoundException e) {
      String logMessage="Failed to find requested FailedFetchLock implementation while setting up pushHighAvailability. ";
      logger.error(responseMessage,e);
      responseMessage=logMessage + "\n" + ExceptionUtils.stackTraceToString(e);
    }
catch (    Exception e) {
      String logMessage="Got exception while trying to execute pushHighAvailability. ";
      logger.error(responseMessage,e);
      responseMessage=logMessage + "\n" + ExceptionUtils.stackTraceToString(e);
    }
 finally {
      if (distributedLock != null) {
        try {
          distributedLock.releaseLock();
        }
 catch (        Exception e) {
          logger.error("Error while trying to release the shared lock used for pushHighAvailability!",e);
        }
 finally {
          try {
            distributedLock.close();
          }
 catch (          Exception inception) {
            logger.error("Error while trying to close the shared lock used for pushHighAvailability!",inception);
          }
        }
      }
    }
  }
  response.setSwapIsPossible(swapIsPossible);
  response.setInfo(responseMessage);
  return response.build();
}
