{
  super(config);
  HostConfiguration hostConfig=new HostConfiguration();
  hostConfig.getParams().setParameter("http.protocol.version",HttpVersion.HTTP_1_1);
  this.connectionManager=new MultiThreadedHttpConnectionManager();
  this.httpClient=new HttpClient(connectionManager);
  this.httpClient.setHostConfiguration(hostConfig);
  HttpClientParams clientParams=this.httpClient.getParams();
  clientParams.setConnectionManagerTimeout(config.getConnectionTimeout(TimeUnit.MILLISECONDS));
  clientParams.setSoTimeout(config.getSocketTimeout(TimeUnit.MILLISECONDS));
  clientParams.setParameter(HttpMethodParams.RETRY_HANDLER,new DefaultHttpMethodRetryHandler(0,false));
  clientParams.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
  clientParams.setParameter("http.useragent",VOLDEMORT_USER_AGENT);
  HttpConnectionManagerParams managerParams=this.httpClient.getHttpConnectionManager().getParams();
  managerParams.setConnectionTimeout(config.getConnectionTimeout(TimeUnit.MILLISECONDS));
  managerParams.setMaxTotalConnections(config.getMaxTotalConnections());
  managerParams.setStaleCheckingEnabled(false);
  managerParams.setMaxConnectionsPerHost(httpClient.getHostConfiguration(),config.getMaxConnectionsPerNode());
  this.reroute=config.getRoutingTier().equals(RoutingTier.SERVER);
  this.requestFormatFactory=new RequestFormatFactory();
  String clusterXml=bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY);
  Cluster cluster=clusterMapper.readCluster(new StringReader(clusterXml));
  failureDetector=initFailureDetector(config,cluster.getNodes());
}
