{
  System.out.println("testRebalancePlanWithReplicationChanges() running...");
  currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0,1,2,3},{4,5,6},{7,8,9}});
  targetCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,2,3},{4,6},{7,8,9},{1,5}});
  RebalanceClusterPlan rebalancePlan=new RebalanceClusterPlan(currentCluster,targetCluster,storeDefList,true);
  System.out.println("Plan partition distribution: " + rebalancePlan.printPartitionDistribution());
  System.out.println("Plan: " + rebalancePlan);
  assertEquals("There should have exactly 3 rebalancing node",3,rebalancePlan.getRebalancingTaskQueue().size());
{
    RebalanceNodePlan nodePlan=rebalancePlan.getRebalancingTaskQueue().poll();
    assertEquals("Rebalancing node 1 should have 1 entries",1,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(1,2,empty,Arrays.asList(4),empty,RebalanceUtils.getStoreNames(storeDefList),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan nodePlan=rebalancePlan.getRebalancingTaskQueue().poll();
    assertEquals("Rebalancing node 2 should have 1 entries",1,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(2,1,empty,Arrays.asList(0),empty,RebalanceUtils.getStoreNames(storeDefList),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan nodePlan=rebalancePlan.getRebalancingTaskQueue().poll();
    assertEquals("Rebalancing node 3 should have 2 entries",2,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(3,0,Arrays.asList(1),empty,Arrays.asList(1),RebalanceUtils.getStoreNames(storeDefList),0);
    RebalancePartitionsInfo b=new RebalancePartitionsInfo(3,1,Arrays.asList(5),Arrays.asList(1),Arrays.asList(5),RebalanceUtils.getStoreNames(storeDefList),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a,b));
  }
}
