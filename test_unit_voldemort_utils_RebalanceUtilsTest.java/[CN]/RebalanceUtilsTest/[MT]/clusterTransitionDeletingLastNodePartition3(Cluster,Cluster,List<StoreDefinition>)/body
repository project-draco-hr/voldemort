{
  OrderedClusterTransition orderedClusterTransition=createOrderedClusterTransition(currentCluster,targetCluster,storeDef);
  List<RebalanceNodePlan> orderedRebalanceNodePlanList=orderedClusterTransition.getOrderedRebalanceNodePlanList();
  assertEquals("There should have exactly 3 rebalancing node",3,orderedRebalanceNodePlanList.size());
{
    RebalanceNodePlan rebalanceNodePlan=orderedRebalanceNodePlanList.get(0);
    assertEquals("Stealer 0 should have 1 entry",1,rebalanceNodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(0,3,Arrays.asList(1,3),Arrays.asList(1),Arrays.asList(3),RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(rebalanceNodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan rebalanceNodePlan=orderedRebalanceNodePlanList.get(1);
    assertEquals("Stealer 1 should have 1 entry",1,rebalanceNodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(1,3,Arrays.asList(2),Arrays.asList(2),empty,RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(rebalanceNodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan rebalanceNodePlan=orderedRebalanceNodePlanList.get(2);
    assertEquals("Stealer 2 should have 1 entry",1,rebalanceNodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(2,3,Arrays.asList(3),Arrays.asList(3),empty,RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(rebalanceNodePlan,Arrays.asList(a));
  }
}
