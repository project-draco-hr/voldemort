{
  final OrderedClusterTransition orderedClusterTransition=createOrderedClusterTransition(currentCluster,targetCluster,storeDef);
  orderedClusterTransition.getOrderedRebalanceNodePlanList();
  List<RebalanceNodePlan> orderedRebalanceNodePlanList=orderedClusterTransition.getOrderedRebalanceNodePlanList();
  assertEquals("There should have exactly 3 rebalancing node",3,orderedRebalanceNodePlanList.size());
{
    RebalanceNodePlan nodePlan=orderedRebalanceNodePlanList.get(0);
    assertEquals("Stealer 2 should have 1 entry",1,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(2,0,Arrays.asList(3,4),Arrays.asList(3),Arrays.asList(4),RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan nodePlan=orderedRebalanceNodePlanList.get(1);
    assertEquals("Stealer 1 should have 1 entry",1,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(1,0,Arrays.asList(2),Arrays.asList(2),empty,RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a));
  }
{
    RebalanceNodePlan nodePlan=orderedRebalanceNodePlanList.get(2);
    assertEquals("Stealer 3 should have 1 entry",1,nodePlan.getRebalanceTaskList().size());
    RebalancePartitionsInfo a=new RebalancePartitionsInfo(3,0,Arrays.asList(4),Arrays.asList(4),empty,RebalanceUtils.getStoreNames(storeDef),0);
    checkAllRebalanceInfoPresent(nodePlan,Arrays.asList(a));
  }
}
