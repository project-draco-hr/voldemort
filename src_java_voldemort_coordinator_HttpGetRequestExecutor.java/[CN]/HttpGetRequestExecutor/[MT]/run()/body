{
  try {
    List<Versioned<byte[]>> versionedValues=storeClient.getWithCustomTimeout(this.getRequestObject);
    if (versionedValues == null || versionedValues.size() == 0) {
      if (this.getRequestObject.getValue() != null) {
        if (versionedValues == null) {
          versionedValues=new ArrayList<Versioned<byte[]>>();
        }
        versionedValues.add(this.getRequestObject.getValue());
      }
 else {
        RESTErrorHandler.handleError(NOT_FOUND,this.getRequestMessageEvent,"Requested Key does not exist");
      }
      if (logger.isDebugEnabled()) {
        logger.debug("GET successful !");
      }
    }
    writeResponse(versionedValues);
  }
 catch (  IllegalArgumentException illegalArgsException) {
    String errorDescription="PUT Failed !!! Illegal Arguments : " + illegalArgsException.getMessage();
    logger.error(errorDescription);
    RESTErrorHandler.handleError(BAD_REQUEST,this.getRequestMessageEvent,errorDescription);
  }
catch (  StoreTimeoutException timeoutException) {
    String errorDescription="GET Request timed out: " + timeoutException.getMessage();
    logger.error(errorDescription);
    RESTErrorHandler.handleError(REQUEST_TIMEOUT,this.getRequestMessageEvent,errorDescription);
  }
catch (  InsufficientOperationalNodesException exception) {
    long nowInNs=System.nanoTime();
    if (nowInNs - startTimestampInNs > getRequestObject.getRoutingTimeoutInMs() * Time.NS_PER_MS) {
      String errorDescription="GET Request timed out: " + exception.getMessage();
      logger.error(errorDescription);
      RESTErrorHandler.handleError(REQUEST_TIMEOUT,this.getRequestMessageEvent,errorDescription);
    }
 else {
      String errorDescription="Voldemort Exception: " + exception.getMessage();
      RESTErrorHandler.handleError(INTERNAL_SERVER_ERROR,this.getRequestMessageEvent,errorDescription);
    }
  }
catch (  VoldemortException ve) {
    String errorDescription="Voldemort Exception: " + ve.getMessage();
    RESTErrorHandler.handleError(INTERNAL_SERVER_ERROR,this.getRequestMessageEvent,errorDescription);
  }
catch (  Exception ve) {
    String errorDescription="Exception: " + ve.getMessage();
    RESTErrorHandler.handleError(INTERNAL_SERVER_ERROR,this.getRequestMessageEvent,errorDescription);
  }
}
