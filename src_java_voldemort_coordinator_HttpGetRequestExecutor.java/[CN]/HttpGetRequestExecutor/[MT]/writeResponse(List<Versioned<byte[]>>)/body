{
  MimeMultipart multiPart=new MimeMultipart();
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  for (  Versioned<byte[]> versionedValue : versionedValues) {
    byte[] responseValue=versionedValue.getValue();
    VectorClock vectorClock=(VectorClock)versionedValue.getVersion();
    String serializedVectorClock=CoordinatorUtils.getSerializedVectorClock(vectorClock);
    MimeBodyPart body=new MimeBodyPart();
    try {
      body.addHeader(CONTENT_TYPE,"application/octet-stream");
      body.addHeader(CONTENT_TRANSFER_ENCODING,"binary");
      body.addHeader(VoldemortHttpRequestHandler.X_VOLD_VECTOR_CLOCK,serializedVectorClock);
      body.setContent(responseValue,"application/octet-stream");
      body.addHeader(CONTENT_LENGTH,"" + responseValue.length);
      multiPart.addBodyPart(body);
    }
 catch (    MessagingException me) {
      logger.error("Exception while constructing body part",me);
      outputStream.close();
      throw me;
    }
  }
  try {
    multiPart.writeTo(outputStream);
  }
 catch (  Exception e) {
    logger.error("Exception while writing multipart to output stream",e);
    outputStream.close();
    throw e;
  }
  ChannelBuffer responseContent=ChannelBuffers.dynamicBuffer();
  responseContent.writeBytes(outputStream.toByteArray());
  HttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
  response.setHeader(CONTENT_TYPE,"multipart/binary");
  response.setHeader(CONTENT_TRANSFER_ENCODING,"binary");
  response.setContent(responseContent);
  response.setHeader(CONTENT_LENGTH,response.getContent().readableBytes());
  if (logger.isDebugEnabled()) {
    logger.debug("Response = " + response);
  }
  if (this.coordinatorPerfStats != null) {
    long durationInNs=System.nanoTime() - startTimestampInNs;
    this.coordinatorPerfStats.recordTime(Tracked.GET,durationInNs);
  }
  this.getRequestMessageEvent.getChannel().write(response);
}
