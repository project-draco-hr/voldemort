{
  if (!allowReadRepair || nodeValues.size() <= 1 || storeDef.getPreferredReads() <= 1)   return;
  final List<NodeValue<ByteArray,byte[]>> toReadRepair=Lists.newArrayList();
  for (  NodeValue<ByteArray,byte[]> v : readRepairer.getRepairs(nodeValues)) {
    Versioned<byte[]> versioned=Versioned.value(v.getVersioned().getValue(),((VectorClock)v.getVersion()).clone());
    toReadRepair.add(new NodeValue<ByteArray,byte[]>(v.getNodeId(),v.getKey(),versioned));
  }
  this.executor.execute(new Runnable(){
    @Override public void run(){
      for (      NodeValue<ByteArray,byte[]> v : toReadRepair) {
        try {
          if (logger.isDebugEnabled())           logger.debug("Doing read repair on node " + v.getNodeId() + " for key '"+ v.getKey()+ "' with version "+ v.getVersion()+ ".");
          innerStores.get(v.getNodeId()).put(v.getKey(),v.getVersioned(),null);
        }
 catch (        VoldemortApplicationException e) {
          if (logger.isDebugEnabled())           logger.debug("Read repair cancelled due to application level exception on node " + v.getNodeId() + " for key '"+ v.getKey()+ "' with version "+ v.getVersion()+ ": "+ e.getMessage());
        }
catch (        Exception e) {
          logger.debug("Read repair failed: ",e);
        }
      }
    }
  }
);
}
