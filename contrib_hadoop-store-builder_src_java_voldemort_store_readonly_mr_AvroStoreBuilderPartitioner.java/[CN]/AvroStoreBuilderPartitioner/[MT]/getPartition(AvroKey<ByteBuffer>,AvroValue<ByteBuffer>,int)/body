{
  byte[] keyBytes=null, valueBytes;
  keyBytes=new byte[key.datum().remaining()];
  key.datum().get(keyBytes);
  valueBytes=new byte[value.datum().remaining()];
  value.datum().get(valueBytes);
  BytesWritable outputKey=new BytesWritable(keyBytes);
  BytesWritable outputVal=new BytesWritable(valueBytes);
  ByteBuffer keyBuffer=null, valueBuffer=null;
  keyBuffer=ByteBuffer.allocate(keyBytes.length);
  keyBuffer.put(keyBytes);
  keyBuffer.rewind();
  valueBuffer=ByteBuffer.allocate(valueBytes.length);
  valueBuffer.put(valueBytes);
  valueBuffer.rewind();
  key.datum(keyBuffer);
  value.datum(valueBuffer);
  int partitionId=ByteUtils.readInt(valueBytes,ByteUtils.SIZE_OF_INT);
  int chunkId=ReadOnlyUtils.chunk(keyBytes,getNumChunks());
  if (getSaveKeys()) {
    int replicaType=(int)ByteUtils.readBytes(valueBytes,2 * ByteUtils.SIZE_OF_INT,ByteUtils.SIZE_OF_BYTE);
    if (getReducerPerBucket()) {
      return (partitionId * getStoreDef().getReplicationFactor() + replicaType) % numReduceTasks;
    }
 else {
      return ((partitionId * getStoreDef().getReplicationFactor() * getNumChunks()) + (replicaType * getNumChunks()) + chunkId) % numReduceTasks;
    }
  }
 else {
    if (getReducerPerBucket()) {
      return partitionId % numReduceTasks;
    }
 else {
      return (partitionId * getNumChunks() + chunkId) % numReduceTasks;
    }
  }
}
