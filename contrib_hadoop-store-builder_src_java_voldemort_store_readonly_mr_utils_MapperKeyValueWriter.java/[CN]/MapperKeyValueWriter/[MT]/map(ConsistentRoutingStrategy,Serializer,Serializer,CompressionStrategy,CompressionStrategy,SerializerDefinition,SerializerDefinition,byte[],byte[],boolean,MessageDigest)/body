{
  List outputList=new ArrayList();
  if (keySerializerDefinition.hasCompression()) {
    keyBytes=keyCompressor.deflate(keyBytes);
  }
  if (valueSerializerDefinition.hasCompression()) {
    valBytes=valueCompressor.deflate(valBytes);
  }
  byte[] outputValue;
  int offsetTillNow=2 * ByteUtils.SIZE_OF_INT;
  if (getSaveKeys) {
    outputValue=new byte[valBytes.length + keyBytes.length + ByteUtils.SIZE_OF_BYTE+ 4 * ByteUtils.SIZE_OF_INT];
    offsetTillNow+=ByteUtils.SIZE_OF_BYTE;
    ByteUtils.writeInt(outputValue,keyBytes.length,offsetTillNow);
    offsetTillNow+=ByteUtils.SIZE_OF_INT;
    ByteUtils.writeInt(outputValue,valBytes.length,offsetTillNow);
    offsetTillNow+=ByteUtils.SIZE_OF_INT;
    System.arraycopy(keyBytes,0,outputValue,offsetTillNow,keyBytes.length);
    offsetTillNow+=keyBytes.length;
    System.arraycopy(valBytes,0,outputValue,offsetTillNow,valBytes.length);
    outputKey=new BytesWritable(ByteUtils.copy(md5er.digest(keyBytes),0,2 * ByteUtils.SIZE_OF_INT));
  }
 else {
    outputValue=new byte[valBytes.length + 2 * ByteUtils.SIZE_OF_INT];
    System.arraycopy(valBytes,0,outputValue,offsetTillNow,valBytes.length);
    outputKey=new BytesWritable(md5er.digest(keyBytes));
  }
  List<Integer> partitionList=routingStrategy.getPartitionList(keyBytes);
  Node[] partitionToNode=routingStrategy.getPartitionToNode();
  System.out.println("num partitions the key maps to is :" + partitionList.size());
  for (int replicaType=0; replicaType < partitionList.size(); replicaType++) {
    System.out.println("key is hashed to node:" + partitionToNode[partitionList.get(replicaType)]);
  }
  for (int replicaType=0; replicaType < partitionList.size(); replicaType++) {
    ByteUtils.writeInt(outputValue,partitionToNode[partitionList.get(replicaType)].getId(),0);
    if (getSaveKeys) {
      ByteUtils.writeInt(outputValue,partitionList.get(0),ByteUtils.SIZE_OF_INT);
      ByteUtils.writeBytes(outputValue,replicaType,2 * ByteUtils.SIZE_OF_INT,ByteUtils.SIZE_OF_BYTE);
    }
 else {
      ByteUtils.writeInt(outputValue,partitionList.get(replicaType),ByteUtils.SIZE_OF_INT);
    }
    outputVal=new BytesWritable(outputValue);
    Pair<BytesWritable,BytesWritable> pair=Pair.create(outputKey,outputVal);
    outputList.add(pair);
  }
  return outputList;
}
