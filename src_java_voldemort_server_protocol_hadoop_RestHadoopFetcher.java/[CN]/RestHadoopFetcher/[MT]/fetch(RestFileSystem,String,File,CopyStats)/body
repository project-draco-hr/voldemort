{
  boolean fetchSucceed=false;
  if (rfs.fileStatus(source).isDir()) {
    Utils.mkdirs(dest);
    RestFileStatus statuses[]=rfs.listStatus(source).toArray();
    if (statuses != null && statuses.length > 0) {
      Arrays.sort(statuses,new IndexFileLastComparator());
      byte[] origCheckSum=null;
      CheckSumType checkSumType=CheckSumType.NONE;
      CheckSum checkSumGenerator=null;
      CheckSum fileCheckSumGenerator=null;
      for (      RestFileStatus status : statuses) {
        String fileNameWithAbsolutePath=status.getAbsolutePath();
        String shortFileName=status.getPathSuffix();
        logger.info("fetching file: " + fileNameWithAbsolutePath);
        if (shortFileName.contains("checkSum.txt")) {
          logger.warn("Found checksum file in old format: " + shortFileName);
        }
 else         if (shortFileName.contains(".metadata")) {
          logger.debug("Reading .metadata");
          File copyLocation=new File(dest,shortFileName);
          copyFileWithCheckSum(rfs,fileNameWithAbsolutePath,copyLocation,stats,null);
          ReadOnlyStorageMetadata metadata;
          try {
            metadata=new ReadOnlyStorageMetadata(copyLocation);
          }
 catch (          IOException e) {
            logger.error("Error reading metadata file ",e);
            throw new VoldemortException(e);
          }
          String checkSumTypeString=(String)metadata.get(ReadOnlyStorageMetadata.CHECKSUM_TYPE);
          String checkSumString=(String)metadata.get(ReadOnlyStorageMetadata.CHECKSUM);
          if (checkSumTypeString != null && checkSumString != null) {
            try {
              origCheckSum=Hex.decodeHex(checkSumString.toCharArray());
            }
 catch (            DecoderException e) {
              logger.error("Exception reading checksum file. Ignoring checksum ",e);
              continue;
            }
            logger.debug("Checksum from .metadata " + new String(Hex.encodeHex(origCheckSum)));
            checkSumType=CheckSum.fromString(checkSumTypeString);
            checkSumGenerator=CheckSum.getInstance(checkSumType);
          }
        }
 else         if (!shortFileName.startsWith(".")) {
          File copyLocation=new File(dest,shortFileName);
          fileCheckSumGenerator=copyFileWithCheckSum(rfs,fileNameWithAbsolutePath,copyLocation,stats,checkSumType);
          if (fileCheckSumGenerator != null && checkSumGenerator != null) {
            byte[] checkSum=fileCheckSumGenerator.getCheckSum();
            if (logger.isDebugEnabled()) {
              logger.debug("Checksum for " + shortFileName + " - "+ new String(Hex.encodeHex(checkSum)));
            }
            checkSumGenerator.update(checkSum);
          }
        }
      }
      logger.info("Completed reading all files from " + source.toString() + " to "+ dest.getAbsolutePath());
      if (checkSumType != CheckSumType.NONE) {
        byte[] newCheckSum=checkSumGenerator.getCheckSum();
        boolean checkSumComparison=(ByteUtils.compare(newCheckSum,origCheckSum) == 0);
        logger.info("Checksum generated from streaming - " + new String(Hex.encodeHex(newCheckSum)));
        logger.info("Checksum on file - " + new String(Hex.encodeHex(origCheckSum)));
        logger.info("Check-sum verification - " + checkSumComparison);
        fetchSucceed=checkSumComparison;
      }
 else {
        logger.info("No check-sum verification required");
        fetchSucceed=true;
      }
    }
 else {
      logger.error("No files found under the source location: " + source);
    }
  }
 else {
    logger.error("Source " + source + " should be a directory");
  }
  return fetchSucceed;
}
