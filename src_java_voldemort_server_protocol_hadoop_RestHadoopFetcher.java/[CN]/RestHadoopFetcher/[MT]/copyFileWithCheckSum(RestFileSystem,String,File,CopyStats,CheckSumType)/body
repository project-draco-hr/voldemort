{
  CheckSum fileCheckSumGenerator=null;
  logger.info("Starting copy of " + source + " to "+ dest);
  BufferedInputStream input=null;
  OutputStream output=null;
  try {
    if (checkSumType != null) {
      fileCheckSumGenerator=CheckSum.getInstance(checkSumType);
    }
    input=new BufferedInputStream(rfs.openFile(source).getInputStream());
    output=new BufferedOutputStream(new FileOutputStream(dest));
    byte[] buffer=new byte[bufferSize];
    while (true) {
      int read=input.read(buffer);
      if (read < 0) {
        break;
      }
 else {
        output.write(buffer,0,read);
      }
      if (fileCheckSumGenerator != null) {
        fileCheckSumGenerator.update(buffer,0,read);
      }
      if (throttler != null) {
        throttler.maybeThrottle(read);
      }
      stats.recordBytes(read);
      if (stats.getBytesSinceLastReport() > reportingIntervalBytes) {
        NumberFormat format=NumberFormat.getNumberInstance();
        format.setMaximumFractionDigits(2);
        logger.info(stats.getTotalBytesCopied() / (1024 * 1024) + " MB copied at " + format.format(stats.getBytesPerSecond() / (1024 * 1024)) + " MB/sec - " + format.format(stats.getPercentCopied()) + " % complete, destination:" + dest);
        if (this.status != null) {
          this.status.setStatus(stats.getTotalBytesCopied() / (1024 * 1024) + " MB copied at " + format.format(stats.getBytesPerSecond() / (1024 * 1024)) + " MB/sec - " + format.format(stats.getPercentCopied()) + " % complete, destination:" + dest);
        }
        stats.reset();
      }
    }
    logger.info("Completed copy of " + source + " to "+ dest);
  }
 catch (  IOException ioe) {
    logger.error("Error during copying file ",ioe);
    ioe.printStackTrace();
    throw ioe;
  }
catch (  Throwable te) {
    logger.error("Error during copying file ",te);
    return null;
  }
 finally {
    IOUtils.closeQuietly(output);
    IOUtils.closeQuietly(input);
  }
  return fileCheckSumGenerator;
}
