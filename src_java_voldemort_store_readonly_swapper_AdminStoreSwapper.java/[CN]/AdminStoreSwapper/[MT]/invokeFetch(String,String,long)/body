{
  final Map<Integer,Future<String>> fetchDirs=new HashMap<Integer,Future<String>>();
  for (  final Node node : cluster.getNodes()) {
    fetchDirs.put(node.getId(),executor.submit(new Callable<String>(){
      public String call() throws Exception {
        String response=null;
        if (buildPrimaryReplicasOnly) {
          response=fetch(basePath);
        }
 else {
          String storeDir=basePath + "/" + ReadOnlyUtils.NODE_DIRECTORY_PREFIX+ node.getId();
          response=fetch(storeDir);
        }
        if (response == null)         throw new VoldemortException("Fetch request on " + node.briefToString() + " failed");
        logger.info("Fetch succeeded on " + node.briefToString());
        return response.trim();
      }
      private String fetch(      String storeDir){
        logger.info("Invoking fetch for " + node.briefToString() + " for "+ storeDir);
        return adminClient.readonlyOps.fetchStore(node.getId(),storeName,storeDir,pushVersion,timeoutMs);
      }
    }
));
  }
  Map<Node,Response> fetchResponseMap=Maps.newTreeMap();
  boolean fetchErrors=false;
  ArrayList<Node> failedNodes=new ArrayList<Node>();
  for (  final Node node : cluster.getNodes()) {
    Future<String> val=fetchDirs.get(node.getId());
    try {
      String response=val.get();
      fetchResponseMap.put(node,new Response(response));
    }
 catch (    Exception e) {
      if (e.getCause() instanceof UnauthorizedStoreException) {
        throw (UnauthorizedStoreException)e.getCause();
      }
 else {
        fetchErrors=true;
        fetchResponseMap.put(node,new Response(e));
        failedNodes.add(node);
      }
    }
  }
  if (fetchErrors) {
    for (    Map.Entry<Node,Response> entry : fetchResponseMap.entrySet()) {
      if (!entry.getValue().isSuccessful()) {
        logger.error("Error on " + entry.getKey().briefToString() + " during push : ",entry.getValue().getException());
      }
    }
    Iterator<FailedFetchStrategy> strategyIterator=failedFetchStrategyList.iterator();
    boolean swapIsPossible=false;
    FailedFetchStrategy strategy=null;
    while (strategyIterator.hasNext() && !swapIsPossible) {
      strategy=strategyIterator.next();
      try {
        logger.info("About to attempt: " + strategy.toString());
        swapIsPossible=strategy.dealWithIt(storeName,pushVersion,fetchResponseMap);
        logger.info("Finished executing: " + strategy.toString() + "; swapIsPossible: "+ swapIsPossible);
      }
 catch (      Exception e) {
        if (strategyIterator.hasNext()) {
          logger.error("Got an exception while trying to execute: " + strategy.toString() + ". Continuing with next strategy.",e);
        }
 else {
          logger.error("Got an exception while trying to execute the last remaining strategy: " + strategy.toString() + ". Swap will be aborted.",e);
        }
      }
    }
    if (!swapIsPossible) {
      throw new VoldemortException("Exception during push. Swap will be aborted",fetchResponseMap.get(failedNodes.get(0)).getException());
    }
  }
  return fetchResponseMap;
}
