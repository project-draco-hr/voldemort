{
  Map<Integer,Future<String>> fetchDirs=new HashMap<Integer,Future<String>>();
  for (  final Node node : cluster.getNodes()) {
    fetchDirs.put(node.getId(),executor.submit(new Callable<String>(){
      public String call() throws Exception {
        String storeDir=basePath + "/node-" + node.getId();
        logger.info("Invoking fetch for node " + node.getId() + " for "+ storeDir);
        String response=adminClient.fetchStore(node.getId(),storeName,storeDir,pushVersion,timeoutMs);
        if (response == null)         throw new VoldemortException("Fetch request on node " + node.getId() + " ("+ node.getHost()+ ") failed");
        logger.info("Fetch succeeded on node " + node.getId());
        return response.trim();
      }
    }
));
  }
  TreeMap<Integer,String> results=Maps.newTreeMap();
  HashMap<Integer,Exception> exceptions=Maps.newHashMap();
  for (int nodeId=0; nodeId < cluster.getNumberOfNodes(); nodeId++) {
    Future<String> val=fetchDirs.get(nodeId);
    try {
      results.put(nodeId,val.get());
    }
 catch (    Exception e) {
      exceptions.put(nodeId,new VoldemortException(e));
    }
  }
  if (!exceptions.isEmpty()) {
    if (deleteFailedFetch) {
      for (      int successfulNodeId : results.keySet()) {
        try {
          logger.info("Deleting fetched data from node " + successfulNodeId);
          adminClient.failedFetchStore(successfulNodeId,storeName,results.get(successfulNodeId));
        }
 catch (        Exception e) {
          logger.error("Exception thrown during delete operation on node " + successfulNodeId + " : ",e);
        }
      }
    }
    for (    int failedNodeId : exceptions.keySet()) {
      logger.error("Error on node " + failedNodeId + " during push : ",exceptions.get(failedNodeId));
    }
    throw new VoldemortException("Exception during pushes to nodes " + Joiner.on(",").join(exceptions.keySet()) + " failed");
  }
  return Lists.newArrayList(results.values());
}
