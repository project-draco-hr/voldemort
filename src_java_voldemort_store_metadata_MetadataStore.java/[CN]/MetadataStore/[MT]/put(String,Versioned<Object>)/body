{
  writeLock.lock();
  try {
    if (this.storeNames.contains(key) || key.equals(STORES_KEY)) {
      List<StoreDefinition> storeDefinitions=(List<StoreDefinition>)value.getValue();
      StoreDefinitionUtils.validateSchemasAsNeeded(storeDefinitions);
      Set<String> storeNamesToDelete=new HashSet<String>();
      for (      String storeName : this.storeNames) {
        storeNamesToDelete.add(storeName);
      }
      StoreDefinitionsMapper mapper=new StoreDefinitionsMapper();
      Set<String> specifiedStoreNames=new HashSet<String>();
      for (      StoreDefinition storeDef : storeDefinitions) {
        specifiedStoreNames.add(storeDef.getName());
        String storeDefStr=mapper.writeStore(storeDef);
        Versioned<String> versionedValueStr=new Versioned<String>(storeDefStr,value.getVersion());
        this.storeDefinitionsStorageEngine.put(storeDef.getName(),versionedValueStr,"");
        this.metadataCache.put(storeDef.getName(),new Versioned<Object>(storeDefStr,value.getVersion()));
      }
      if (key.equals(STORES_KEY)) {
        storeNamesToDelete.removeAll(specifiedStoreNames);
        resetStoreDefinitions(storeNamesToDelete);
      }
      initStoreDefinitions(value.getVersion());
      updateRoutingStrategies(getCluster(),getStoreDefList());
    }
 else     if (METADATA_KEYS.contains(key)) {
      putInner(key,convertObjectToString(key,value));
      metadataCache.put(key,value);
      if (CLUSTER_KEY.equals(key)) {
        updateRoutingStrategies((Cluster)value.getValue(),getStoreDefList());
      }
 else       if (NODE_ID_KEY.equals(key)) {
        initNodeId(getNodeIdNoLock());
      }
 else       if (SYSTEM_STORES_KEY.equals(key))       throw new VoldemortException("Cannot overwrite system store definitions");
    }
 else {
      throw new VoldemortException("Unhandled Key:" + key + " for MetadataStore put()");
    }
  }
  finally {
    writeLock.unlock();
  }
}
