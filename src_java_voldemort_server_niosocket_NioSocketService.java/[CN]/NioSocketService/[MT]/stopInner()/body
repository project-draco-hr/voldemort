{
  try {
    threadPool.shutdownNow();
    boolean terminated=threadPool.awaitTermination(15,TimeUnit.SECONDS);
    if (!terminated) {
      if (logger.isEnabledFor(Level.WARN))       logger.warn("Thread pool terminated abnormally");
    }
  }
 catch (  Exception e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn("Thread pool terminated abnormally",e);
  }
  try {
    selectorManagerThread.interrupt();
    selectorManagerThread.join(15 * 1000);
    if (selectorManagerThread.isAlive()) {
      if (logger.isEnabledFor(Level.WARN))       logger.warn("Selector manager thread not terminated");
    }
  }
 catch (  Exception e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn("Selector manager thread error",e);
  }
  try {
    selector.close();
  }
 catch (  Exception e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e.getMessage(),e);
  }
 finally {
    selector=null;
  }
  try {
    serverSocketChannel.socket().close();
  }
 catch (  Exception e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e.getMessage(),e);
  }
  try {
    serverSocketChannel.close();
  }
 catch (  Exception e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e.getMessage(),e);
  }
 finally {
    serverSocketChannel=null;
  }
}
