{
  if (logger.isInfoEnabled())   logger.info("Server now listening for connections on port " + port);
  AtomicInteger counter=new AtomicInteger();
  while (true) {
    if (Thread.currentThread().isInterrupted()) {
      if (logger.isInfoEnabled())       logger.info("Acceptor thread interrupted");
      break;
    }
    SocketChannel socketChannel=null;
    try {
      socketChannel=serverSocketChannel.accept();
      if (socketChannel == null) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn("Claimed accept but nothing to select");
        continue;
      }
      int totalSelectors=selectorManagers.length;
      boolean isChannelRegistered=false;
      for (int i=0; i < totalSelectors; i++) {
        NioSelectorManager selectorManager=selectorManagers[counter.getAndIncrement() % selectorManagers.length];
        if (selectorManager.isHealthy()) {
          selectorManager.accept(socketChannel);
          isChannelRegistered=true;
          break;
        }
      }
      if (isChannelRegistered == false) {
        logger.error("No healthy selector could be found for channel " + socketChannel + " number of selectors "+ totalSelectors+ " closing the socket. ");
        IOUtils.closeQuietly(socketChannel);
      }
    }
 catch (    ClosedByInterruptException e) {
      if (socketChannel != null) {
        IOUtils.closeQuietly(socketChannel);
      }
      if (logger.isTraceEnabled())       logger.trace("Acceptor thread interrupted, closing");
      break;
    }
catch (    Exception e) {
      if (socketChannel != null) {
        IOUtils.closeQuietly(socketChannel);
      }
      if (logger.isEnabledFor(Level.WARN))       logger.warn(e.getMessage(),e);
    }
  }
  if (logger.isInfoEnabled())   logger.info("Server has stopped listening for connections on port " + port);
}
