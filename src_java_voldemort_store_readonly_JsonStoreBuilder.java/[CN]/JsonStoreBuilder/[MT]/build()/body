{
  int numNodes=cluster.getNumberOfNodes();
  DataOutputStream[] indexes=new DataOutputStream[numNodes];
  DataOutputStream[] datas=new DataOutputStream[numNodes];
  long[] positions=new long[numNodes];
  int current=0;
  for (  Node node : cluster.getNodes()) {
    File indexFile=new File(outputDir,node.getId() + ".index");
    File dataFile=new File(outputDir,node.getId() + ".data");
    positions[current]=0;
    outputDir.mkdirs();
    indexes[current]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(indexFile),1000000));
    datas[current]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dataFile),1000000));
    current++;
  }
  SerializerFactory factory=new DefaultSerializerFactory();
  Serializer keySerializer=factory.getSerializer(storeDefinition.getKeySerializer());
  Serializer valueSerializer=factory.getSerializer(storeDefinition.getValueSerializer());
  logger.info("Reading items...");
  int count=0;
  ExternalSorter<KeyValuePair> sorter=new ExternalSorter<KeyValuePair>(new KeyValuePairSerializer(),new KeyMd5Comparator(),internalSortSize,numThreads);
  JsonObjectIterator iter=new JsonObjectIterator(reader,keySerializer,valueSerializer);
  for (  KeyValuePair pair : sorter.sorted(iter)) {
    List<Node> nodes=this.routingStrategy.routeRequest(pair.getKey());
    byte[] keyMd5=pair.getKeyMd5();
    for (int i=0; i < this.storeDefinition.getReplicationFactor(); i++) {
      int nodeId=nodes.get(i).getId();
      int numBytes=pair.getValue().length;
      datas[nodeId].writeInt(numBytes);
      datas[nodeId].write(pair.getValue());
      indexes[nodeId].write(keyMd5);
      indexes[nodeId].writeLong(positions[nodeId]);
      positions[nodeId]+=numBytes + 4;
    }
    count++;
  }
  logger.info(count + " items read.");
  logger.info("Closing all store files");
  for (int i=0; i < numNodes; i++) {
    indexes[i].close();
    datas[i].close();
  }
}
