{
  logger.info("Building store " + storeDefinition.getName() + " for "+ cluster.getNumberOfPartitions()+ " partitions with "+ numChunks+ " chunks per partitions and type "+ ReadOnlyStorageFormat.READONLY_V1);
  Map<Integer,DataOutputStream[]> indexes=new HashMap<Integer,DataOutputStream[]>();
  Map<Integer,DataOutputStream[]> datas=new HashMap<Integer,DataOutputStream[]>();
  Map<Integer,Integer[]> positions=new HashMap<Integer,Integer[]>();
  int[] partitionIdToChunkOffset=new int[cluster.getNumberOfPartitions()];
  int[] partitionIdToNodeId=new int[cluster.getNumberOfPartitions()];
  for (  Node node : cluster.getNodes()) {
    int nodeId=node.getId();
    indexes.put(nodeId,new DataOutputStream[node.getNumberOfPartitions() * numChunks]);
    datas.put(nodeId,new DataOutputStream[node.getNumberOfPartitions() * numChunks]);
    positions.put(nodeId,new Integer[node.getNumberOfPartitions() * numChunks]);
    File nodeDir=new File(outputDir,"node-" + Integer.toString(nodeId));
    nodeDir.mkdirs();
    BufferedWriter writer=new BufferedWriter(new FileWriter(new File(nodeDir,".metadata")));
    ReadOnlyStorageMetadata metadata=new ReadOnlyStorageMetadata();
    metadata.add(ReadOnlyStorageMetadata.FORMAT,ReadOnlyStorageFormat.READONLY_V1.getCode());
    writer.write(metadata.toJsonString());
    writer.close();
    int globalChunk=0;
    for (    Integer partition : node.getPartitionIds()) {
      partitionIdToChunkOffset[partition]=globalChunk;
      partitionIdToNodeId[partition]=node.getId();
      for (int chunk=0; chunk < numChunks; chunk++) {
        File indexFile=new File(nodeDir,Integer.toString(partition) + "_" + Integer.toString(chunk)+ ".index");
        File dataFile=new File(nodeDir,Integer.toString(partition) + "_" + Integer.toString(chunk)+ ".data");
        DataOutputStream[] datasOutputStreamArray=datas.get(nodeId);
        DataOutputStream[] indexesOutputStreamArray=indexes.get(nodeId);
        Integer[] positionsArray=positions.get(nodeId);
        positionsArray[globalChunk]=0;
        indexesOutputStreamArray[globalChunk]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(indexFile),ioBufferSize));
        datasOutputStreamArray[globalChunk]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dataFile),ioBufferSize));
        globalChunk++;
      }
    }
  }
  logger.info("Reading items...");
  int count=0;
  ExternalSorter<KeyValuePair> sorter=new ExternalSorter<KeyValuePair>(new KeyValuePairSerializer(),new KeyMd5Comparator(),internalSortSize,tempDir.getAbsolutePath(),ioBufferSize,numThreads,gzipIntermediate);
  JsonObjectIterator iter=new JsonObjectIterator(reader,storeDefinition);
  for (  KeyValuePair pair : sorter.sorted(iter)) {
    byte[] keyMd5=pair.getKeyMd5();
    List<Integer> partitionIds=this.routingStrategy.getPartitionList(pair.getKey());
    for (    Integer partitionId : partitionIds) {
      int localChunkId=ReadOnlyUtils.chunk(keyMd5,numChunks);
      int chunk=localChunkId + partitionIdToChunkOffset[partitionId];
      int nodeId=partitionIdToNodeId[partitionId];
      DataOutputStream[] datasOutputStreamArray=datas.get(nodeId);
      DataOutputStream[] indexesOutputStreamArray=indexes.get(nodeId);
      Integer[] positionsArray=positions.get(nodeId);
      datasOutputStreamArray[chunk].writeInt(pair.getValue().length);
      datasOutputStreamArray[chunk].write(pair.getValue());
      indexesOutputStreamArray[chunk].write(keyMd5);
      indexesOutputStreamArray[chunk].writeInt(positionsArray[chunk]);
      positionsArray[chunk]+=pair.getValue().length + 4;
      checkOverFlow(chunk,positionsArray[chunk]);
    }
    count++;
  }
  logger.info(count + " items read.");
  logger.info("Closing all store files.");
  for (  Node node : cluster.getNodes()) {
    DataOutputStream[] datasOutputStreamArray=datas.get(node.getId());
    DataOutputStream[] indexesOutputStreamArray=indexes.get(node.getId());
    for (int chunk=0; chunk < numChunks * node.getNumberOfPartitions(); chunk++) {
      indexesOutputStreamArray[chunk].close();
      datasOutputStreamArray[chunk].close();
    }
  }
}
