{
  logger.info("Building store " + storeDefinition.getName() + " for "+ cluster.getNumberOfNodes()+ " with "+ numChunks+ " chunks per node and type "+ ReadOnlyStorageFormat.READONLY_V0);
  Map<Integer,DataOutputStream[]> indexes=new HashMap<Integer,DataOutputStream[]>();
  Map<Integer,DataOutputStream[]> datas=new HashMap<Integer,DataOutputStream[]>();
  Map<Integer,Integer[]> positions=new HashMap<Integer,Integer[]>();
  for (  Node node : cluster.getNodes()) {
    int nodeId=node.getId();
    File nodeDir=new File(outputDir,"node-" + Integer.toString(nodeId));
    nodeDir.mkdirs();
    BufferedWriter writer=new BufferedWriter(new FileWriter(new File(nodeDir,".metadata")));
    ReadOnlyStorageMetadata metadata=new ReadOnlyStorageMetadata();
    metadata.add(ReadOnlyStorageMetadata.FORMAT,ReadOnlyStorageFormat.READONLY_V0.getCode());
    writer.write(metadata.toJsonString());
    writer.close();
    indexes.put(nodeId,new DataOutputStream[numChunks]);
    datas.put(nodeId,new DataOutputStream[numChunks]);
    positions.put(nodeId,new Integer[numChunks]);
    for (int chunk=0; chunk < numChunks; chunk++) {
      File indexFile=new File(nodeDir,chunk + ".index");
      File dataFile=new File(nodeDir,chunk + ".data");
      Integer[] positionsArray=positions.get(nodeId);
      positionsArray[chunk]=0;
      DataOutputStream[] indexesOutputStreamArray=indexes.get(nodeId);
      indexesOutputStreamArray[chunk]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(indexFile),ioBufferSize));
      DataOutputStream[] datasOutputStreamArray=datas.get(nodeId);
      datasOutputStreamArray[chunk]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dataFile),ioBufferSize));
    }
  }
  logger.info("Reading items...");
  int count=0;
  ExternalSorter<KeyValuePair> sorter=new ExternalSorter<KeyValuePair>(new KeyValuePairSerializer(),new KeyMd5Comparator(),internalSortSize,tempDir.getAbsolutePath(),ioBufferSize,numThreads,gzipIntermediate);
  JsonObjectIterator iter=new JsonObjectIterator(reader,storeDefinition);
  for (  KeyValuePair pair : sorter.sorted(iter)) {
    List<Node> nodes=this.routingStrategy.routeRequest(pair.getKey());
    byte[] keyMd5=pair.getKeyMd5();
    for (int i=0; i < this.storeDefinition.getReplicationFactor(); i++) {
      int nodeId=nodes.get(i).getId();
      int chunk=ReadOnlyUtils.chunk(keyMd5,numChunks);
      int numBytes=pair.getValue().length;
      DataOutputStream[] datasOutputStreamArray=datas.get(nodeId);
      datasOutputStreamArray[chunk].writeInt(numBytes);
      datasOutputStreamArray[chunk].write(pair.getValue());
      DataOutputStream[] indexesOutputStreamArray=indexes.get(nodeId);
      Integer[] positionsArray=positions.get(nodeId);
      indexesOutputStreamArray[chunk].write(keyMd5);
      indexesOutputStreamArray[chunk].writeInt(positionsArray[chunk]);
      positionsArray[chunk]+=numBytes + 4;
      checkOverFlow(chunk,positionsArray[chunk]);
    }
    count++;
  }
  logger.info(count + " items read.");
  logger.info("Closing all store files.");
  for (  int node : indexes.keySet()) {
    for (int chunk=0; chunk < numChunks; chunk++) {
      DataOutputStream[] indexesOutputStreamArray=indexes.get(node);
      indexesOutputStreamArray[chunk].close();
      DataOutputStream[] datasOutputStreamArray=datas.get(node);
      datasOutputStreamArray[chunk].close();
    }
  }
}
