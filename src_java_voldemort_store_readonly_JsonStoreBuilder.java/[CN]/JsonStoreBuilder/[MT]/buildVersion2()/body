{
  logger.info("Building store " + storeDefinition.getName() + " for "+ cluster.getNumberOfPartitions()+ " partitions, "+ storeDefinition.getReplicationFactor()+ " replica types, "+ numChunks+ " chunks per partitions per replica type and type "+ ReadOnlyStorageFormat.READONLY_V2);
  DataOutputStream[][] indexes=new DataOutputStream[cluster.getNumberOfPartitions()][];
  DataOutputStream[][] datas=new DataOutputStream[cluster.getNumberOfPartitions()][];
  int[][] positions=new int[cluster.getNumberOfPartitions()][];
  File tempDirectory=new File(Utils.notNull(System.getProperty("java.io.tmpdir")),"tempDir-" + Integer.toString(new Random().nextInt()));
  Utils.mkdirs(tempDirectory);
  for (int partitionId=0; partitionId < cluster.getNumberOfPartitions(); partitionId++) {
    indexes[partitionId]=new DataOutputStream[storeDefinition.getReplicationFactor() * numChunks];
    datas[partitionId]=new DataOutputStream[storeDefinition.getReplicationFactor() * numChunks];
    positions[partitionId]=new int[storeDefinition.getReplicationFactor() * numChunks];
    int globalChunkId=0;
    for (int repType=0; repType < storeDefinition.getReplicationFactor(); repType++) {
      for (int chunk=0; chunk < numChunks; chunk++) {
        File indexFile=new File(tempDirectory,Integer.toString(partitionId) + "_" + Integer.toString(repType)+ "_"+ Integer.toString(chunk)+ ".index");
        File dataFile=new File(tempDirectory,Integer.toString(partitionId) + "_" + Integer.toString(repType)+ "_"+ Integer.toString(chunk)+ ".data");
        positions[partitionId][globalChunkId]=0;
        indexes[partitionId][globalChunkId]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(indexFile),ioBufferSize));
        datas[partitionId][globalChunkId]=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dataFile),ioBufferSize));
        globalChunkId++;
      }
    }
  }
  logger.info("Reading items...");
  ExternalSorter<KeyValuePair> sorter=new ExternalSorter<KeyValuePair>(new KeyValuePairSerializer(),new KeyMd5Comparator(),internalSortSize,tempDir.getAbsolutePath(),ioBufferSize,numThreads,gzipIntermediate);
  JsonObjectIterator iter=new JsonObjectIterator(reader,storeDefinition);
  int count=0;
  HashMap<Pair<Integer,Integer>,Pair<byte[],byte[]>> previousElements=Maps.newHashMap();
  for (  KeyValuePair currentElement : sorter.sorted(iter)) {
    List<Integer> partitionIds=this.routingStrategy.getPartitionList(currentElement.getKey());
    int masterPartition=partitionIds.get(0);
    int localChunkId=ReadOnlyUtils.chunk(currentElement.getKeyMd5(),numChunks);
    for (int replicaType=0; replicaType < partitionIds.size(); replicaType++) {
      int globalChunkId=(replicaType * numChunks) + localChunkId;
      Pair<Integer,Integer> key=Pair.create(masterPartition,globalChunkId);
      if (!previousElements.containsKey(key)) {
        previousElements.put(key,Pair.create(ByteUtils.copy(currentElement.getKeyMd5(),0,2 * ByteUtils.SIZE_OF_INT),generateFirstElement(currentElement)));
      }
 else {
        Pair<byte[],byte[]> previousElement=previousElements.get(key);
        if (ByteUtils.compare(previousElement.getFirst(),currentElement.getKeyMd5(),0,2 * ByteUtils.SIZE_OF_INT) == 0) {
          short numKeys=ByteUtils.readShort(previousElement.getSecond(),0);
          ByteArrayOutputStream stream=new ByteArrayOutputStream();
          DataOutputStream valueStream=new DataOutputStream(stream);
          valueStream.writeShort(numKeys + 1);
          valueStream.write(ByteUtils.copy(previousElement.getSecond(),ByteUtils.SIZE_OF_SHORT,previousElement.getSecond().length));
          valueStream.writeInt(currentElement.getKey().length);
          valueStream.writeInt(currentElement.getValue().length);
          valueStream.write(currentElement.getKey());
          valueStream.write(currentElement.getValue());
          valueStream.flush();
          previousElements.put(key,Pair.create(previousElement.getFirst(),stream.toByteArray()));
        }
 else {
          indexes[masterPartition][globalChunkId].write(previousElement.getFirst());
          indexes[masterPartition][globalChunkId].writeInt(positions[masterPartition][globalChunkId]);
          datas[masterPartition][globalChunkId].write(previousElement.getSecond());
          positions[masterPartition][globalChunkId]+=previousElement.getSecond().length;
          previousElements.put(key,Pair.create(ByteUtils.copy(currentElement.getKeyMd5(),0,2 * ByteUtils.SIZE_OF_INT),generateFirstElement(currentElement)));
        }
      }
    }
    count++;
  }
  logger.info(count + " items read.");
  for (  Entry<Pair<Integer,Integer>,Pair<byte[],byte[]>> entry : previousElements.entrySet()) {
    int partitionId=entry.getKey().getFirst();
    int globalChunkId=entry.getKey().getSecond();
    byte[] keyMd5=entry.getValue().getFirst();
    byte[] value=entry.getValue().getSecond();
    indexes[partitionId][globalChunkId].write(keyMd5);
    indexes[partitionId][globalChunkId].writeInt(positions[partitionId][globalChunkId]);
    datas[partitionId][globalChunkId].write(value);
  }
  File[] nodeDirs=new File[cluster.getNumberOfNodes()];
  for (  Node node : cluster.getNodes()) {
    int nodeId=node.getId();
    File nodeDir=new File(outputDir,"node-" + Integer.toString(nodeId));
    nodeDir.mkdirs();
    nodeDirs[node.getId()]=nodeDir;
    BufferedWriter writer=new BufferedWriter(new FileWriter(new File(nodeDir,".metadata")));
    ReadOnlyStorageMetadata metadata=new ReadOnlyStorageMetadata();
    metadata.add(ReadOnlyStorageMetadata.FORMAT,ReadOnlyStorageFormat.READONLY_V2.getCode());
    writer.write(metadata.toJsonString());
    writer.close();
  }
  logger.info("Closing all store files.");
  for (int partitionId=0; partitionId < cluster.getNumberOfPartitions(); partitionId++) {
    for (int chunk=0; chunk < numChunks * storeDefinition.getReplicationFactor(); chunk++) {
      indexes[partitionId][chunk].close();
      datas[partitionId][chunk].close();
    }
  }
  RoutingStrategy strategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDefinition,cluster);
  Map<Integer,Integer> replicaMapping=ClusterUtils.getCurrentPartitionMapping(cluster);
  for (  File file : tempDirectory.listFiles()) {
    String fileName=file.getName();
    if (fileName.matches("^[\\d]+_[\\d]+_[\\d]+\\.(data|index)")) {
      String[] props=fileName.split("_");
      int partitionId=Integer.parseInt(props[0]);
      int replicaType=Integer.parseInt(props[1]);
      int nodeId=replicaMapping.get(strategy.getReplicatingPartitionList(partitionId).get(replicaType));
      Utils.move(file,new File(nodeDirs[nodeId],fileName));
    }
  }
}
