{
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("sshprivatekey","File containing SSH private key").withRequiredArg();
  parser.accepts("hostuserid","User ID on remote host").withRequiredArg();
  parser.accepts("voldemortroot","Voldemort's root directory on remote host").withRequiredArg();
  parser.accepts("voldemorthome","Voldemort's home directory on remote host").withRequiredArg();
  OptionSet options=parser.parse(args);
  File hostNamesFile=getRequiredInputFile(options,"hostnames");
  File sshPrivateKey=getRequiredInputFile(options,"sshprivatekey");
  String hostUserId=CmdUtils.valueOf(options,"hostuserid","root");
  String voldemortHomeDirectory=getRequiredString(options,"voldemorthome");
  String voldemortRootDirectory=getRequiredString(options,"voldemortroot");
  List<String> publicHostNames=getHostNamesFromFile(hostNamesFile,true);
  CommandLineClusterConfig config=new CommandLineClusterConfig();
  config.setHostNames(publicHostNames);
  config.setHostUserId(hostUserId);
  config.setSshPrivateKey(sshPrivateKey);
  config.setVoldemortHomeDirectory(voldemortHomeDirectory);
  config.setVoldemortRootDirectory(voldemortRootDirectory);
  Map<String,String> remoteTestArguments=new HashMap<String,String>();
  final String bootstrapUrl=getHostNamesFromFile(hostNamesFile,false).get(0);
  int startKeyIndex=0;
  final int numRequests=100000;
  final int iterations=25;
  for (  String publicHostName : publicHostNames) {
    remoteTestArguments.put(publicHostName,"-wd --start-key-index " + (startKeyIndex * numRequests) + " --value-size 100 --iterations "+ iterations+ " tcp://"+ bootstrapUrl+ ":6666 test "+ numRequests);
    startKeyIndex++;
  }
  config.setRemoteTestArguments(remoteTestArguments);
  List<RemoteTestResult> remoteTestResults=new SshRemoteTest(config).execute();
  new RemoteTestSummarizer().outputTestResults(remoteTestResults);
}
