{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("sshprivatekey","File containing SSH private key").withRequiredArg();
  parser.accepts("hostuserid","User ID on remote host").withRequiredArg();
  parser.accepts("voldemortroot","Voldemort's root directory on remote host").withRequiredArg();
  parser.accepts("voldemorthome","Voldemort's home directory on remote host").withRequiredArg();
  parser.accepts("start-key-index","Value of --start-key-index for voldemort-remote-test.sh on remote host").withRequiredArg().ofType(Integer.class);
  parser.accepts("numrequests","Value of numrequests for voldemort-remote-test.sh on remote host").withRequiredArg().ofType(Integer.class);
  parser.accepts("iterations","Value of --iterations for voldemort-remote-test.sh on remote host").withRequiredArg().ofType(Integer.class);
  parser.accepts("value-size","Value of --value-size for voldemort-remote-test.sh on remote host").withRequiredArg().ofType(Integer.class);
  parser.accepts("threads","Value of --threads for voldemort-remote-test.sh on remote host").withRequiredArg().ofType(Integer.class);
  parser.accepts("operations","Value of -r, -w, and/or -d for voldemort-remote-test.sh on remote host").withRequiredArg();
  parser.accepts("storename","Value of store name for voldemort-remote-test.sh on remote host, defaults to \"test\"").withRequiredArg();
  parser.accepts("bootstrapurl","Value of bootstrap-url for voldemort-remote-test.sh on remote host").withRequiredArg();
  OptionSet options=parse(args);
  List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(getRequiredInputFile(options,"hostnames"));
  List<String> hostNames=new ArrayList<String>();
  for (  HostNamePair hostNamePair : hostNamePairs)   hostNames.add(hostNamePair.getExternalHostName());
  File sshPrivateKey=getRequiredInputFile(options,"sshprivatekey");
  String hostUserId=CmdUtils.valueOf(options,"hostuserid","root");
  String voldemortHomeDirectory=getRequiredString(options,"voldemorthome");
  String voldemortRootDirectory=getRequiredString(options,"voldemortroot");
  int startKeyIndex=CmdUtils.valueOf(options,"start-key-index",0);
  int numRequests=getRequiredInt(options,"numrequests");
  int iterations=CmdUtils.valueOf(options,"iterations",1);
  int valueSize=CmdUtils.valueOf(options,"value-size",1024);
  int threads=CmdUtils.valueOf(options,"threads",8);
  String operations=getRequiredString(options,"operations");
  String bootstrapUrl=getRequiredString(options,"bootstrapurl");
  String storeName=CmdUtils.valueOf(options,"storename","test");
  Map<String,String> remoteTestArguments=new HashMap<String,String>();
  for (  String publicHostName : hostNames) {
    remoteTestArguments.put(publicHostName,"-" + operations + " --start-key-index "+ (startKeyIndex * numRequests)+ " --value-size "+ valueSize+ " --threads "+ threads+ " --iterations "+ iterations+ " "+ bootstrapUrl+ " "+ storeName+ " "+ numRequests);
    startKeyIndex++;
  }
  List<RemoteTestResult> remoteTestResults=new SshRemoteTest(hostNames,sshPrivateKey,hostUserId,voldemortRootDirectory,voldemortHomeDirectory,remoteTestArguments).execute();
  new RemoteTestSummarizer().outputTestResults(remoteTestResults);
}
