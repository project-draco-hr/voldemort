{
  List<Integer> zoneIds=new ArrayList<Integer>(targetCluster.getZoneIds());
  Cluster returnCluster=ClusterUtils.copyCluster(targetCluster);
  double currentMaxMinRatio=new ClusterInstance(returnCluster,storeDefs).analyzeBalance();
  for (int i=0; i < greedyAttempts; i++) {
    Collections.shuffle(zoneIds,new Random(System.currentTimeMillis()));
    for (    Integer zoneId : zoneIds) {
      System.out.println("Greedy swap attempt: zone " + zoneId + " , attempt "+ i+ " of "+ greedyAttempts);
      Cluster shuffleResults=swapGreedyRandomPartitionsWithinZone(returnCluster,zoneId,greedySwapMaxPartitionsPerNode,greedySwapMaxPartitionsPerZone,storeDefs);
      double nextMaxMinRatio=new ClusterInstance(shuffleResults,storeDefs).analyzeBalance();
      if (nextMaxMinRatio == currentMaxMinRatio) {
        System.out.println("Not improving for zone: " + zoneId);
      }
 else {
        System.out.println("Swap improved max-min ratio: " + currentMaxMinRatio + " -> "+ nextMaxMinRatio+ " (swap attempt "+ i+ " in zone "+ zoneId+ ")");
        int xZoneMoves=0;
        if (!enableXzoneShuffle) {
          xZoneMoves=RebalanceUtils.getCrossZoneMoves(shuffleResults,new RebalanceClusterPlan(returnCluster,shuffleResults,storeDefs,true));
        }
        if (xZoneMoves == 0) {
          returnCluster=shuffleResults;
          currentMaxMinRatio=nextMaxMinRatio;
        }
 else {
          System.out.println("BUT, swap resulted in a cross zone move and so is ignored.");
        }
      }
    }
  }
  return returnCluster;
}
