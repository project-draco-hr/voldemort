{
  if (!metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
    logger.error("Cannot run repair job since cluster is rebalancing");
    return;
  }
  ClosableIterator<Pair<ByteArray,Versioned<byte[]>>> iterator=null;
  Date startTime=new Date();
  boolean terminatedEarly=false;
  logger.info("Started repair job at " + startTime);
  Map<String,Long> localStats=Maps.newHashMap();
  for (  StoreDefinition storeDef : metadataStore.getStoreDefList()) {
    localStats.put(storeDef.getName(),0L);
  }
  acquireRepairPermit();
  try {
    RoutingStrategyFactory routingStrategyFactory=new RoutingStrategyFactory();
    StorageEngine<ByteArray,Slop,byte[]> slopStorageEngine=storeRepo.getSlopStore().asSlopStore();
    for (    StoreDefinition storeDef : metadataStore.getStoreDefList()) {
      if (isWritableStore(storeDef)) {
        logger.info("Repairing store " + storeDef.getName());
        StorageEngine<ByteArray,byte[],byte[]> engine=storeRepo.getStorageEngine(storeDef.getName());
        iterator=engine.entries();
        RoutingStrategy routingStrategy=routingStrategyFactory.updateRoutingStrategy(storeDef,metadataStore.getCluster());
        long repairSlops=0L;
        while (iterator.hasNext()) {
          Pair<ByteArray,Versioned<byte[]>> keyAndVal;
          keyAndVal=iterator.next();
          List<Node> nodes=routingStrategy.routeRequest(keyAndVal.getFirst().get());
          if (!hasDestination(nodes)) {
            for (            Node node : nodes) {
              Slop slop=new Slop(storeDef.getName(),Slop.Operation.PUT,keyAndVal.getFirst(),keyAndVal.getSecond().getValue(),null,node.getId(),new Date());
              Versioned<Slop> slopVersioned=new Versioned<Slop>(slop,keyAndVal.getSecond().getVersion());
              slopStorageEngine.put(slop.makeKey(),slopVersioned,null);
              repairSlops++;
            }
            engine.delete(keyAndVal.getFirst(),keyAndVal.getSecond().getVersion());
          }
        }
        closeIterator(iterator);
        localStats.put(storeDef.getName(),repairSlops);
        logger.info("Completed store " + storeDef.getName());
      }
    }
  }
 catch (  Exception e) {
    logger.error(e,e);
    terminatedEarly=true;
  }
 finally {
    closeIterator(iterator);
    if (!terminatedEarly) {
      resetStats(localStats);
    }
    this.repairPermits.release();
    logger.info("Completed repair job started at " + startTime);
  }
}
