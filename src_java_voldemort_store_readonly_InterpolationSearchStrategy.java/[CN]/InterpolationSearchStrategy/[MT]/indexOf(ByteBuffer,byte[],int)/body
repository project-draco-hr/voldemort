{
  int guess;
  int lowIdx=0;
  int indexSize=ReadOnlyUtils.POSITION_SIZE + key.length;
  int highIdx=indexFileSize / indexSize - 1;
  long lastIdx=highIdx;
  long lowValue=0;
  long highValue=0xFFFFFFFFL;
  long keyInt=ByteUtils.readUnsignedInt(key,0);
  byte[] found=new byte[16];
  while (true) {
    if (lowIdx > highIdx || keyInt < lowValue || keyInt > highValue)     return -1;
    if (highIdx == lowIdx) {
      guess=highIdx;
    }
 else {
      long size=highIdx - lowIdx;
      long offset=(size - 1) * (keyInt - lowValue) / (highValue - lowValue);
      guess=lowIdx + (int)offset;
    }
    index.position(guess * indexSize);
    index.get(found);
    int compare=ByteUtils.compare(key,found);
    if (compare == 0)     return index.getInt();
    long foundInt=ByteUtils.readUnsignedInt(found,0);
    if (compare == -1) {
      if (guess == 0)       return -1;
      highIdx=guess - 1;
      highValue=foundInt;
    }
 else {
      if (guess == lastIdx)       return -1;
      lowIdx=guess + 1;
      lowValue=foundInt;
    }
  }
}
