{
  this.storeName=storeName;
  String baseURL="http://" + bootstrapURL.split(":")[1].substring(2) + ":8080";
  R2Store r2store=new R2Store(baseURL,storeName);
  String serializerInfoXml=r2store.getSerializerInfoXml();
  SerializerDefinition keySerializerDefinition=CoordinatorUtils.parseKeySerializerDefinition(serializerInfoXml);
  SerializerDefinition valueSerializerDefinition=CoordinatorUtils.parseValueSerializerDefinition(serializerInfoXml);
  logger.info("Bootstrapping for " + getName() + ": Key serializer "+ keySerializerDefinition);
  logger.info("Bootstrapping for " + getName() + ": Value serializer "+ valueSerializerDefinition);
  Store<ByteArray,byte[],byte[]> store=r2store;
  if (keySerializerDefinition.hasCompression() || valueSerializerDefinition.hasCompression()) {
    store=new CompressingStore(store,new CompressionStrategyFactory().get(keySerializerDefinition.getCompression()),new CompressionStrategyFactory().get(valueSerializerDefinition.getCompression()));
  }
  Serializer<K> keySerializer=(Serializer<K>)serializerFactory.getSerializer(keySerializerDefinition);
  Serializer<V> valueSerializer=(Serializer<V>)serializerFactory.getSerializer(valueSerializerDefinition);
  clientStore=SerializingStore.wrap(store,keySerializer,valueSerializer,null);
  InconsistencyResolver<Versioned<V>> secondaryResolver=new TimeBasedInconsistencyResolver();
  clientStore=new InconsistencyResolvingStore<K,V,Object>(clientStore,new ChainedResolver<Versioned<V>>(new VectorClockInconsistencyResolver(),secondaryResolver));
}
