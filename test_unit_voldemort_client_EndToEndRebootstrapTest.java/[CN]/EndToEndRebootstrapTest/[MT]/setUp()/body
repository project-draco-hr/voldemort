{
  cluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3},{4,5,6,7}});
  servers=new VoldemortServer[2];
  servers[0]=ServerTestUtils.startVoldemortServer(socketStoreFactory,ServerTestUtils.createServerConfig(true,0,TestUtils.createTempDir().getAbsolutePath(),null,storesXmlfile,new Properties()),cluster);
  servers[1]=ServerTestUtils.startVoldemortServer(socketStoreFactory,ServerTestUtils.createServerConfig(true,1,TestUtils.createTempDir().getAbsolutePath(),null,storesXmlfile,new Properties()),cluster);
  socketUrl=servers[0].getIdentityNode().getSocketUrl().toString();
  bootStrapUrls=new String[1];
  bootStrapUrls[0]=socketUrl;
  Node node=cluster.getNodeById(0);
  String bootstrapUrl="tcp://" + node.getHost() + ":"+ node.getSocketPort();
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setClientRegistryUpdateIntervalInSecs(5);
  clientConfig.setAsyncMetadataRefreshInMs(5000);
  clientConfig.setBootstrapUrls(bootstrapUrl);
  SocketStoreClientFactory storeClientFactory=new SocketStoreClientFactory(clientConfig);
  SchedulerService service=new SchedulerService(clientConfig.getAsyncJobThreadPoolSize(),SystemTime.INSTANCE,true);
  storeClient=new ZenStoreClient<String,String>(STORE_NAME,null,storeClientFactory,3,clientConfig.getClientContextName(),0,clientConfig,service);
  sysStoreVersion=new SystemStore<String,String>(SystemStoreConstants.SystemStoreName.voldsys$_metadata_version_persistence.name(),bootStrapUrls,0);
  clientRegistryStore=new SystemStore<String,String>(SystemStoreConstants.SystemStoreName.voldsys$_client_registry.name(),bootStrapUrls,0);
}
