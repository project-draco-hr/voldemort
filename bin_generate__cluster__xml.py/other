import sys
import random
import os
import errno
import subprocess
try:
    import argparse
except ImportError:
    print 'Python 2.7 or higher is needed'
rseed = int(random.randint(1, 99999999999))
parser = argparse.ArgumentParser(description='Build a voldemort cluster.xml.')
parser.add_argument('-f', '--file', type=str, dest='file', help='the file of the list of hosts(one per line)')
parser.add_argument('-N', '--name', type=str, default='voldemort', dest='name', help='the name you want to give the cluster')
parser.add_argument('-n', '--nodes', type=int, default=5, dest='nodes', help='the number of nodes in the cluster')
parser.add_argument('-p', '--partitions', type=int, default=1500, dest='partitions', help='number of partitions')
parser.add_argument('-sp', '--socket-port', type=int, default=6666, dest='sock_port', help='socket port number')
parser.add_argument('-ap', '--admin-port', type=int, default=6667, dest='admin_port', help='admin port number')
parser.add_argument('-hp', '--http-port', type=int, default=6665, dest='http_port', help='http port number')
parser.add_argument('-v', '--voldemort-home', type=str, dest='vold_home', help='Path to voldemort home')
parser.add_argument('-s', '--current-stores', type=str, dest='current_stores', help='Path to current stores xml. If you do not have info about the stores yetuse config/tools/dummy-stores.xml from the root voldemort home folder.')
parser.add_argument('-o', '--output-dir', type=str, dest='output_dir', help='output directory location')
parser.add_argument('-z', '--zones', type=int, dest='zones', help='the number of zones you will have')
genType = parser.add_mutually_exclusive_group()
genType.add_argument('--seed', type=int, default=rseed, dest='seed', help='seed for randomizing partition distribution')
args = parser.parse_args()
try:
    with open(args.file):
        pass
except IOError:
    print 'File does not exist'
try:
    os.makedirs(args.output_dir)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
clusterXMLFilePath = os.path.join(os.path.abspath(args.output_dir), 'cluster.xml')
fileHandle = open(clusterXMLFilePath, 'w')
if args.zones:
    zones = args.zones
    if ((args.nodes % zones) != 0):
        print 'Number of nodes must be evenly divisible by number of zones'
        sys.exit(1)
if args.file:
    hostList = open(args.file).readlines()
    nodes = len(hostList)
else:
    nodes = args.nodes
partitions = args.partitions
name = args.name
http_port = args.http_port
sock_port = args.sock_port
admin_port = args.admin_port
seed = args.seed
current_stores = args.current_stores
vold_home = args.vold_home
part_ids = range(partitions)
if (part_ids < 1500):
    print 'Warning : The number of partitions seems to be low. Recommended value is 1500 or more'
if args.zones:
    zone_ids = range(zones)
    zone_id = 0
random.seed(seed)
random.shuffle(part_ids)
print  >> fileHandle, '<cluster>'
print  >> fileHandle, ('  <name>%s</name>' % name)
if args.zones:
    for i in range(args.zones):
        print  >> fileHandle, '  <zone>'
        print  >> fileHandle, ('    <zone-id>%d</zone-id>' % i)
        proximityList = list()
        for j in range(1, len(zone_ids)):
            proximityList.append(zone_ids[((i + j) % len(zone_ids))])
        print  >> fileHandle, ('    <proximity-list>%s</proximity-list>' % str(proximityList).strip('[]'))
        print  >> fileHandle, '  </zone>'
for i in xrange(nodes):
    node_partitions = ', '.join((str(p) for p in sorted(part_ids[(i * (partitions / nodes)):((i + 1) * (partitions / nodes))])))
    print  >> fileHandle, '  <server>'
    print  >> fileHandle, ('    <id>%d</id>' % i)
    if args.file:
        print  >> fileHandle, ('    <host>%s</host>' % hostList[i].strip())
    else:
        print  >> fileHandle, ('    <host>host%d</host>' % i)
    print  >> fileHandle, ('    <http-port>%d</http-port>' % http_port)
    print  >> fileHandle, ('    <socket-port>%d</socket-port>' % sock_port)
    print  >> fileHandle, ('    <admin-port>%d</admin-port>' % admin_port)
    print  >> fileHandle, ('    <partitions>%s</partitions>' % node_partitions)
    if args.zones:
        print  >> fileHandle, ('    <zone-id>%d</zone-id>' % zone_id)
        if (zone_id == (zones - 1)):
            zone_id = 0
        else:
            zone_id += 1
    print  >> fileHandle, '  </server>'
print  >> fileHandle, '</cluster>'
fileHandle.close()
if args.zones:
    scriptPath = (vold_home + '/bin/rebalance-new-cluster.sh')
    cmd = [scriptPath, '-v', vold_home, '-c', clusterXMLFilePath, '-s', current_stores, '-o', os.path.abspath(args.output_dir)]
    subprocess.call(cmd)
