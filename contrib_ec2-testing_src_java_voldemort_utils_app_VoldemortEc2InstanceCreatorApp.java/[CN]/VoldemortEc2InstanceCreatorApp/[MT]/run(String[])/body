{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("accessid","Access ID").withRequiredArg();
  parser.accepts("secretkey","SecretKey").withRequiredArg();
  parser.accepts("ami","AMI").withRequiredArg();
  parser.accepts("keypairid","KeyPairID").withRequiredArg();
  parser.accepts("instances","Number of instances (default 1)").withRequiredArg().ofType(Integer.class);
  parser.accepts("instancesize","Instance size; options are DEFAULT (default), LARGE, XLARGE, MEDIUM_HCPU, and XLARGE_HCPU").withRequiredArg();
  parser.accepts("output","Output file for newly created public and private DNS entries").withRequiredArg();
  OptionSet options=parse(args);
  String accessId=getRequiredString(options,"accessid");
  String secretKey=getRequiredString(options,"secretkey");
  String ami=getRequiredString(options,"ami");
  String keypairId=getRequiredString(options,"keypairid");
  int instanceCount=CmdUtils.valueOf(options,"instances",1);
  String instanceSize=CmdUtils.valueOf(options,"instancesize","DEFAULT");
  try {
    InstanceType.valueOf(instanceSize);
  }
 catch (  Exception e) {
    printUsage();
  }
  File output=getRequiredOutputFile(options,"output");
  Ec2Connection ec2Connection=new TypicaEc2Connection(accessId,secretKey);
  Map<String,String> dnsNames=ec2Connection.createInstances(ami,keypairId,instanceSize,instanceCount);
  StringBuilder s=new StringBuilder();
  for (  Map.Entry<String,String> entry : dnsNames.entrySet()) {
    s.append(entry.getKey());
    s.append(',');
    s.append(entry.getValue());
    s.append(System.getProperty("line.separator"));
  }
  FileUtils.writeStringToFile(output,s.toString());
}
