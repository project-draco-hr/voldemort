{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\", \"warn\" (default), \"error\", or \"off\"").withRequiredArg();
  parser.accepts("accessid","Access ID").withRequiredArg();
  parser.accepts("secretkey","SecretKey").withRequiredArg();
  parser.accepts("ami","AMI").withRequiredArg();
  parser.accepts("keypairid","KeyPairID").withRequiredArg();
  parser.accepts("instances","Number of instances (default 1)").withRequiredArg().ofType(Integer.class);
  parser.accepts("timeout","Timeout in milliseconds (default = 2 minutes + 30 seconds for each instance)").withRequiredArg().ofType(Integer.class);
  parser.accepts("instancesize","Instance size; options are DEFAULT (default), LARGE, XLARGE, MEDIUM_HCPU, and XLARGE_HCPU").withRequiredArg();
  parser.accepts("output","Output of newly created public and private DNS entries; defaults to stdout").withRequiredArg();
  OptionSet options=parse(args);
  String accessId=getRequiredString(options,"accessid");
  String secretKey=getRequiredString(options,"secretkey");
  String ami=getRequiredString(options,"ami");
  File outputFile=getOutputFile(options,"output");
  String keypairId=getRequiredString(options,"keypairid");
  int instanceCount=CmdUtils.valueOf(options,"instances",1);
  int timeout=CmdUtils.valueOf(options,"timeout",(120000 + instanceCount * 30000));
  String instanceSize=CmdUtils.valueOf(options,"size","DEFAULT");
  try {
    InstanceType.valueOf(instanceSize);
  }
 catch (  Exception e) {
    printUsage();
  }
  Ec2Connection ec2Connection=new TypicaEc2Connection(accessId,secretKey);
  Map<String,String> dnsNames=ec2Connection.createInstances(ami,keypairId,instanceSize,instanceCount);
  StringBuilder dnsNameEntriesBuilder=new StringBuilder();
  for (  Map.Entry<String,String> entry : dnsNames.entrySet()) {
    dnsNameEntriesBuilder.append(entry.getKey());
    dnsNameEntriesBuilder.append(',');
    dnsNameEntriesBuilder.append(entry.getValue());
    dnsNameEntriesBuilder.append(System.getProperty("line.separator"));
  }
  String dnsNameEntries=dnsNameEntriesBuilder.toString();
  if (outputFile != null)   FileUtils.writeStringToFile(outputFile,dnsNameEntries);
 else   System.out.print(dnsNameEntries);
}
