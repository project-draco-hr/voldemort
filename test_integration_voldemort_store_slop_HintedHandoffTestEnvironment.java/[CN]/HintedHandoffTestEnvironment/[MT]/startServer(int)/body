{
  if (logger.isInfoEnabled())   logger.info("Starting server of node [" + nodeId + "]");
  SocketStoreFactory socketStoreFactory=new ClientRequestExecutorPool(2,10000,100000,1024);
  List<StoreDefinition> stores=new ArrayList<StoreDefinition>();
  stores.add(storeDef);
  VoldemortConfig config=ServerTestUtils.createServerConfigWithDefs(true,nodeId,TestUtils.createTempDir().getAbsolutePath(),cluster,stores,new Properties());
  config.setNioAdminConnectorSelectors(1);
  config.setNioConnectorSelectors(5);
  config.setSlopFrequencyMs(DEFAULT_SLOP_PUSH_INTERVAL_S * 1000);
  config.setSlopStoreType("memory");
  config.setFailureDetectorAsyncRecoveryInterval(DEFAULT_ASYNC_RECOVERY_INTERVAL_S * 1000);
  VoldemortServer vs=ServerTestUtils.startVoldemortServer(socketStoreFactory,config);
  socketStoreFactory.close();
  voldemortServers.put(nodeId,vs);
  VoldemortService vsrv=vs.getService(ServiceType.STORAGE);
  StoreRepository sr=((StorageService)vsrv).getStoreRepository();
  sr.removeLocalStore(STORE_NAME);
  sr.addLocalStore(sleepyStores.get(nodeId));
  sr.removeStorageEngine(STORE_NAME);
  sr.addStorageEngine((StorageEngine<ByteArray,byte[],byte[]>)realStores.get(nodeId));
  if (!slopStorageEngines.containsKey(nodeId)) {
    SlopStorageEngine slopStorageEngine=sr.getSlopStore();
    slopStorageEngines.put(nodeId,slopStorageEngine);
  }
 else {
    sr.removeStorageEngine("slop");
    sr.removeLocalStore("slop");
    sr.addStorageEngine(slopStorageEngines.get(nodeId));
    sr.addLocalStore(slopStorageEngines.get(nodeId));
    sr.setSlopStore(slopStorageEngines.get(nodeId));
  }
}
