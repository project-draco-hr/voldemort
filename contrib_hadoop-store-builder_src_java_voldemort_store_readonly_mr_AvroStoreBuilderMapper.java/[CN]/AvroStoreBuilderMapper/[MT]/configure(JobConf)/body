{
  super.setConf(conf);
  md5er=ByteUtils.getDigest("md5");
  this.cluster=new ClusterMapper().readCluster(new StringReader(conf.get("cluster.xml")));
  List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new StringReader(conf.get("stores.xml")));
  if (storeDefs.size() != 1)   throw new IllegalStateException("Expected to find only a single store, but found multiple!");
  this.storeDef=storeDefs.get(0);
  this.numChunks=conf.getInt("num.chunks",-1);
  if (this.numChunks < 1)   throw new VoldemortException("num.chunks not specified in the job conf.");
  this.saveKeys=conf.getBoolean("save.keys",true);
  this.reducerPerBucket=conf.getBoolean("reducer.per.bucket",false);
  try {
    SerializerFactory factory=new DefaultSerializerFactory();
    if (conf.get("serializer.factory") != null) {
      factory=(SerializerFactory)Class.forName(conf.get("serializer.factory")).newInstance();
    }
    keySerializer=factory.getSerializer(keySerializerDefinition);
    valueSerializer=factory.getSerializer(valueSerializerDefinition);
    keyField=conf.get("avro.key.field");
    valField=conf.get("avro.value.field");
    keySchema=conf.get("avro.key.schema");
    valSchema=conf.get("avro.val.schema");
    if (keySerializerDefinition.getName().equals("avro-generic")) {
      keySerializer=new AvroGenericSerializer(keySchema);
      valueSerializer=new AvroGenericSerializer(valSchema);
    }
 else {
      if (keySerializerDefinition.hasVersion()) {
        Map<Integer,String> versions=new HashMap<Integer,String>();
        for (        Map.Entry<Integer,String> entry : keySerializerDefinition.getAllSchemaInfoVersions().entrySet())         versions.put(entry.getKey(),entry.getValue());
        keySerializer=new AvroVersionedGenericSerializer(versions);
      }
 else       keySerializer=new AvroVersionedGenericSerializer(keySerializerDefinition.getCurrentSchemaInfo());
      if (valueSerializerDefinition.hasVersion()) {
        Map<Integer,String> versions=new HashMap<Integer,String>();
        for (        Map.Entry<Integer,String> entry : valueSerializerDefinition.getAllSchemaInfoVersions().entrySet())         versions.put(entry.getKey(),entry.getValue());
        valueSerializer=new AvroVersionedGenericSerializer(versions);
      }
 else       valueSerializer=new AvroVersionedGenericSerializer(valueSerializerDefinition.getCurrentSchemaInfo());
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  keyCompressor=new CompressionStrategyFactory().get(keySerializerDefinition.getCompression());
  valueCompressor=new CompressionStrategyFactory().get(valueSerializerDefinition.getCompression());
  routingStrategy=new ConsistentRoutingStrategy(getCluster().getNodes(),getStoreDef().getReplicationFactor());
  Props props=HadoopUtils.getPropsFromJob(conf);
}
