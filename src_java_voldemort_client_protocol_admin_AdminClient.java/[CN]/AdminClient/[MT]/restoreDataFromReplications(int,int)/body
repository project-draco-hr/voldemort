{
  ExecutorService executors=Executors.newFixedThreadPool(parallelTransfers,new ThreadFactory(){
    public Thread newThread(    Runnable r){
      Thread thread=new Thread(r);
      thread.setName("restore-data-thread");
      return thread;
    }
  }
);
  try {
    List<StoreDefinition> storeDefList=getRemoteStoreDefList(nodeId).getValue();
    Cluster cluster=getRemoteCluster(nodeId).getValue();
    List<StoreDefinition> writableStores=Lists.newArrayList();
    for (    StoreDefinition def : storeDefList) {
      if (def.isView() || restoreStoreEngineBlackList.contains(def.getType())) {
        logger.info("Ignoring store " + def.getName() + " for restoring");
      }
 else {
        writableStores.add(def);
      }
    }
    System.out.println(writableStores);
    for (    StoreDefinition def : writableStores) {
      restoreStoreFromReplication(nodeId,cluster,def,executors);
    }
  }
  finally {
    executors.shutdown();
    try {
      executors.awaitTermination(adminClientConfig.getRestoreDataTimeout(),TimeUnit.SECONDS);
    }
 catch (    InterruptedException e) {
      logger.error("Interrupted while waiting restore operation to finish.");
    }
    logger.info("Finished restoring data.");
  }
}
