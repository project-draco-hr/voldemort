{
  final AdminClient mirrorAdminClient=new AdminClient(mirrorUrl,new AdminClientConfig());
  final AdminClient currentAdminClient=this;
  Node mirrorNode=mirrorAdminClient.getAdminClientCluster().getNodeById(mirrorNodeId);
  if (mirrorNode == null) {
    logger.error("Mirror node specified does not exist in the mirror cluster");
    return;
  }
  List<StoreDefinition> currentStoreList=currentAdminClient.getRemoteStoreDefList(nodeId).getValue();
  int numStoresCurr=0;
  for (  StoreDefinition storeDef : currentStoreList) {
    if (stores.contains(storeDef.getName()))     numStoresCurr++;
  }
  List<StoreDefinition> mirrorStoreList=mirrorAdminClient.getRemoteStoreDefList(mirrorNodeId).getValue();
  int numStoresMirror=0;
  for (  StoreDefinition storeDef : mirrorStoreList) {
    if (stores.contains(storeDef.getName()))     numStoresMirror++;
  }
  if (numStoresCurr != stores.size() || numStoresMirror != stores.size()) {
    logger.error("Make sure the set of stores specified exist on both sides");
    return;
  }
  ExecutorService executors=Executors.newFixedThreadPool(stores.size(),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      Thread thread=new Thread(r);
      thread.setName("mirror-data-thread");
      return thread;
    }
  }
);
  final List<Integer> partitionIdList=mirrorNode.getPartitionIds();
  final CyclicBarrier barrier=new CyclicBarrier(stores.size() + 1);
  try {
    for (    final String storeName : stores)     executors.submit(new Runnable(){
      public void run(){
        try {
          logger.info("Mirroring data for store " + storeName + " from node "+ mirrorNodeId+ "("+ mirrorUrl+ ") to node "+ nodeId+ " partitions:"+ partitionIdList);
          Iterator<Pair<ByteArray,Versioned<byte[]>>> iterator=mirrorAdminClient.fetchEntries(mirrorNodeId,storeName,partitionIdList,null,false);
          currentAdminClient.updateEntries(nodeId,storeName,iterator,null);
          logger.info("Mirroring data for store:" + storeName + " from node "+ mirrorNodeId+ " completed.");
        }
 catch (        Exception e) {
          logger.error("Mirroring operation for store " + storeName + "from node "+ mirrorNodeId+ " failed.",e);
        }
 finally {
          try {
            barrier.await();
          }
 catch (          Exception e) {
            logger.error("Error waiting for barrier while mirroring for " + storeName,e);
          }
        }
      }
    }
);
    barrier.await();
  }
 catch (  Exception e) {
    logger.error("Mirroring operation failed.",e);
  }
 finally {
    executors.shutdown();
    logger.info("Finished mirroring data.");
  }
}
