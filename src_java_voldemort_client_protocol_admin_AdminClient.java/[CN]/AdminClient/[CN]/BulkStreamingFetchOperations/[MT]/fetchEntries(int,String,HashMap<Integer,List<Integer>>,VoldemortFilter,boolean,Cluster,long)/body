{
  Node node=AdminClient.this.getAdminClientCluster().getNodeById(nodeId);
  final SocketDestination destination=new SocketDestination(node.getHost(),node.getAdminPort(),RequestFormatType.ADMIN_PROTOCOL_BUFFERS);
  final SocketAndStreams sands=socketPool.checkout(destination);
  DataOutputStream outputStream=sands.getOutputStream();
  final DataInputStream inputStream=sands.getInputStream();
  try {
    initiateFetchRequest(outputStream,storeName,replicaToPartitionList,filter,true,fetchMasterEntries,initialCluster,skipRecords);
  }
 catch (  IOException e) {
    helperOps.close(sands.getSocket());
    socketPool.checkin(destination,sands);
    throw new VoldemortException(e);
  }
  return new AbstractIterator<Pair<ByteArray,Versioned<byte[]>>>(){
    @Override public Pair<ByteArray,Versioned<byte[]>> computeNext(){
      try {
        int size=inputStream.readInt();
        if (size == -1) {
          socketPool.checkin(destination,sands);
          return endOfData();
        }
        VAdminProto.FetchPartitionEntriesResponse response=responseFromStream(inputStream,size);
        if (response.hasError()) {
          socketPool.checkin(destination,sands);
          helperOps.throwException(response.getError());
        }
        VAdminProto.PartitionEntry partitionEntry=response.getPartitionEntry();
        return Pair.create(ProtoUtils.decodeBytes(partitionEntry.getKey()),ProtoUtils.decodeVersioned(partitionEntry.getVersioned()));
      }
 catch (      IOException e) {
        helperOps.close(sands.getSocket());
        socketPool.checkin(destination,sands);
        throw new VoldemortException(e);
      }
    }
  }
;
}
