{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("accessid","Access ID (used instead of accessidfile)").withRequiredArg();
  parser.accepts("accessidfile","Access ID file (used instead of accessid)").withRequiredArg();
  parser.accepts("secretkey","Secret key (used instead of secretkeyfile)").withRequiredArg();
  parser.accepts("secretkeyfile","Secret key file (used instead of secretkey)").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("force","Use option to force deletion of *all* instances");
  OptionSet options=parse(args);
  String accessId=getAccessId(options);
  String secretKey=getSecretKey(options);
  Ec2Connection ec2Connection=new TypicaEc2Connection(accessId,secretKey);
  List<String> hostNames=new ArrayList<String>();
  File hostNamesFile=getInputFile(options,"hostnames");
  if (hostNamesFile != null) {
    List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(hostNamesFile);
    for (    HostNamePair hostNamePair : hostNamePairs)     hostNames.add(hostNamePair.getExternalHostName());
  }
 else   if (options.has("force")) {
    for (    HostNamePair hostNamePair : ec2Connection.list())     hostNames.add(hostNamePair.getExternalHostName());
  }
 else {
    printUsage();
  }
  ec2Connection.delete(hostNames);
}
