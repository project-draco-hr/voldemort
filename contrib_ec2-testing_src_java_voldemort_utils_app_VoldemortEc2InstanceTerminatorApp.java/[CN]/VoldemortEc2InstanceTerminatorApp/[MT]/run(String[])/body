{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("accessid","Access ID (used instead of accessidfile)").withRequiredArg();
  parser.accepts("accessidfile","Access ID file (used instead of accessid)").withRequiredArg();
  parser.accepts("secretkey","Secret key (used instead of secretkeyfile)").withRequiredArg();
  parser.accepts("secretkeyfile","Secret key file (used instead of secretkey)").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("instances","File containing instance IDs").withRequiredArg();
  parser.accepts("region","Region type; options are " + RegionInfo.REGIONURL_AP_SOUTHEAST + ", "+ RegionInfo.REGIONURL_EU_WEST+ ", "+ RegionInfo.REGIONURL_US_WEST+ ", "+ RegionInfo.REGIONURL_US_EAST+ " (default) ").withRequiredArg();
  OptionSet options=parse(args);
  String accessId=getAccessId(options);
  String secretKey=getSecretKey(options);
  String regionUrl=getRegionUrl(options);
  Ec2Connection ec2Connection=new TypicaEc2Connection(accessId,secretKey,null,regionUrl);
  List<String> hostNames=new ArrayList<String>();
  File hostNamesFile=getInputFile(options,"hostnames");
  File instancesFile=getInputFile(options,"instances");
  if (hostNamesFile == null && instancesFile == null)   printUsage();
  if (hostNamesFile != null) {
    List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(hostNamesFile);
    for (    HostNamePair hostNamePair : hostNamePairs)     hostNames.add(hostNamePair.getExternalHostName());
    ec2Connection.deleteInstancesByHostName(hostNames);
  }
  if (instancesFile != null) {
    List<String> instanceIds=FileUtils.readLines(instancesFile);
    ec2Connection.deleteInstancesByInstanceId(instanceIds);
  }
}
