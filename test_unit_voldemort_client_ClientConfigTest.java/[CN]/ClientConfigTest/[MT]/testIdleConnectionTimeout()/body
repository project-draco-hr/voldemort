{
  String idleConnectionTimeoutProperty="idle_connection_timeout_minutes";
  ClientConfig config1=new ClientConfig().setIdleConnectionTimeout(0,TimeUnit.NANOSECONDS);
  assertEquals("setting to 0, should return -1, regardless of the unit",-1,config1.getIdleConnectionTimeout(TimeUnit.DAYS));
  Properties props1=new Properties();
  props1.setProperty("idle_connection_timeout_minutes","-1");
  ClientConfig config2=new ClientConfig(props1);
  assertEquals("setting to 0, should return -1, regardless of the unit",-1,config2.getIdleConnectionTimeout(TimeUnit.DAYS));
  for (int i=1; i < 10; i++) {
    for (    TimeUnit unit : new TimeUnit[]{TimeUnit.MINUTES,TimeUnit.SECONDS}) {
      try {
        ClientConfig config=new ClientConfig().setIdleConnectionTimeout(i,unit);
        fail("Any thing with less than 10 minute should throw" + i);
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
  for (int i=1; i < 10; i++) {
    Properties props=new Properties();
    props.setProperty("idle_connection_timeout_minutes",Integer.toString(i));
    try {
      ClientConfig config=new ClientConfig(props);
      fail("Any thing with less than 10 minute should throw");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  for (int i=10; i < 100; i++) {
    for (    TimeUnit unit : new TimeUnit[]{TimeUnit.MINUTES,TimeUnit.DAYS}) {
      ClientConfig config=new ClientConfig().setIdleConnectionTimeout(i,unit);
      assertEquals(" set valud is not same as retrieved",i,config.getIdleConnectionTimeout(unit));
    }
  }
  for (int i=10; i < 100; i++) {
    Properties props=new Properties();
    props.setProperty("idle_connection_timeout_minutes",Integer.toString(i));
    ClientConfig config=new ClientConfig(props);
    assertEquals(" set valud is not same as retrieved",i,config.getIdleConnectionTimeout(TimeUnit.MINUTES));
  }
}
