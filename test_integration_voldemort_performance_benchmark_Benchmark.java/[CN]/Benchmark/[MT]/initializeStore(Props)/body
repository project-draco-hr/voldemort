{
  this.numThreads=benchmarkProps.getInt(THREADS,MAX_WORKERS);
  this.numConnectionsPerNode=benchmarkProps.getInt(NUM_CONNECTIONS_PER_NODE,MAX_CONNECTIONS_PER_NODE);
  this.numIterations=benchmarkProps.getInt(ITERATIONS,1);
  this.statusIntervalSec=benchmarkProps.getInt(INTERVAL,0);
  this.verbose=benchmarkProps.getBoolean(VERBOSE,false);
  this.verifyRead=benchmarkProps.getBoolean(VERIFY,false);
  this.ignoreNulls=benchmarkProps.getBoolean(IGNORE_NULLS,false);
  int clientZoneId=benchmarkProps.getInt(CLIENT_ZONE_ID,-1);
  int maxTotalConnections=benchmarkProps.getInt(MAX_TOTAL_CONNECTIONS,5000);
  System.err.println("Using total connections : " + maxTotalConnections);
  if (benchmarkProps.containsKey(URL)) {
    if (!benchmarkProps.containsKey(STORE_NAME)) {
      throw new VoldemortException("Missing storename");
    }
    String bootstrapURL=benchmarkProps.getString(URL);
    String socketUrl="";
    if (bootstrapURL.contains("http")) {
      RESTClientConfig config=new RESTClientConfig();
      config.setHttpBootstrapURL(bootstrapURL).setTimeoutMs(1500,TimeUnit.MILLISECONDS).setMaxR2ConnectionPoolSize(maxTotalConnections);
      RESTClientFactory factory=new RESTClientFactory(config);
      this.storeClient=factory.getStoreClient("test");
      this.factory=factory;
      socketUrl=bootstrapURL.replace("http","tcp");
      socketUrl=socketUrl.replace("8080","6666");
    }
 else {
      socketUrl=bootstrapURL;
    }
    String storeName=benchmarkProps.getString(STORE_NAME);
    ClientConfig clientConfig=new ClientConfig().setMaxThreads(numThreads).setMaxTotalConnections(numThreads).setMaxConnectionsPerNode(numConnectionsPerNode).setRoutingTimeout(1500,TimeUnit.MILLISECONDS).setSocketTimeout(1500,TimeUnit.MILLISECONDS).setConnectionTimeout(500,TimeUnit.MILLISECONDS).setRequestFormatType(RequestFormatType.VOLDEMORT_V3).setBootstrapUrls(socketUrl);
    if (clientZoneId >= 0) {
      clientConfig.setClientZoneId(clientZoneId);
    }
    SocketStoreClientFactory socketFactory=new SocketStoreClientFactory(clientConfig);
    if (!bootstrapURL.contains("http")) {
      this.storeClient=socketFactory.getStoreClient(storeName);
      StoreDefinition storeDef=getStoreDefinition(socketFactory,storeName);
      this.keyType=findKeyType(storeDef);
      benchmarkProps.put(Benchmark.KEY_TYPE,this.keyType);
      this.factory=socketFactory;
    }
 else {
      SerializerDefinition keySerializerDefinition=new SerializerDefinition("string");
      this.keyType=findKeyType(keySerializerDefinition);
      benchmarkProps.put(Benchmark.KEY_TYPE,this.keyType);
    }
  }
 else {
    String storageEngineClass=benchmarkProps.getString(STORAGE_CONFIGURATION_CLASS);
    this.keyType=benchmarkProps.getString(KEY_TYPE,STRING_KEY_TYPE);
    Serializer serializer=findKeyType(this.keyType);
    Store<Object,Object,Object> store=null;
    StorageConfiguration conf=(StorageConfiguration)ReflectUtils.callConstructor(ReflectUtils.loadClass(storageEngineClass),new Object[]{ServerTestUtils.getVoldemortConfig()});
    StorageEngine<ByteArray,byte[],byte[]> engine=conf.getStore(TestUtils.makeStoreDefinition(DUMMY_DB),TestUtils.makeSingleNodeRoutingStrategy());
    if (conf.getType().compareTo(ViewStorageConfiguration.TYPE_NAME) == 0) {
      engine=new ViewStorageEngine(STORE_NAME,engine,new StringSerializer(),new StringSerializer(),serializer,new StringSerializer(),null,BenchmarkViews.loadTransformation(benchmarkProps.getString(VIEW_CLASS).trim()));
    }
    store=SerializingStore.wrap(engine,serializer,new StringSerializer(),new IdentitySerializer());
    this.factory=new StaticStoreClientFactory(store);
    this.storeClient=factory.getStoreClient(store.getName());
  }
  this.storeInitialized=true;
}
