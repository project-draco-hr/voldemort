{
  int localOpsCounts=0;
  String label=null;
  if (runBenchmark) {
    localOpsCounts=this.opsCount;
    label=new String("benchmark");
  }
 else {
    localOpsCounts=this.recordCount;
    label=new String("warmup");
  }
  Vector<Thread> threads=new Vector<Thread>();
  for (int index=0; index < this.numThreads; index++) {
    VoldemortWrapper db=new VoldemortWrapper(storeClient,this.verifyRead && this.warmUpCompleted,this.ignoreNulls);
    WorkloadPlugin plugin=null;
    if (this.pluginName != null && this.pluginName.length() > 0) {
      Class<?> cls=Class.forName(this.pluginName);
      try {
        plugin=(WorkloadPlugin)cls.newInstance();
      }
 catch (      IllegalAccessException e) {
        System.err.println("Class not accessible ");
        System.exit(1);
      }
catch (      InstantiationException e) {
        System.err.println("Class not instantiable.");
        System.exit(1);
      }
      plugin.setDb(db);
    }
    Thread clientThread=new ClientThread(db,runBenchmark,this.workLoad,localOpsCounts / this.numThreads,this.perThreadThroughputPerMs,this.verbose,plugin);
    threads.add(clientThread);
  }
  long startRunBenchmark=System.currentTimeMillis();
  for (  Thread currentThread : threads) {
    currentThread.start();
  }
  StatusThread statusThread=null;
  if (this.statusIntervalSec > 0) {
    statusThread=new StatusThread(threads,this.statusIntervalSec,startRunBenchmark);
    statusThread.start();
  }
  for (  Thread currentThread : threads) {
    try {
      currentThread.join();
    }
 catch (    InterruptedException e) {
      if (this.verbose)       e.printStackTrace();
    }
  }
  long endRunBenchmark=System.currentTimeMillis();
  if (this.statusIntervalSec > 0) {
    statusThread.interrupt();
  }
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(4);
  nf.setGroupingUsed(false);
  System.out.println("[" + label + "]\tRunTime(ms): "+ nf.format((endRunBenchmark - startRunBenchmark)));
  double throughput=Time.MS_PER_SECOND * ((double)localOpsCounts) / ((double)(endRunBenchmark - startRunBenchmark));
  System.out.println("[" + label + "]\tThroughput(ops/sec): "+ nf.format(throughput));
  if (runBenchmark) {
    Metrics.getInstance().printReport(System.out);
  }
  return (endRunBenchmark - startRunBenchmark);
}
