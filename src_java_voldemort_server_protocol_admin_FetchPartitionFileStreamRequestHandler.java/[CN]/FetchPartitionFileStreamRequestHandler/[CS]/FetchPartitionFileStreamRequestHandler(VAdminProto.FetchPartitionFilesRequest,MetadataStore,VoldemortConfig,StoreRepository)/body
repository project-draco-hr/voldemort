{
  this.request=request;
  this.metadataStore=metadataStore;
  StoreDefinition storeDef=metadataStore.getStoreDef(request.getStoreName());
  boolean isReadOnly=storeDef.getType().compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;
  if (!isReadOnly) {
    throw new VoldemortException("Should be fetching partition files only for read-only stores");
  }
  List<Integer> partitionIds=request.getPartitionIdsList();
  this.partitionIds=partitionIds;
  ReadOnlyStorageEngine storageEngine=AdminServiceRequestHandler.getReadOnlyStorageEngine(metadataStore,storeRepository,request.getStoreName());
  this.bucketToNumChunks=storageEngine.getChunkedFileSet().getChunkIdToNumChunks();
  this.blockSize=voldemortConfig.getAllProps().getLong("partition.buffer.size.bytes",voldemortConfig.getAdminSocketBufferSize());
  this.storeDir=new File(storageEngine.getCurrentDirPath());
  this.throttler=new EventThrottler(voldemortConfig.getStreamMaxReadBytesPerSec());
  if (voldemortConfig.isJmxEnabled()) {
    this.streamStats=storeRepository.getStreamingStats(storageEngine.getName());
  }
 else {
    this.streamStats=null;
  }
  this.partitionIterator=Collections.unmodifiableList(partitionIds).iterator();
  this.fetchStatus=FetchStatus.NEXT_PARTITION;
  this.currentChunkId=0;
  this.indexFile=null;
  this.dataFile=null;
  this.chunkedFileWriter=null;
  this.numChunks=0;
  this.nioEnabled=voldemortConfig.getUseNioConnector();
}
