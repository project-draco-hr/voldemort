{
  Node n1=new Node(1,"localhost",10000,10001,10002,0,new ArrayList<Integer>());
  Node n2=new Node(2,"localhost",10000,10001,10002,0,new ArrayList<Integer>());
  Node n3=new Node(3,"localhost",10000,10001,10002,0,new ArrayList<Integer>());
  Node n4=new Node(4,"localhost",10000,10001,10002,0,new ArrayList<Integer>());
  PrefixNode pn1=new PrefixNode(0,n1);
  PrefixNode pn2=new PrefixNode(0,n2);
  PrefixNode pn3=new PrefixNode(0,n3);
  PrefixNode pn4=new PrefixNode(0,n4);
  Map<Version,Set<ConsistencyCheck.PrefixNode>> versionNodeSetMap=new HashMap<Version,Set<ConsistencyCheck.PrefixNode>>();
  int replicationFactor=4;
  Set<ConsistencyCheck.PrefixNode> setFourNodes=new HashSet<ConsistencyCheck.PrefixNode>();
  setFourNodes.add(pn1);
  setFourNodes.add(pn2);
  setFourNodes.add(pn3);
  setFourNodes.add(pn4);
  Set<ConsistencyCheck.PrefixNode> setThreeNodes=new HashSet<ConsistencyCheck.PrefixNode>();
  setFourNodes.add(pn1);
  setFourNodes.add(pn2);
  setFourNodes.add(pn3);
  Version v1=new VectorClock();
  ((VectorClock)v1).incrementVersion(1,100000001);
  ((VectorClock)v1).incrementVersion(2,100000003);
  Version v2=new VectorClock();
  ((VectorClock)v2).incrementVersion(1,100000001);
  ((VectorClock)v2).incrementVersion(3,100000002);
  Version v3=new VectorClock();
  ((VectorClock)v3).incrementVersion(1,100000001);
  ((VectorClock)v3).incrementVersion(4,100000001);
  versionNodeSetMap.put(v1,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(v1,setFourNodes);
  versionNodeSetMap.put(v2,setFourNodes);
  versionNodeSetMap.put(v3,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(v1,setFourNodes);
  versionNodeSetMap.put(v2,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.LATEST_CONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(v1,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(v1,setThreeNodes);
  versionNodeSetMap.put(v2,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(v1,setThreeNodes);
  versionNodeSetMap.put(v2,setFourNodes);
  versionNodeSetMap.put(v3,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  byte[] value1={0,1,2,3,4};
  byte[] value2={0,1,2,3,5};
  byte[] value3={0,1,2,3,6};
  Versioned<byte[]> versioned1=new Versioned<byte[]>(value1,v1);
  Versioned<byte[]> versioned2=new Versioned<byte[]>(value2,v2);
  Versioned<byte[]> versioned3=new Versioned<byte[]>(value3,v3);
  Version hv1=new ConsistencyCheck.HashedValue(versioned1);
  Version hv2=new ConsistencyCheck.HashedValue(versioned2);
  Version hv3=new ConsistencyCheck.HashedValue(versioned3);
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  versionNodeSetMap.put(hv2,setFourNodes);
  versionNodeSetMap.put(hv3,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  versionNodeSetMap.put(hv2,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
}
