{
  Map<Version,Set<ConsistencyCheck.ClusterNode>> versionNodeSetMap=new HashMap<Version,Set<ConsistencyCheck.ClusterNode>>();
  int replicationFactor=4;
  Version v1=new VectorClock();
  ((VectorClock)v1).incrementVersion(1,100000001);
  ((VectorClock)v1).incrementVersion(2,100000003);
  Version v2=new VectorClock();
  ((VectorClock)v2).incrementVersion(1,100000001);
  ((VectorClock)v2).incrementVersion(3,100000002);
  Version v3=new VectorClock();
  ((VectorClock)v3).incrementVersion(1,100000001);
  ((VectorClock)v3).incrementVersion(4,100000001);
  Versioned<byte[]> versioned1=new Versioned<byte[]>(value1,v1);
  Versioned<byte[]> versioned2=new Versioned<byte[]>(value2,v2);
  Versioned<byte[]> versioned3=new Versioned<byte[]>(value3,v3);
  Version hv1=new ConsistencyCheck.HashedValue(versioned1);
  Version hv2=new ConsistencyCheck.HashedValue(versioned2);
  Version hv3=new ConsistencyCheck.HashedValue(versioned3);
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  versionNodeSetMap.put(hv2,setFourNodes);
  versionNodeSetMap.put(hv3,setFourNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.FULL,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
  versionNodeSetMap.clear();
  versionNodeSetMap.put(hv1,setFourNodes);
  versionNodeSetMap.put(hv2,setThreeNodes);
  assertEquals(ConsistencyCheck.ConsistencyLevel.INCONSISTENT,ConsistencyCheck.determineConsistency(versionNodeSetMap,replicationFactor));
}
