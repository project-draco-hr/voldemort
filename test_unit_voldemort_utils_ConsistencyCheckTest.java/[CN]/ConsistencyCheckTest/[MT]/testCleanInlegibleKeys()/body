{
  Version v1=new VectorClock();
  ((VectorClock)v1).incrementVersion(1,100000001);
  ((VectorClock)v1).incrementVersion(2,100000003);
  Version v2=new VectorClock();
  ((VectorClock)v2).incrementVersion(1,100000002);
  Map<ByteArray,Map<Version,Set<ClusterNode>>> map=new HashMap<ByteArray,Map<Version,Set<ClusterNode>>>();
  Map<Version,Set<ClusterNode>> nodeSetMap=new HashMap<Version,Set<ClusterNode>>();
  Set<ClusterNode> oneNodeSet=new HashSet<ClusterNode>();
  oneNodeSet.add(cn0_1);
  Set<ClusterNode> twoNodeSet=new HashSet<ClusterNode>();
  twoNodeSet.add(cn0_1);
  twoNodeSet.add(cn0_2);
  int requiredWrite=2;
  ByteArray key1=new ByteArray(value1);
  map.clear();
  nodeSetMap.clear();
  nodeSetMap.put(v1,oneNodeSet);
  map.put(key1,nodeSetMap);
  assertEquals(1,map.size());
  ConsistencyCheck.cleanIneligibleKeys(map,requiredWrite);
  assertEquals(0,map.size());
  map.clear();
  nodeSetMap.clear();
  nodeSetMap.put(v1,oneNodeSet);
  nodeSetMap.put(v2,twoNodeSet);
  map.put(key1,nodeSetMap);
  assertEquals(2,map.get(key1).size());
  ConsistencyCheck.cleanIneligibleKeys(map,requiredWrite);
  assertEquals(1,map.size());
  assertEquals(1,map.get(key1).size());
}
