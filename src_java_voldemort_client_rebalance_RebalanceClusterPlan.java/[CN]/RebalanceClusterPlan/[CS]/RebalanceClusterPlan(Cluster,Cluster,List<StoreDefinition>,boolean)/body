{
  this.currentCluster=currentCluster;
  this.targetCluster=targetCluster;
  this.rebalanceTaskQueue=new ConcurrentLinkedQueue<RebalanceNodePlan>();
  this.storeDefs=Collections.unmodifiableList(storeDefs);
  if (currentCluster.getNumberOfPartitions() != targetCluster.getNumberOfPartitions())   throw new VoldemortException("Total number of partitions should be equal [ Current cluster (" + currentCluster.getNumberOfPartitions() + ") not equal to Target cluster ("+ targetCluster.getNumberOfPartitions()+ ") ]");
  this.nodeIdToAllPartitions=Collections.unmodifiableMap(RebalanceUtils.getNodeIdToAllPartitions(currentCluster,storeDefs,true));
  this.targetNodeIdToAllPartitions=Collections.unmodifiableMap(RebalanceUtils.getNodeIdToAllPartitions(targetCluster,storeDefs,true));
  this.targetNodeIdToAllDeletedPartitions=Collections.unmodifiableMap(getTargetNodeIdToAllDeletePartitions());
  this.targetNodeIdToAllStolenPartitions=Collections.unmodifiableMap(getTargetNodeIdToAllStolenPartitions());
  for (  Node node : targetCluster.getNodes()) {
    List<RebalancePartitionsInfo> rebalanceNodeList=getRebalancePartitionsInfo(currentCluster,targetCluster,RebalanceUtils.getStoreNames(storeDefs),node.getId(),enabledDeletePartition);
    if (rebalanceNodeList.size() > 0) {
      rebalanceTaskQueue.offer(new RebalanceNodePlan(node.getId(),rebalanceNodeList));
    }
  }
}
