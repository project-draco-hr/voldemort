{
  final int donorId=donor.getId();
  if (enabledDeletePartition) {
    if (targetNodeIdToAllDeletedPartitions.get(donorId) != null && targetNodeIdToAllDeletedPartitions.get(donorId).size() > 0) {
      Set<Integer> delPartitions=new TreeSet<Integer>(targetNodeIdToAllDeletedPartitions.get(donorId));
      final Cluster sortedTargetCluster=sortCluster(targetCluster);
      for (      Node somebody : sortedTargetCluster.getNodes()) {
        if (somebody.getId() == donorId || somebody.getId() <= stealerId)         continue;
        Set<Integer> somebodyWillReceivePartitions=targetNodeIdToAllDonatedPartitions.get(somebody.getId());
        Iterator<Integer> iterator=delPartitions.iterator();
        while (iterator.hasNext()) {
          Integer delPartition=iterator.next();
          if (somebodyWillReceivePartitions != null && somebodyWillReceivePartitions.contains(delPartition)) {
            iterator.remove();
          }
        }
      }
      Set<Integer> alreadyDeletedPartitions=alreadyDeletedNodeIdToPartions.get(donorId);
      if (alreadyDeletedPartitions != null) {
        delPartitions.removeAll(alreadyDeletedPartitions);
      }
      trackDeletePartitions.addAll(delPartitions);
      addDeletedPartition(alreadyDeletedNodeIdToPartions,donorId,delPartitions);
    }
  }
}
