{
  final List<RebalancePartitionsInfo> result=new ArrayList<RebalancePartitionsInfo>();
  if (stealerNodeIdToStolenPartitionTuples.get(stealerId) == null) {
    return result;
  }
  final Set<Pair<Integer,Integer>> haveToStealTuples=Sets.newHashSet(stealerNodeIdToStolenPartitionTuples.get(stealerId));
  for (  Node donorNode : currentCluster.getNodes()) {
    if (donorNode.getId() == stealerId)     continue;
    if (haveFinishedPartitions(haveToStealTuples)) {
      break;
    }
    final Set<Pair<Integer,Integer>> trackStealPartitionsTuples=new HashSet<Pair<Integer,Integer>>();
    final Set<Pair<Integer,Integer>> trackDeletePartitionsTuples=new HashSet<Pair<Integer,Integer>>();
    donatePartitionTuple(donorNode,haveToStealTuples,trackStealPartitionsTuples);
    donateDeletePartitionTuple(donorNode,trackStealPartitionsTuples,trackDeletePartitionsTuples,enableDeletePartition);
    if (trackStealPartitionsTuples.size() > 0 || trackDeletePartitionsTuples.size() > 0) {
      result.add(new RebalancePartitionsInfo(stealerId,donorNode.getId(),RebalanceUtils.flattenPartitionTuples(trackStealPartitionsTuples),RebalanceUtils.flattenPartitionTuples(trackDeletePartitionsTuples),storeNames,currentCluster,0));
    }
  }
  return result;
}
