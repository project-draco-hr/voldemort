{
  final List<RebalancePartitionsInfo> result=new ArrayList<RebalancePartitionsInfo>();
  final Set<Pair<Integer,Integer>> haveToStealTuples=RebalanceUtils.getStolenPartitionTuples(currentCluster,targetCluster,storeDefs,stealerId);
  if (haveToStealTuples.size() == 0) {
    return result;
  }
  for (  Node donorNode : currentCluster.getNodes()) {
    if (donorNode.getId() == stealerId)     continue;
    if (haveFinishedPartitions(haveToStealTuples)) {
      break;
    }
    final Set<Pair<Integer,Integer>> trackStealPartitionsTuples=new HashSet<Pair<Integer,Integer>>();
    donatePartitionTuple(donorNode,haveToStealTuples,trackStealPartitionsTuples);
    if (trackStealPartitionsTuples.size() > 0) {
      result.add(new RebalancePartitionsInfo(stealerId,donorNode.getId(),flatten(trackStealPartitionsTuples),storeNames,currentCluster,enableDeletePartition,0));
    }
  }
  return result;
}
