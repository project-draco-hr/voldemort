{
  MigratePartitions tool=new MigratePartitions(consistentRoutingCluster,zoneRoutingClusterModified,Lists.newArrayList(beforeStoreDef),Lists.newArrayList(afterStoreDef),adminClient,voldemortConfig,Lists.newArrayList(0),2,true);
  HashMap<Integer,List<RebalancePartitionsInfo>> donorNodePlans=tool.getDonorNodePlan();
  Assert.assertEquals(donorNodePlans.size(),1);
  Assert.assertEquals(donorNodePlans.get(1).size(),1);
  tool=new MigratePartitions(consistentRoutingCluster,zoneRoutingClusterModified,Lists.newArrayList(beforeStoreDef),Lists.newArrayList(afterStoreDef),adminClient,voldemortConfig,Lists.newArrayList(1),2,true);
  donorNodePlans=tool.getDonorNodePlan();
  Assert.assertEquals(donorNodePlans.size(),1);
  Assert.assertEquals(donorNodePlans.get(0).size(),1);
  tool=new MigratePartitions(consistentRoutingCluster,zoneRoutingClusterModified,Lists.newArrayList(beforeStoreDef),Lists.newArrayList(afterStoreDef),adminClient,voldemortConfig,Lists.newArrayList(0,-1),2,true);
  donorNodePlans=tool.getDonorNodePlan();
  Assert.assertEquals(donorNodePlans.size(),1);
  Assert.assertEquals(donorNodePlans.get(1).size(),1);
  tool=new MigratePartitions(consistentRoutingCluster,zoneRoutingClusterModified,Lists.newArrayList(beforeStoreDef),Lists.newArrayList(afterStoreDef),adminClient,voldemortConfig,null,2,true);
  donorNodePlans=tool.getDonorNodePlan();
  Assert.assertEquals(donorNodePlans.size(),2);
  Assert.assertEquals(donorNodePlans.get(0).size(),1);
  Assert.assertEquals(donorNodePlans.get(1).size(),1);
}
