{
  List<Node> nodes=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    nodes.add(new Node(i,"node" + i,100,200,300,Lists.newArrayList(i,i + NUM_NODES)));
  }
  consistentRoutingCluster=new Cluster("consistent",nodes);
  List<Zone> zones=Lists.newArrayList();
  for (int i=0; i < NUM_ZONES; i++) {
    LinkedList<Integer> proximityList=Lists.newLinkedList();
    int zoneId=i + 1;
    for (int j=0; j < NUM_ZONES; j++) {
      proximityList.add(zoneId % NUM_ZONES);
      zoneId++;
    }
    zones.add(new Zone(i,proximityList));
  }
  nodes=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    List<Integer> partitions=Lists.newArrayList();
    if (i == 0)     partitions.add(i + NUM_NODES);
 else {
      partitions.add(i);
      partitions.add(i + NUM_NODES);
    }
    if (i == NUM_NODES - 1)     partitions.add(0);
    if (i < NUM_NODES / 2)     nodes.add(new Node(i,"node" + i,100,200,300,0,partitions));
 else     nodes.add(new Node(i,"node" + i,100,200,300,1,partitions));
  }
  zoneRoutingClusterModified=new Cluster("zone",nodes,zones);
  HashMap<Integer,Integer> zoneReplicationFactors=Maps.newHashMap();
  for (int zoneIds=0; zoneIds < NUM_ZONES; zoneIds++) {
    zoneReplicationFactors.put(zoneIds,1);
  }
  beforeStoreDef=ServerTestUtils.getStoreDef("consistent_to_zone_store",1,1,1,1,1,RoutingStrategyType.CONSISTENT_STRATEGY);
  afterStoreDef=ServerTestUtils.getStoreDef("consistent_to_zone_store",2,1,1,1,0,0,zoneReplicationFactors,HintedHandoffStrategyType.PROXIMITY_STRATEGY,RoutingStrategyType.ZONE_STRATEGY);
}
