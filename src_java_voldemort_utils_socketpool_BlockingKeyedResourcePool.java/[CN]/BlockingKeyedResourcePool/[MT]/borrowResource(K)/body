{
  if (!isRunningState.get()) {
    throw new IllegalStateException("IllegalState: Cannot borrow when resource pool is closing down.");
  }
  long startTime=System.currentTimeMillis();
  Resources<V> resources=resourcesMap.get(key);
  if (resources == null) {
    resources=new Resources<V>(config.getDefaultPoolSize());
    Resources<V> prev=resourcesMap.putIfAbsent(key,resources);
    if (prev != null)     resources=prev;
  }
  int numTries=0;
  V resource=getResource(key,resources,config.getBorrowTimeout(),config.getBorrowTimeoutUnit());
  while (!objectFactory.validate(key,resource)) {
    logger.warn("resource validate() failed for resource:" + resource);
    cleanDestroyResource(key,resources,resource);
    if (++numTries < config.getMaxBorrowTries()) {
      logger.info("trying getResource()" + numTries + " time for key:"+ key);
      resource=getResource(key,resources,computeNewTimeout(startTime,config.getBorrowTimeout(),config.getBorrowTimeoutUnit()),config.getBorrowTimeoutUnit());
    }
 else {
      throw new TimeoutException("Failed to get Resource within " + config.getMaxBorrowTries() + " tries..");
    }
  }
  return objectFactory.activate(key,resource);
}
