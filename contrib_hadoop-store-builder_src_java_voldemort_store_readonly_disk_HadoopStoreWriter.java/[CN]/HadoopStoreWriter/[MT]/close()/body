{
  this.indexFileStream.close();
  this.valueFileStream.close();
  if (this.nodeId == -1 || this.chunkId == -1 || this.partitionId == -1) {
    return;
  }
  if (getSaveKeys() && this.replicaType == -1) {
    throw new RuntimeException("Could not read the replica type correctly for node " + nodeId + " ( partition - "+ this.partitionId+ " )");
  }
  String fileNamePrefix=null;
  if (getSaveKeys()) {
    fileNamePrefix=new String(Integer.toString(this.partitionId) + "_" + Integer.toString(this.replicaType)+ "_"+ Integer.toString(this.chunkId));
  }
 else {
    fileNamePrefix=new String(Integer.toString(this.partitionId) + "_" + Integer.toString(this.chunkId));
  }
  Path nodeDir=new Path(this.outputDir,"node-" + this.nodeId);
  FileSystem outputFs=nodeDir.getFileSystem(this.conf);
  outputFs.mkdirs(nodeDir);
  outputFs.setPermission(nodeDir,new FsPermission(HadoopStoreBuilder.HADOOP_FILE_PERMISSION));
  logger.info("Setting permission to 755 for " + nodeDir);
  if (this.checkSumType != CheckSumType.NONE) {
    if (this.checkSumDigestIndex != null && this.checkSumDigestValue != null) {
      Path checkSumIndexFile=new Path(nodeDir,fileNamePrefix + INDEX_FILE_EXTENSION + CHECKSUM_FILE_EXTENSION);
      Path checkSumValueFile=new Path(nodeDir,fileNamePrefix + DATA_FILE_EXTENSION + CHECKSUM_FILE_EXTENSION);
      if (outputFs.exists(checkSumIndexFile)) {
        outputFs.delete(checkSumIndexFile);
      }
      FSDataOutputStream output=outputFs.create(checkSumIndexFile);
      outputFs.setPermission(checkSumIndexFile,new FsPermission(HadoopStoreBuilder.HADOOP_FILE_PERMISSION));
      output.write(this.checkSumDigestIndex.getCheckSum());
      output.close();
      if (outputFs.exists(checkSumValueFile)) {
        outputFs.delete(checkSumValueFile);
      }
      output=outputFs.create(checkSumValueFile);
      outputFs.setPermission(checkSumValueFile,new FsPermission(HadoopStoreBuilder.HADOOP_FILE_PERMISSION));
      output.write(this.checkSumDigestValue.getCheckSum());
      output.close();
    }
 else {
      throw new RuntimeException("Failed to open checksum digest for node " + nodeId + " ( partition - "+ this.partitionId+ ", chunk - "+ chunkId+ " )");
    }
  }
  Path indexFile=new Path(nodeDir,fileNamePrefix + INDEX_FILE_EXTENSION + fileExtension);
  Path valueFile=new Path(nodeDir,fileNamePrefix + DATA_FILE_EXTENSION + fileExtension);
  logger.info("Moving " + this.taskIndexFileName + " to "+ indexFile);
  if (outputFs.exists(indexFile)) {
    outputFs.delete(indexFile);
  }
  outputFs.rename(taskIndexFileName,indexFile);
  logger.info("Moving " + this.taskValueFileName + " to "+ valueFile);
  if (outputFs.exists(valueFile)) {
    outputFs.delete(valueFile);
  }
  outputFs.rename(this.taskValueFileName,valueFile);
}
