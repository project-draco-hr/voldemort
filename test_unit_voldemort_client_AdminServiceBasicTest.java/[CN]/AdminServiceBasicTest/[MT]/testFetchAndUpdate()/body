{
  HashMap<ByteArray,byte[]> entrySet=ServerTestUtils.createRandomKeyValuePairs(TEST_STREAM_KEYS_SIZE);
  List<Integer> fetchAndUpdatePartitionsList=Arrays.asList(0,2);
  int fetchPartitionKeyCount=0;
  Store<ByteArray,byte[]> store=getStore(0,testStoreName);
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet()) {
    store.put(entry.getKey(),new Versioned<byte[]>(entry.getValue()));
    if (isKeyPartition(entry.getKey(),0,testStoreName,fetchAndUpdatePartitionsList)) {
      fetchPartitionKeyCount++;
    }
  }
  store=getStore(1,testStoreName);
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet())   assertEquals("server1 should be empty at start.",0,store.get(entry.getKey()).size());
  AdminClient client=getAdminClient();
  int id=client.fetchAndUpdateStreams(0,1,testStoreName,fetchAndUpdatePartitionsList,null);
  client.waitForCompletion(1,id,5,TimeUnit.SECONDS);
  int count=0;
  store=getStore(1,testStoreName);
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet()) {
    if (isKeyPartition(entry.getKey(),0,testStoreName,fetchAndUpdatePartitionsList)) {
      assertEquals("server1 store should contain fetchAndupdated partitions.",1,store.get(entry.getKey()).size());
      assertEquals("entry value should match",new String(entry.getValue()),new String(store.get(entry.getKey()).get(0).getValue()));
      count++;
    }
  }
  assertEquals("All keys for asked partitions should be received",fetchPartitionKeyCount,count);
}
