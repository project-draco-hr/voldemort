{
  AdminClient client=getAdminClient();
  int nodeId=0;
  String storeNameToBeUpdated="users";
  doClientOperation();
  Versioned<List<StoreDefinition>> originalStoreDefinitions=client.metadataMgmtOps.getRemoteStoreDefList(nodeId);
  List<StoreDefinition> updatedStoreDefList=new ArrayList<StoreDefinition>();
  StoreDefinition oldDefinition=getStoreDefinitionFromList(originalStoreDefinitions.getValue(),storeNameToBeUpdated);
  StoreDefinition newDefinition=new StoreDefinitionBuilder().setName(storeNameToBeUpdated).setType(oldDefinition.getType()).setKeySerializer(oldDefinition.getKeySerializer()).setValueSerializer(oldDefinition.getValueSerializer()).setRoutingPolicy(oldDefinition.getRoutingPolicy()).setRoutingStrategyType(oldDefinition.getRoutingStrategyType()).setReplicationFactor(2).setPreferredReads(2).setRequiredReads(1).setPreferredWrites(2).setRequiredWrites(2).build();
  updatedStoreDefList.add(newDefinition);
  client.metadataMgmtOps.fetchAndUpdateRemoteStore(nodeId,updatedStoreDefList);
  Versioned<List<StoreDefinition>> newStoreDefinitions=client.metadataMgmtOps.getRemoteStoreDefList(nodeId);
  assertFalse(originalStoreDefinitions.getValue().equals(newStoreDefinitions.getValue()));
  for (  StoreDefinition def : newStoreDefinitions.getValue()) {
    if (def.getName().equalsIgnoreCase(storeNameToBeUpdated)) {
      assertTrue(def.equals(newDefinition));
    }
  }
  client.metadataMgmtOps.updateRemoteStoreDefList(nodeId,originalStoreDefinitions.getValue());
  doClientOperation();
}
