{
  Map<Integer,Set<Pair<Integer,Integer>>> buckets=RebalanceUtils.getNodeIdToAllPartitions(cluster,StoreDefinitionUtils.getStoreDefinitionWithName(storeDefs,"test-readonly-fetchfiles"),true);
  for (  Node node : cluster.getNodes()) {
    ReadOnlyStorageEngine store=(ReadOnlyStorageEngine)getStore(node.getId(),"test-readonly-fetchfiles");
    Set<Pair<Integer,Integer>> nodeBucketsSet=buckets.get(node.getId());
    HashMap<Integer,List<Integer>> nodeBuckets=RebalanceUtils.flattenPartitionTuples(nodeBucketsSet);
    HashMap<Integer,List<Integer>> primaryNodeBuckets=Maps.newHashMap();
    primaryNodeBuckets.put(0,nodeBuckets.get(0));
    int primaryPartitions=nodeBuckets.get(0).size();
    HashMap<Integer,List<Integer>> replicaNodeBuckets=Maps.newHashMap(nodeBuckets);
    replicaNodeBuckets.remove(0);
    int replicaPartitions=0;
    for (    List<Integer> partitions : replicaNodeBuckets.values()) {
      replicaPartitions+=partitions.size();
    }
    File newVersionDir=new File(store.getStoreDirPath(),"version-" + Long.toString(versionId));
    Utils.mkdirs(newVersionDir);
    generateROFiles(numChunks,indexSize,dataSize,nodeBuckets,newVersionDir);
    store.swapFiles(newVersionDir.getAbsolutePath());
    HashMap<Object,Integer> chunkIdToNumChunks=store.getChunkedFileSet().getChunkIdToNumChunks();
    for (    Object bucket : chunkIdToNumChunks.keySet()) {
      Pair<Integer,Integer> partitionToReplicaBucket=(Pair<Integer,Integer>)bucket;
      Pair<Integer,Integer> replicaToPartitionBucket=Pair.create(partitionToReplicaBucket.getSecond(),partitionToReplicaBucket.getFirst());
      assertTrue(nodeBucketsSet.contains(replicaToPartitionBucket));
    }
    File tempDir=TestUtils.createTempDir();
    HashMap<Integer,List<Integer>> dumbMap=Maps.newHashMap();
    dumbMap.put(0,Lists.newArrayList(100));
    try {
      getAdminClient().readonlyOps.fetchPartitionFiles(node.getId(),"test-readonly-fetchfiles",Lists.newArrayList(100),tempDir.getAbsolutePath(),null,running);
      fail("Should throw exception since partition map passed is bad");
    }
 catch (    VoldemortException e) {
    }
    tempDir=TestUtils.createTempDir();
    getAdminClient().readonlyOps.fetchPartitionFiles(node.getId(),"test-readonly-fetchfiles",primaryNodeBuckets.get(0),tempDir.getAbsolutePath(),null,running);
    assertEquals(tempDir.list().length,2 * primaryPartitions * numChunks + 1);
    for (    Entry<Integer,List<Integer>> entry : primaryNodeBuckets.entrySet()) {
      int replicaType=entry.getKey();
      for (      int partitionId : entry.getValue()) {
        for (int chunkId=0; chunkId < numChunks; chunkId++) {
          File indexFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".index");
          File dataFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".data");
          assertTrue(indexFile.exists());
          assertTrue(dataFile.exists());
          assertEquals(indexFile.length(),indexSize);
          assertEquals(dataFile.length(),dataSize);
        }
      }
    }
    File metadataFile=new File(tempDir,".metadata");
    assertEquals(metadataFile.exists(),true);
    tempDir=TestUtils.createTempDir();
    for (    Entry<Integer,List<Integer>> entry : replicaNodeBuckets.entrySet()) {
      getAdminClient().readonlyOps.fetchPartitionFiles(node.getId(),"test-readonly-fetchfiles",entry.getValue(),tempDir.getAbsolutePath(),null,running);
    }
    assertEquals(tempDir.list().length,2 * replicaPartitions * numChunks + 1);
    for (    Entry<Integer,List<Integer>> entry : replicaNodeBuckets.entrySet()) {
      int replicaType=entry.getKey();
      for (      int partitionId : entry.getValue()) {
        for (int chunkId=0; chunkId < numChunks; chunkId++) {
          File indexFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".index");
          File dataFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".data");
          assertTrue(indexFile.exists());
          assertTrue(dataFile.exists());
          assertEquals(indexFile.length(),indexSize);
          assertEquals(dataFile.length(),dataSize);
        }
      }
    }
    metadataFile=new File(tempDir,".metadata");
    assertEquals(metadataFile.exists(),true);
    tempDir=TestUtils.createTempDir();
    for (    Entry<Integer,List<Integer>> entry : nodeBuckets.entrySet()) {
      getAdminClient().readonlyOps.fetchPartitionFiles(node.getId(),"test-readonly-fetchfiles",entry.getValue(),tempDir.getAbsolutePath(),null,running);
    }
    assertEquals(tempDir.list().length,2 * (primaryPartitions + replicaPartitions) * numChunks + 1);
    for (    Entry<Integer,List<Integer>> entry : nodeBuckets.entrySet()) {
      int replicaType=entry.getKey();
      for (      int partitionId : entry.getValue()) {
        for (int chunkId=0; chunkId < numChunks; chunkId++) {
          File indexFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".index");
          File dataFile=new File(tempDir,Integer.toString(partitionId) + "_" + Integer.toString(replicaType)+ "_"+ Integer.toString(chunkId)+ ".data");
          assertTrue(indexFile.exists());
          assertTrue(dataFile.exists());
          assertEquals(indexFile.length(),indexSize);
          assertEquals(dataFile.length(),dataSize);
        }
      }
    }
    metadataFile=new File(tempDir,".metadata");
    assertEquals(metadataFile.exists(),true);
  }
}
