{
  HashMap<ByteArray,byte[]> entrySet=ServerTestUtils.createRandomKeyValuePairs(TEST_STREAM_KEYS_SIZE);
  List<Integer> primaryMoved=Arrays.asList(0,2);
  List<Integer> secondaryMoved=Arrays.asList(1,4);
  List<Integer> combinedLists=Arrays.asList(0,1,2,4);
  Cluster targetCluster=RebalanceUtils.createUpdatedCluster(cluster,1,primaryMoved);
  HashMap<ByteArray,byte[]> keysMovedWith0AsSecondary=Maps.newHashMap();
  RoutingStrategy strategy=new RoutingStrategyFactory().updateRoutingStrategy(StoreDefinitionUtils.getStoreDefinitionWithName(storeDefs,"test-recovery-data"),cluster);
  Store<ByteArray,byte[],byte[]> store0=getStore(0,"test-recovery-data");
  Store<ByteArray,byte[],byte[]> store1=getStore(1,"test-recovery-data");
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet()) {
    store0.put(entry.getKey(),new Versioned<byte[]>(entry.getValue()),null);
    List<Integer> partitions=strategy.getPartitionList(entry.getKey().get());
    if (primaryMoved.contains(partitions.get(0)) || (secondaryMoved.contains(partitions.get(0)) && cluster.getNodeById(0).getPartitionIds().contains(partitions.get(1)))) {
      keysMovedWith0AsSecondary.put(entry.getKey(),entry.getValue());
    }
  }
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet())   assertEquals("server1 should be empty at start.",0,store1.get(entry.getKey(),null).size());
  getServer(0).getMetadataStore().put(MetadataStore.CLUSTER_KEY,targetCluster);
  AdminClient client=getAdminClient();
  int id=client.storeMntOps.migratePartitions(0,1,"test-recovery-data",combinedLists,null,cluster,false);
  client.rpcOps.waitForCompletion(1,id,120,TimeUnit.SECONDS);
  for (  Entry<ByteArray,byte[]> entry : keysMovedWith0AsSecondary.entrySet()) {
    assertEquals("server1 store should contain fetchAndupdated partitions.",1,store1.get(entry.getKey(),null).size());
    assertEquals("entry value should match",new String(entry.getValue()),new String(store1.get(entry.getKey(),null).get(0).getValue()));
  }
}
