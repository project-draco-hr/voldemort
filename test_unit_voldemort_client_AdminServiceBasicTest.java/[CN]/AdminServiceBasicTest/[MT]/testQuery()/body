{
  HashMap<ByteArray,byte[]> belongToAndInsideServer0=new HashMap<ByteArray,byte[]>();
  HashMap<ByteArray,byte[]> belongToAndInsideServer1=new HashMap<ByteArray,byte[]>();
  HashMap<ByteArray,byte[]> notBelongServer0ButInsideServer0=new HashMap<ByteArray,byte[]>();
  HashMap<ByteArray,byte[]> belongToServer0ButOutsideBoth=new HashMap<ByteArray,byte[]>();
  HashMap<ByteArray,byte[]> notBelongToServer0AndOutsideBoth=new HashMap<ByteArray,byte[]>();
  Store<ByteArray,byte[],byte[]> store0=getStore(0,testStoreName);
  Store<ByteArray,byte[],byte[]> store1=getStore(1,testStoreName);
  HashMap<ByteArray,byte[]> entrySet=null;
  Iterator<ByteArray> keys=null;
  RoutingStrategy strategy=servers[0].getMetadataStore().getRoutingStrategy(testStoreName);
  while (true) {
    ByteArray key;
    byte[] value;
    if (keys == null || !keys.hasNext()) {
      entrySet=ServerTestUtils.createRandomKeyValuePairs(100);
      keys=entrySet.keySet().iterator();
    }
    key=keys.next();
    value=entrySet.get(key);
    List<Node> routedNodes=strategy.routeRequest(key.get());
    boolean keyShouldBeInNode0=false;
    boolean keyShouldBeInNode1=false;
    for (    Node node : routedNodes) {
      keyShouldBeInNode0=keyShouldBeInNode0 || (node.getId() == 0);
      keyShouldBeInNode1=keyShouldBeInNode1 || (node.getId() == 1);
    }
    if (belongToAndInsideServer0.size() < 10) {
      if (keyShouldBeInNode0) {
        belongToAndInsideServer0.put(key,value);
        store0.put(key,new Versioned<byte[]>(value),null);
      }
    }
 else     if (belongToAndInsideServer1.size() < 10) {
      if (keyShouldBeInNode1) {
        belongToAndInsideServer1.put(key,value);
        store1.put(key,new Versioned<byte[]>(value),null);
      }
    }
 else     if (notBelongServer0ButInsideServer0.size() < 5) {
      if (!keyShouldBeInNode0) {
        notBelongServer0ButInsideServer0.put(key,value);
        store0.put(key,new Versioned<byte[]>(value),null);
      }
    }
 else     if (belongToServer0ButOutsideBoth.size() < 5) {
      if (keyShouldBeInNode0) {
        belongToServer0ButOutsideBoth.put(key,value);
      }
    }
 else     if (notBelongToServer0AndOutsideBoth.size() < 5) {
      if (!keyShouldBeInNode0) {
        notBelongToServer0AndOutsideBoth.put(key,value);
      }
    }
 else {
      break;
    }
  }
  ArrayList<ByteArray> belongToAndInsideServer0Keys=new ArrayList<ByteArray>(belongToAndInsideServer0.keySet());
  ArrayList<ByteArray> belongToAndInsideServer1Keys=new ArrayList<ByteArray>(belongToAndInsideServer1.keySet());
  ArrayList<ByteArray> notBelongServer0ButInsideServer0Keys=new ArrayList<ByteArray>(notBelongServer0ButInsideServer0.keySet());
  ArrayList<ByteArray> belongToServer0ButOutsideBothKeys=new ArrayList<ByteArray>(belongToServer0ButOutsideBoth.keySet());
  ArrayList<ByteArray> notBelongToServer0AndOutsideBothKeys=new ArrayList<ByteArray>(notBelongToServer0AndOutsideBoth.keySet());
  List<ByteArray> queryKeys;
  Iterator<QueryKeyResult> results;
  QueryKeyResult entry;
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(belongToAndInsideServer0Keys.get(0));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertEquals(queryKeys.get(0),entry.getKey());
  assertNull("There should not be exception in response",entry.getException());
  assertEquals("There should be only 1 value in versioned list",1,entry.getValues().size());
  assertEquals("Two byte[] should be equal",0,ByteUtils.compare(belongToAndInsideServer0.get(queryKeys.get(0)),entry.getValues().get(0).getValue()));
  assertFalse("There should be only one result",results.hasNext());
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(belongToServer0ButOutsideBothKeys.get(0));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertFalse("There should not be more results",results.hasNext());
  assertEquals("Not the right key",queryKeys.get(0),entry.getKey());
  assertNotNull("Response should be non-null",entry.getValues());
  assertEquals("Value should be empty list",0,entry.getValues().size());
  assertNull("There should not be exception",entry.getException());
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(notBelongToServer0AndOutsideBothKeys.get(0));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertFalse("There should not be more results",results.hasNext());
  assertEquals("Not the right key",queryKeys.get(0),entry.getKey());
  assertNull("Value should be null",entry.getValues());
  assertTrue("There should be InvalidMetadataException exception",entry.getException() instanceof InvalidMetadataException);
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(notBelongServer0ButInsideServer0Keys.get(0));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertFalse("There should not be more results",results.hasNext());
  assertEquals("Not the right key",queryKeys.get(0),entry.getKey());
  assertNull("Value should be null",entry.getValues());
  assertTrue("There should be InvalidMetadataException exception",entry.getException() instanceof InvalidMetadataException);
  store0.delete(belongToAndInsideServer0Keys.get(4),null);
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(belongToAndInsideServer0Keys.get(4));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertFalse("There should not be more results",results.hasNext());
  assertEquals("Not the right key",queryKeys.get(0),entry.getKey());
  assertEquals("Value should be empty list",0,entry.getValues().size());
  assertNull("There should not be exception",entry.getException());
  queryKeys=new ArrayList<ByteArray>();
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertFalse("Results should be empty",results.hasNext());
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(null);
  assertEquals(1,queryKeys.size());
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  entry=results.next();
  assertFalse("There should not be more results",results.hasNext());
  assertNull("Value should be null",entry.getValues());
  assertTrue("There should be IllegalArgumentException exception",entry.getException() instanceof IllegalArgumentException);
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(belongToAndInsideServer1Keys.get(0));
  queryKeys.add(belongToAndInsideServer1Keys.get(1));
  queryKeys.add(belongToAndInsideServer1Keys.get(2));
  results=getAdminClient().storeOps.queryKeys(1,testStoreName,queryKeys.iterator());
  assertTrue("Results should not be empty",results.hasNext());
  Map<ByteArray,List<Versioned<byte[]>>> entries=new HashMap<ByteArray,List<Versioned<byte[]>>>();
  int resultCount=0;
  while (results.hasNext()) {
    resultCount++;
    entry=results.next();
    assertNull("There should not be exception in response",entry.getException());
    assertNotNull("Value should not be null for Key: ",entry.getValues());
    entries.put(entry.getKey(),entry.getValues());
  }
  assertEquals("There should 3 and only 3 results",3,resultCount);
  for (  ByteArray key : queryKeys) {
    assertNotNull("This key should exist in the results: " + key,entries.get(key));
    assertEquals("Two byte[] should be equal for key: " + key,0,ByteUtils.compare(belongToAndInsideServer1.get(key),entries.get(key).get(0).getValue()));
  }
  store0.delete(belongToAndInsideServer0Keys.get(5),null);
  queryKeys=new ArrayList<ByteArray>();
  queryKeys.add(belongToAndInsideServer0Keys.get(2));
  queryKeys.add(notBelongServer0ButInsideServer0Keys.get(1));
  queryKeys.add(belongToServer0ButOutsideBothKeys.get(1));
  queryKeys.add(notBelongToServer0AndOutsideBothKeys.get(1));
  queryKeys.add(belongToAndInsideServer0Keys.get(3));
  queryKeys.add(belongToAndInsideServer0Keys.get(5));
  queryKeys.add(notBelongServer0ButInsideServer0Keys.get(2));
  results=getAdminClient().storeOps.queryKeys(0,testStoreName,queryKeys.iterator());
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(0).get(),entry.getKey().get()));
  assertEquals(0,ByteUtils.compare(belongToAndInsideServer0.get(queryKeys.get(0)),entry.getValues().get(0).getValue()));
  assertNull(entry.getException());
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(1).get(),entry.getKey().get()));
  assertTrue("There should be InvalidMetadataException exception",entry.getException() instanceof InvalidMetadataException);
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(2).get(),entry.getKey().get()));
  assertEquals(0,entry.getValues().size());
  assertNull(entry.getException());
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(3).get(),entry.getKey().get()));
  assertTrue("There should be InvalidMetadataException exception",entry.getException() instanceof InvalidMetadataException);
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(4).get(),entry.getKey().get()));
  assertEquals(0,ByteUtils.compare(belongToAndInsideServer0.get(queryKeys.get(4)),entry.getValues().get(0).getValue()));
  assertNull(entry.getException());
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(5).get(),entry.getKey().get()));
  assertEquals(0,entry.getValues().size());
  assertNull(entry.getException());
  entry=results.next();
  assertEquals(0,ByteUtils.compare(queryKeys.get(6).get(),entry.getKey().get()));
  assertTrue("There should be InvalidMetadataException exception",entry.getException() instanceof InvalidMetadataException);
  assertFalse(results.hasNext());
}
