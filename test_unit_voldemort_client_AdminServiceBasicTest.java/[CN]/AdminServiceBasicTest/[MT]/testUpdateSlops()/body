{
  final List<Slop> entrySet=ServerTestUtils.createRandomSlops(0,10000,testStoreName,"users","test-replication-persistent","test-readrepair-memory","test-consistent","test-consistent-with-pref-list");
  Iterator<Versioned<Slop>> slopIterator=new AbstractIterator<Versioned<Slop>>(){
    final Iterator<Slop> entrySetItr=entrySet.iterator();
    @Override protected Versioned<Slop> computeNext(){
      while (entrySetItr.hasNext()) {
        return Versioned.value(entrySetItr.next());
      }
      return endOfData();
    }
  }
;
  getAdminClient().updateSlopEntries(0,slopIterator);
  Iterator<Slop> entrysetItr=entrySet.iterator();
  while (entrysetItr.hasNext()) {
    Slop nextSlop=entrysetItr.next();
    Store<ByteArray,byte[],byte[]> store=getStore(0,nextSlop.getStoreName());
    if (nextSlop.getOperation().equals(Slop.Operation.PUT)) {
      assertNotSame("entry should be present at store",0,store.get(nextSlop.getKey(),null).size());
      assertEquals("entry value should match",new String(nextSlop.getValue()),new String(store.get(nextSlop.getKey(),null).get(0).getValue()));
    }
 else     if (nextSlop.getOperation().equals(Slop.Operation.DELETE)) {
      assertEquals("entry value should match",0,store.get(nextSlop.getKey(),null).size());
    }
  }
}
