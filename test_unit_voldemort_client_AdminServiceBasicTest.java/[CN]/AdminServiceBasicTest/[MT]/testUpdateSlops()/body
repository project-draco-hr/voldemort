{
  final HashMap<ByteArray,byte[]> entrySet=ServerTestUtils.createRandomKeyValuePairs(TEST_STREAM_KEYS_SIZE);
  Iterator<Versioned<Slop>> slopIterator=new AbstractIterator<Versioned<Slop>>(){
    final Iterator<Entry<ByteArray,byte[]>> entrySetItr=entrySet.entrySet().iterator();
    @Override protected Versioned<Slop> computeNext(){
      while (entrySetItr.hasNext()) {
        Entry<ByteArray,byte[]> entry=entrySetItr.next();
        return Versioned.value(new Slop(testStoreName,Slop.Operation.PUT,entry.getKey(),entry.getValue(),null,0,new Date()));
      }
      return endOfData();
    }
  }
;
  getAdminClient().updateSlopEntries(0,slopIterator);
  Store<ByteArray,byte[],byte[]> store=getStore(0,testStoreName);
  for (  Entry<ByteArray,byte[]> entry : entrySet.entrySet()) {
    assertNotSame("entry should be present at store",0,store.get(entry.getKey(),null).size());
    assertEquals("entry value should match",new String(entry.getValue()),new String(store.get(entry.getKey(),null).get(0).getValue()));
  }
}
