{
  HashMap<String,StoreRoutingPlan> currentStoreRoutingPlans=new HashMap<String,StoreRoutingPlan>();
  for (  StoreDefinition storeDef : currentStoreDefs) {
    currentStoreRoutingPlans.put(storeDef.getName(),new StoreRoutingPlan(currentCluster,storeDef));
  }
  HashMap<String,StoreRoutingPlan> finalStoreRoutingPlans=new HashMap<String,StoreRoutingPlan>();
  for (  StoreDefinition storeDef : finalStoreDefs) {
    finalStoreRoutingPlans.put(storeDef.getName(),new StoreRoutingPlan(finalCluster,storeDef));
  }
  RebalanceTaskInfoBuilder rpiBuilder=new RebalanceTaskInfoBuilder();
  for (  Node stealerNode : finalCluster.getNodes()) {
    int stealerZoneId=stealerNode.getZoneId();
    int stealerNodeId=stealerNode.getId();
    for (    StoreDefinition storeDef : finalStoreDefs) {
      StoreRoutingPlan currentSRP=currentStoreRoutingPlans.get(storeDef.getName());
      StoreRoutingPlan finalSRP=finalStoreRoutingPlans.get(storeDef.getName());
      for (      int stealerPartitionId : finalSRP.getZoneNAryPartitionIds(stealerNodeId)) {
        if (currentSRP.getReplicationNodeList(stealerPartitionId).contains(stealerNodeId)) {
          continue;
        }
        int donorNodeId=getDonorId(currentSRP,finalSRP,stealerZoneId,stealerNodeId,stealerPartitionId);
        int donorReplicaType=currentSRP.getReplicaType(donorNodeId,stealerPartitionId);
        rpiBuilder.addPartitionStoreMove(stealerNodeId,donorNodeId,storeDef.getName(),stealerPartitionId);
      }
    }
  }
  return rpiBuilder.buildRebalanceTaskInfos();
}
