{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("sshprivatekey","File containing SSH private key (optional)").withRequiredArg();
  parser.accepts("hostuserid","User ID on remote host").withRequiredArg();
  parser.accepts("voldemorthome","Voldemort's home directory on remote host").withRequiredArg();
  OptionSet options=parse(args);
  File hostNamesFile=getRequiredInputFile(options,"hostnames");
  File sshPrivateKey=getInputFile(options,"sshprivatekey");
  String hostUserId=CmdUtils.valueOf(options,"hostuserid","root");
  String voldemortHomeDirectory=getRequiredString(options,"voldemorthome");
  List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(hostNamesFile);
  List<String> hostNames=new ArrayList<String>();
  for (  HostNamePair hostNamePair : hostNamePairs)   hostNames.add(hostNamePair.getExternalHostName());
  RemoteOperation operation=new SshClusterCleaner(hostNames,sshPrivateKey,hostUserId,voldemortHomeDirectory);
  operation.execute();
}
