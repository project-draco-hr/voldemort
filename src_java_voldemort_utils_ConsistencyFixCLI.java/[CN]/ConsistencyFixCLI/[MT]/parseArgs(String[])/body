{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("url","The bootstrap url.").withRequiredArg().describedAs("bootstrapUrl").ofType(String.class);
  parser.accepts("store","The store name.").withRequiredArg().describedAs("storeName").ofType(String.class);
  parser.accepts("bad-key-file-in","Name of bad-key-file-in. " + "Each key must be in hexadecimal format. " + "Each key must be on a separate line in the file. ").withRequiredArg().describedAs("badKeyFileIn").ofType(String.class);
  parser.accepts("orphan-format","Indicates format of bad-key-file-in is of 'orphan' key-values.");
  parser.accepts("dry-run","Indicates to go through all of the read actions until the point of issuing repair puts. Then, do a 'no-op'.");
  parser.accepts("bad-key-file-out","Name of bad-key-file-out. " + "Keys that are not mae consistent are output to this file.").withRequiredArg().describedAs("badKeyFileOut").ofType(String.class);
  parser.accepts("parallelism","Number of consistency fix messages outstanding in parallel. ").withRequiredArg().describedAs("parallelism [Default value: " + Options.defaultParallelism + "]").ofType(Integer.class);
  parser.accepts("progress-bar","Number of operations between 'info' progress messages. ").withRequiredArg().describedAs("progressBar [Default value: " + Options.defaultProgressBar + "]").ofType(Long.class);
  parser.accepts("per-server-iops-limit","Number of operations that the consistency fixer will issue into any individual server in one second. ").withRequiredArg().describedAs("perServerIOPSLimit [Default value: " + Options.defaultPerServerIOPSLimit + "]").ofType(Long.class);
  OptionSet optionSet=parser.parse(args);
  if (optionSet.hasArgument("help")) {
    try {
      parser.printHelpOn(System.out);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    printUsage();
    System.exit(0);
  }
  if (!optionSet.hasArgument("url")) {
    printUsage("Missing required 'url' argument.",parser);
  }
  if (!optionSet.hasArgument("store")) {
    printUsage("Missing required 'store' argument.",parser);
  }
  if (!optionSet.has("bad-key-file-in")) {
    printUsage("Missing required 'bad-key-file-in' argument.",parser);
  }
  if (!optionSet.has("bad-key-file-out")) {
    printUsage("Missing required 'bad-key-file-out' argument.",parser);
  }
  Options options=new Options();
  options.url=(String)optionSet.valueOf("url");
  options.storeName=(String)optionSet.valueOf("store");
  options.badKeyFileIn=(String)optionSet.valueOf("bad-key-file-in");
  options.badKeyFileOut=(String)optionSet.valueOf("bad-key-file-out");
  if (optionSet.has("orphan-format")) {
    options.badKeyFileInOrphanFormat=true;
  }
  if (optionSet.has("parallelism")) {
    options.parallelism=(Integer)optionSet.valueOf("parallelism");
  }
  if (optionSet.has("progress-bar")) {
    options.progressBar=(Long)optionSet.valueOf("progress-bar");
  }
  if (optionSet.has("per-server-iops-limit")) {
    options.perServerIOPSLimit=(Long)optionSet.valueOf("per-server-iops-limit");
  }
  if (optionSet.has("dry-run")) {
    options.dryRun=true;
  }
  return options;
}
