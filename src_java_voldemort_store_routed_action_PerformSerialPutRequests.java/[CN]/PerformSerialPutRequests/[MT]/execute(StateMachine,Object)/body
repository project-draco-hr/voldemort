{
  int currentNode=0;
  List<Node> nodes=stateData.getNodes();
  if (logger.isDebugEnabled())   logger.debug("Performing serial put requests to determine master");
  for (; currentNode < nodes.size(); currentNode++) {
    Node node=nodes.get(currentNode);
    long startNs=System.nanoTime();
    try {
      Versioned<byte[]> versionedCopy=incremented(versioned,node.getId());
      if (logger.isTraceEnabled())       logger.trace("Attempt # " + (currentNode + 1) + " to perform put (node "+ node.getId()+ ")");
      stores.get(node.getId()).put(key,versionedCopy);
      stateData.incrementSuccesses();
      long requestTime=(System.nanoTime() - startNs) / Time.NS_PER_MS;
      failureDetector.recordSuccess(node,requestTime);
      if (logger.isTraceEnabled())       logger.trace("Put on node " + node.getId() + " succeeded, using as master");
      stateData.setMaster(node);
      stateData.setVersionedCopy(versionedCopy);
      break;
    }
 catch (    UnreachableStoreException e) {
      if (logger.isTraceEnabled())       logger.trace("Put on node " + node.getId() + " failed: "+ e);
      stateData.recordFailure(e);
      long requestTime=(System.nanoTime() - startNs) / Time.NS_PER_MS;
      failureDetector.recordException(node,requestTime,e);
    }
catch (    VoldemortApplicationException e) {
      throw e;
    }
catch (    Exception e) {
      if (logger.isTraceEnabled())       logger.trace("Put on node " + node.getId() + " failed: "+ e);
      stateData.recordFailure(e);
    }
  }
  if (stateData.getSuccesses() < 1) {
    List<Exception> failures=stateData.getFailures();
    stateData.setFatalError(new InsufficientOperationalNodesException("No master node succeeded!",failures.size() > 0 ? failures.get(0) : null));
    stateMachine.addEvent(Event.ERROR);
    return;
  }
  currentNode++;
  if (currentNode == nodes.size()) {
    if (stateData.getSuccesses() < required) {
      stateData.setFatalError(new InsufficientOperationalNodesException(required + " " + stateData.getOperation().getSimpleName()+ "s required, but "+ stateData.getSuccesses()+ " succeeded",stateData.getFailures()));
      stateMachine.addEvent(Event.ERROR);
    }
 else {
      stateMachine.addEvent(completeEvent);
    }
  }
 else {
    stateMachine.addEvent(masterDeterminedEvent);
  }
}
