{
  currentCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,1,2,3},{4,5,6},{7,8,9},{}});
  targetCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,2,3},{4,6},{7,8,9},{1,5}});
  List<RebalanceNodePlan> orderedRebalanceNodePlanList=createOrderedClusterTransition(currentCluster,targetCluster,storeDefList).getOrderedRebalanceNodePlanList();
  assertEquals("There should have exactly 3 rebalancing node",3,orderedRebalanceNodePlanList.size());
  assertEquals("Stealer 3 should have 3 entry",3,orderedRebalanceNodePlanList.get(0).getRebalanceTaskList().size());
  HashMap<Integer,List<Integer>> partitionsToMove1=Maps.newHashMap(), partitionsToMove2=Maps.newHashMap(), partitionsToMove3=Maps.newHashMap();
  HashMap<Integer,List<Integer>> partitionsToDelete1=Maps.newHashMap(), partitionsToDelete2=Maps.newHashMap(), partitionsToDelete3=Maps.newHashMap();
  partitionsToMove1.put(0,Lists.newArrayList(1));
  partitionsToMove2.put(0,Lists.newArrayList(5));
  partitionsToMove2.put(1,Lists.newArrayList(0));
  partitionsToMove3.put(1,Lists.newArrayList(4));
  partitionsToDelete2.put(1,Lists.newArrayList(0));
  partitionsToDelete3.put(1,Lists.newArrayList(4));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(0),Arrays.asList(new RebalancePartitionsInfo(3,0,partitionsToMove1,partitionsToDelete1,RebalanceUtils.getStoreNames(storeDefList),currentCluster,0),new RebalancePartitionsInfo(3,1,partitionsToMove2,partitionsToDelete2,RebalanceUtils.getStoreNames(storeDefList),currentCluster,0),new RebalancePartitionsInfo(3,2,partitionsToMove3,partitionsToDelete3,RebalanceUtils.getStoreNames(storeDefList),currentCluster,0)));
  assertEquals("Stealer 0 should have 1 entry",1,orderedRebalanceNodePlanList.get(1).getRebalanceTaskList().size());
  partitionsToMove1.clear();
  partitionsToMove1.put(1,Lists.newArrayList(1));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(1),Arrays.asList(new RebalancePartitionsInfo(0,1,partitionsToMove1,partitionsToMove1,RebalanceUtils.getStoreNames(storeDefList),currentCluster,0)));
  assertEquals("Stealer 1 should have 1 entry",1,orderedRebalanceNodePlanList.get(2).getRebalanceTaskList().size());
  partitionsToMove1.clear();
  partitionsToMove1.put(1,Lists.newArrayList(5));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(2),Arrays.asList(new RebalancePartitionsInfo(1,2,partitionsToMove1,partitionsToMove1,RebalanceUtils.getStoreNames(storeDefList),currentCluster,0)));
}
