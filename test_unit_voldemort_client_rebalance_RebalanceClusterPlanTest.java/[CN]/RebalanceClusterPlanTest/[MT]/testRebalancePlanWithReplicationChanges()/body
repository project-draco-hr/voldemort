{
  currentCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,1,2,3},{4,5,6},{7,8,9},{}});
  targetCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,2,3},{4,6},{7,8,9},{1,5}});
  List<RebalanceNodePlan> orderedRebalanceNodePlanList=createOrderedClusterTransition(currentCluster,targetCluster,storeDefList).getOrderedRebalanceNodePlanList();
  assertEquals("There should have exactly 3 rebalancing node",3,orderedRebalanceNodePlanList.size());
  assertEquals("Stealer 3 should have 3 entry",3,orderedRebalanceNodePlanList.get(0).getRebalanceTaskList().size());
  assertEquals("Stealer 0 should have 1 entry",1,orderedRebalanceNodePlanList.get(1).getRebalanceTaskList().size());
  assertEquals("Stealer 1 should have 1 entry",1,orderedRebalanceNodePlanList.get(2).getRebalanceTaskList().size());
  HashMap<String,HashMap<Integer,List<Integer>>> storeToPartitionsToMove[]=new HashMap[5];
  HashMap<String,HashMap<Integer,List<Integer>>> storeToPartitionsToDelete[]=new HashMap[5];
  for (int numPlan=0; numPlan < 5; numPlan++) {
    storeToPartitionsToMove[numPlan]=new HashMap<String,HashMap<Integer,List<Integer>>>();
    storeToPartitionsToDelete[numPlan]=new HashMap<String,HashMap<Integer,List<Integer>>>();
  }
  for (  StoreDefinition storeDef : storeDefList) {
    if (storeDef.getReplicationFactor() == 2) {
      HashMap<Integer,List<Integer>> partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(1));
      storeToPartitionsToMove[0].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(5));
      partitions.put(1,Lists.newArrayList(0));
      storeToPartitionsToMove[1].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(4));
      storeToPartitionsToMove[2].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(1));
      storeToPartitionsToMove[3].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(5));
      storeToPartitionsToMove[4].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(0));
      storeToPartitionsToDelete[1].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(4));
      storeToPartitionsToDelete[2].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(1));
      storeToPartitionsToDelete[3].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(1,Lists.newArrayList(5));
      storeToPartitionsToDelete[4].put(storeDef.getName(),partitions);
    }
 else     if (storeDef.getReplicationFactor() == 1) {
      HashMap<Integer,List<Integer>> partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(1));
      storeToPartitionsToMove[0].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(5));
      storeToPartitionsToMove[1].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(1));
      storeToPartitionsToDelete[0].put(storeDef.getName(),partitions);
      partitions=Maps.newHashMap();
      partitions.put(0,Lists.newArrayList(5));
      storeToPartitionsToDelete[1].put(storeDef.getName(),partitions);
    }
 else {
      throw new VoldemortException("Change in store definitions file found");
    }
  }
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(0),Arrays.asList(new RebalancePartitionsInfo(3,0,storeToPartitionsToMove[0],storeToPartitionsToDelete[0],currentCluster,0),new RebalancePartitionsInfo(3,1,storeToPartitionsToMove[1],storeToPartitionsToDelete[1],currentCluster,0),new RebalancePartitionsInfo(3,2,storeToPartitionsToMove[2],storeToPartitionsToDelete[2],currentCluster,0)));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(1),Arrays.asList(new RebalancePartitionsInfo(0,1,storeToPartitionsToMove[3],storeToPartitionsToDelete[3],currentCluster,0)));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(2),Arrays.asList(new RebalancePartitionsInfo(1,2,storeToPartitionsToMove[4],storeToPartitionsToDelete[4],currentCluster,0)));
}
