{
  currentCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,4},{1,5},{2,6},{3,7}});
  targetCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,4},{2,1,5},{6},{3,7}});
  List<RebalancePartitionsInfo> orderedRebalancePartitionInfoList=createOrderedClusterTransition(currentCluster,targetCluster,storeDefList2).getOrderedRebalancePartitionsInfoList();
  assertEquals("There should have exactly 3 rebalancing node",3,getUniqueNodeCount(orderedRebalancePartitionInfoList,false));
  assertEquals("There should have exactly 3 rebalancing partition info",3,orderedRebalancePartitionInfoList.size());
  assertEquals("Stealer 1 should have 1 entry",1,getStealerNodePartitionInfoCount(1,orderedRebalancePartitionInfoList));
  checkOrderedPartitionInfo(orderedRebalancePartitionInfoList);
  HashMap<Integer,List<Integer>> partitionsToMove=Maps.newHashMap();
  partitionsToMove.clear();
  partitionsToMove.put(0,Lists.newArrayList(2));
  HashMap<String,HashMap<Integer,List<Integer>>> storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(1,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(1,2,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 0 should have 1 entry",1,getStealerNodePartitionInfoCount(0,orderedRebalancePartitionInfoList));
  partitionsToMove.clear();
  partitionsToMove.put(2,Lists.newArrayList(1));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(0,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(0,3,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 3 should have 1 entry",1,getStealerNodePartitionInfoCount(3,orderedRebalancePartitionInfoList));
  partitionsToMove.clear();
  partitionsToMove.put(1,Lists.newArrayList(1));
  partitionsToMove.put(2,Lists.newArrayList(0));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(3,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(3,2,storeToPartitionsToMove,currentCluster)));
  currentCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,4},{2,1,5},{6},{3,7}});
  targetCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,4},{2,1,5},{},{6,3,7}});
  orderedRebalancePartitionInfoList=createOrderedClusterTransition(currentCluster,targetCluster,storeDefList2).getOrderedRebalancePartitionsInfoList();
  assertEquals("There should have exactly 3 rebalancing node",3,getUniqueNodeCount(orderedRebalancePartitionInfoList,false));
  assertEquals("There should have exactly 3 rebalancing partition info",3,orderedRebalancePartitionInfoList.size());
  assertEquals("Stealer 3 should have 1 entry",1,getStealerNodePartitionInfoCount(3,orderedRebalancePartitionInfoList));
  checkOrderedPartitionInfo(orderedRebalancePartitionInfoList);
  partitionsToMove.clear();
  partitionsToMove.put(0,Lists.newArrayList(6));
  partitionsToMove.put(1,Lists.newArrayList(5));
  partitionsToMove.put(2,Lists.newArrayList(4));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(3,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(3,2,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 0 should have 1 entry",1,getStealerNodePartitionInfoCount(0,orderedRebalancePartitionInfoList));
  partitionsToMove.clear();
  partitionsToMove.put(1,Lists.newArrayList(6));
  partitionsToMove.put(2,Lists.newArrayList(5));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(0,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(0,3,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 1 should have 1 entry",1,getStealerNodePartitionInfoCount(1,orderedRebalancePartitionInfoList));
  partitionsToMove.clear();
  partitionsToMove.put(2,Lists.newArrayList(6));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(1,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(1,0,storeToPartitionsToMove,currentCluster)));
}
