{
  currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0,1,2,3},{4,5,6,7},{}});
  targetCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{1,2,3},{4,5,6,7},{0}});
  List<RebalancePartitionsInfo> orderedRebalancePartitionInfoList=getExecutableTasks(currentCluster,targetCluster,Lists.newArrayList(ServerTestUtils.getStoreDef("test",2,1,1,1,1,RoutingStrategyType.CONSISTENT_STRATEGY)));
  assertEquals("There should have exactly 2 rebalancing node",2,getUniqueNodeCount(orderedRebalancePartitionInfoList,false));
  assertEquals("There should be exactly 2 rebalancing partition info",2,orderedRebalancePartitionInfoList.size());
  assertEquals("Stealer 2 should have 1 entry",1,getStealerNodePartitionInfoCount(2,orderedRebalancePartitionInfoList));
  checkOrderedPartitionInfo(orderedRebalancePartitionInfoList);
  HashMap<Integer,List<Integer>> partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(0,Lists.newArrayList(0));
  partitionsToMove.put(1,Lists.newArrayList(5,4,7,6));
  HashMap<String,HashMap<Integer,List<Integer>>> storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(2,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(2,0,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 0 should have 1 entry",1,getStealerNodePartitionInfoCount(0,orderedRebalancePartitionInfoList));
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(1,Lists.newArrayList(0));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(0,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(0,1,storeToPartitionsToMove,currentCluster)));
  currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3},{4,5,6,7}});
  targetCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{1,2,3},{4,5,6,7,0}});
  orderedRebalancePartitionInfoList=getExecutableTasks(currentCluster,targetCluster,Lists.newArrayList(ServerTestUtils.getStoreDef("test",2,1,1,1,1,RoutingStrategyType.CONSISTENT_STRATEGY)));
  assertEquals("There should have exactly 2 rebalancing node",2,getUniqueNodeCount(orderedRebalancePartitionInfoList,false));
  assertEquals("There should be exactly 2 rebalance partition info",2,orderedRebalancePartitionInfoList.size());
  assertEquals("Stealer 1 should have 1 entry",1,getStealerNodePartitionInfoCount(1,orderedRebalancePartitionInfoList));
  checkOrderedPartitionInfo(orderedRebalancePartitionInfoList);
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(0,Lists.newArrayList(0));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(1,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(1,0,storeToPartitionsToMove,currentCluster)));
  assertEquals("Stealer 0 should have 1 entry",1,getStealerNodePartitionInfoCount(0,orderedRebalancePartitionInfoList));
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(1,Lists.newArrayList(0));
  storeToPartitionsToMove=Maps.newHashMap();
  storeToPartitionsToMove.put("test",partitionsToMove);
  checkAllRebalanceInfoPresent(getStealerNodePartitionInfoList(0,orderedRebalancePartitionInfoList),Arrays.asList(new RebalancePartitionsInfo(0,1,storeToPartitionsToMove,currentCluster)));
}
