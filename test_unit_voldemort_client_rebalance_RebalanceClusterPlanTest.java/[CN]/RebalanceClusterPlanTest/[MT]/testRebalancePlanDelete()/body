{
  currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0,1,2,3},{4,5,6,7},{}});
  targetCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{1,2,3},{4,5,6,7},{0}});
  List<RebalanceNodePlan> orderedRebalanceNodePlanList=createOrderedClusterTransition(currentCluster,targetCluster,Lists.newArrayList(ServerTestUtils.getStoreDef("test",2,1,1,1,1,RoutingStrategyType.CONSISTENT_STRATEGY))).getOrderedRebalanceNodePlanList();
  assertEquals("There should be exactly 2 rebalancing node",2,orderedRebalanceNodePlanList.size());
  assertEquals("Stealer 2 should have 1 entry",1,orderedRebalanceNodePlanList.get(0).getRebalanceTaskList().size());
  HashMap<Integer,List<Integer>> partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(0,Lists.newArrayList(0));
  partitionsToMove.put(1,Lists.newArrayList(5,4,7,6));
  HashMap<Integer,List<Integer>> partitionsToDelete=Maps.newHashMap();
  partitionsToDelete.put(1,Lists.newArrayList(5,4,7,6));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(0),Arrays.asList(new RebalancePartitionsInfo(2,0,partitionsToMove,partitionsToDelete,Lists.newArrayList("test"),currentCluster,0)));
  assertEquals("Stealer 0 should have 1 entry",1,orderedRebalanceNodePlanList.get(1).getRebalanceTaskList().size());
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(1,Lists.newArrayList(0));
  partitionsToDelete=Maps.newHashMap();
  partitionsToDelete.put(1,Lists.newArrayList(0));
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(1),Arrays.asList(new RebalancePartitionsInfo(0,1,partitionsToMove,partitionsToDelete,Lists.newArrayList("test"),currentCluster,0)));
  currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3},{4,5,6,7}});
  targetCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{1,2,3},{4,5,6,7,0}});
  orderedRebalanceNodePlanList=createOrderedClusterTransition(currentCluster,targetCluster,Lists.newArrayList(ServerTestUtils.getStoreDef("test",2,1,1,1,1,RoutingStrategyType.CONSISTENT_STRATEGY))).getOrderedRebalanceNodePlanList();
  assertEquals("There should be exactly 2 rebalancing node",2,orderedRebalanceNodePlanList.size());
  assertEquals("Stealer 1 should have 1 entry",1,orderedRebalanceNodePlanList.get(0).getRebalanceTaskList().size());
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(0,Lists.newArrayList(0));
  partitionsToDelete=Maps.newHashMap();
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(0),Arrays.asList(new RebalancePartitionsInfo(1,0,partitionsToMove,partitionsToDelete,Lists.newArrayList("test"),currentCluster,0)));
  assertEquals("Stealer 1 should have 1 entry",1,orderedRebalanceNodePlanList.get(1).getRebalanceTaskList().size());
  partitionsToMove=Maps.newHashMap();
  partitionsToMove.put(1,Lists.newArrayList(0));
  partitionsToDelete=Maps.newHashMap();
  checkAllRebalanceInfoPresent(orderedRebalanceNodePlanList.get(1),Arrays.asList(new RebalancePartitionsInfo(0,1,partitionsToMove,partitionsToDelete,Lists.newArrayList("test"),currentCluster,0)));
}
