{
  List<Node> nodes=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    nodes.add(new Node(i,"node" + i,100,200,300,Lists.newArrayList(i,i + NUM_NODES)));
  }
  consistentRoutingCluster=new Cluster("consistent1",nodes);
  List<Node> nodes2=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    List<Integer> partitions=Lists.newArrayList();
    if (i == 0)     partitions.add(i + NUM_NODES);
 else {
      partitions.add(i);
      partitions.add(i + NUM_NODES);
    }
    if (i == NUM_NODES - 1)     partitions.add(0);
    nodes2.add(new Node(i,"node" + i,100,200,300,partitions));
  }
  consistentRoutingClusterModified=new Cluster("consistent2",nodes2);
  List<Zone> zones=ServerTestUtils.getZones(NUM_ZONES);
  List<Node> nodes3=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    if (i < NUM_NODES / 2)     nodes3.add(new Node(i,"node" + i,100,200,300,0,Lists.newArrayList(i,i + NUM_NODES)));
 else     nodes3.add(new Node(i,"node" + i,100,200,300,1,Lists.newArrayList(i,i + NUM_NODES)));
  }
  zoneRoutingCluster=new Cluster("zone1",nodes3,zones);
  List<Node> nodes4=Lists.newArrayList();
  for (int i=0; i < NUM_NODES; i++) {
    List<Integer> partitions=Lists.newArrayList();
    if (i == 0)     partitions.add(i + NUM_NODES);
 else {
      partitions.add(i);
      partitions.add(i + NUM_NODES);
    }
    if (i == NUM_NODES - 1)     partitions.add(0);
    if (i < NUM_NODES / 2)     nodes4.add(new Node(i,"node" + i,100,200,300,0,partitions));
 else     nodes4.add(new Node(i,"node" + i,100,200,300,1,partitions));
  }
  zoneRoutingClusterModified=new Cluster("zone1",nodes4,zones);
  zoneReplicationFactors=Maps.newHashMap();
}
