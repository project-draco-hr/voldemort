{
  OptionParser parser=new OptionParser();
  parser.accepts("num-keys","The number of keys to submit for retrieval  Default = " + DEFAULT_NUM_KEYS).withRequiredArg().ofType(Integer.class);
  parser.accepts("max-connections","The maximum number of connections (sockets) per node; same value as client configuration parameter \"" + ClientConfig.MAX_CONNECTIONS_PER_NODE_PROPERTY + "\"  Default = "+ DEFAULT_MAX_CONNECTIONS).withRequiredArg().ofType(Integer.class);
  parser.accepts("max-threads","The maximum number of threads used by the threaded RoutedStore implementation; same value as client configuration parameter \"" + ClientConfig.MAX_THREADS_PROPERTY + "\"  Default = "+ DEFAULT_MAX_THREADS).withRequiredArg().ofType(Integer.class);
  parser.accepts("num-nodes","The number of nodes  Default = " + DEFAULT_NUM_NODES).withRequiredArg().ofType(Integer.class);
  parser.accepts("num-slow-nodes","The number of nodes that exhibit delay Default = " + DEFAULT_NUM_SLOW_NODES).withRequiredArg().ofType(Integer.class);
  parser.accepts("delay","The millisecond delay shown by slow nodes Default = " + DEFAULT_DELAY).withRequiredArg().ofType(Integer.class);
  parser.accepts("num-clients","The number of threads to make requests concurrently  Default = " + DEFAULT_NUM_CLIENTS).withRequiredArg().ofType(Integer.class);
  parser.accepts("routed-store-type","Type of routed store, either \"" + THREAD_POOL_ROUTED_STORE + "\" or \""+ PIPELINE_ROUTED_STORE+ "\"  Default = "+ DEFAULT_ROUTED_STORE_TYPE).withRequiredArg();
  parser.accepts("help","This help");
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    printUsage(System.out,parser);
  }
  final int numKeys=CmdUtils.valueOf(options,"num-keys",DEFAULT_NUM_KEYS);
  int maxConnectionsPerNode=CmdUtils.valueOf(options,"max-connections",DEFAULT_MAX_CONNECTIONS);
  int maxThreads=CmdUtils.valueOf(options,"max-threads",DEFAULT_MAX_THREADS);
  int numNodes=CmdUtils.valueOf(options,"num-nodes",DEFAULT_NUM_NODES);
  int numSlowNodes=CmdUtils.valueOf(options,"num-slow-nodes",DEFAULT_NUM_SLOW_NODES);
  int delay=CmdUtils.valueOf(options,"delay",DEFAULT_DELAY);
  int numClients=CmdUtils.valueOf(options,"num-clients",DEFAULT_NUM_CLIENTS);
  String routedStoreType=CmdUtils.valueOf(options,"routed-store-type",DEFAULT_ROUTED_STORE_TYPE);
  System.err.println("num-keys : " + numKeys);
  System.err.println("max-connections : " + maxConnectionsPerNode);
  System.err.println("max-threads : " + maxThreads);
  System.err.println("num-nodes : " + numNodes);
  System.err.println("num-slow-nodes : " + numSlowNodes);
  System.err.println("delay : " + delay);
  System.err.println("num-clients : " + numClients);
  System.err.println("routed-store-type : " + routedStoreType);
  ClientConfig clientConfig=new ClientConfig().setMaxConnectionsPerNode(maxConnectionsPerNode).setMaxThreads(maxThreads);
  Map<Integer,VoldemortServer> serverMap=new HashMap<Integer,VoldemortServer>();
  int[][] partitionMap=new int[numNodes][1];
  for (int i=0; i < numNodes; i++) {
    partitionMap[i][0]=i;
  }
  Cluster cluster=ServerTestUtils.getLocalCluster(numNodes,partitionMap);
  String storeDefinitionFile="test/common/voldemort/config/single-store.xml";
  StoreDefinition storeDefinition=new StoreDefinitionsMapper().readStoreList(new File(storeDefinitionFile)).get(0);
  SocketStoreFactory socketStoreFactory=new ClientRequestExecutorPool(clientConfig.getSelectors(),clientConfig.getMaxConnectionsPerNode(),clientConfig.getConnectionTimeout(TimeUnit.MILLISECONDS),clientConfig.getSocketTimeout(TimeUnit.MILLISECONDS),clientConfig.getSocketBufferSize(),clientConfig.getSocketKeepAlive());
  for (int i=0; i < cluster.getNumberOfNodes(); i++) {
    VoldemortConfig config=ServerTestUtils.createServerConfig(true,i,TestUtils.createTempDir().getAbsolutePath(),null,storeDefinitionFile,new Properties());
    VoldemortServer server=ServerTestUtils.startVoldemortServer(socketStoreFactory,config,cluster);
    serverMap.put(i,server);
    Store<ByteArray,byte[],byte[]> store=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test-sleepy");
    if (i < numSlowNodes)     store=new SleepyStore<ByteArray,byte[],byte[]>(delay,store);
    StoreRepository storeRepository=server.getStoreRepository();
    storeRepository.addLocalStore(store);
  }
  Map<Integer,Store<ByteArray,byte[],byte[]>> stores=new HashMap<Integer,Store<ByteArray,byte[],byte[]>>();
  for (  Node node : cluster.getNodes()) {
    Store<ByteArray,byte[],byte[]> socketStore=ServerTestUtils.getSocketStore(socketStoreFactory,"test-sleepy",node.getSocketPort(),clientConfig.getRequestFormatType());
    stores.put(node.getId(),socketStore);
  }
  FailureDetectorConfig failureDetectorConfig=new FailureDetectorConfig().setImplementationClassName(BannagePeriodFailureDetector.class.getName()).setCluster(cluster).setStoreVerifier(MutableStoreVerifier.create(stores));
  FailureDetector failureDetector=FailureDetectorUtils.create(failureDetectorConfig,false);
  ExecutorService routedStoreThreadPool=Executors.newFixedThreadPool(clientConfig.getMaxThreads());
  RoutedStoreFactory routedStoreFactory=new RoutedStoreFactory(routedStoreType.trim().equalsIgnoreCase(PIPELINE_ROUTED_STORE),routedStoreThreadPool,clientConfig.getTimeoutConfig());
  final RoutedStore routedStore=routedStoreFactory.create(cluster,storeDefinition,stores,true,failureDetector);
  ExecutorService runner=Executors.newFixedThreadPool(numClients);
  long start=System.nanoTime();
  try {
    for (int i=0; i < numClients; i++) {
      runner.submit(new Runnable(){
        public void run(){
          for (int i=0; i < numKeys; i++) {
            ByteArray key=new ByteArray(("test-key-" + i).getBytes());
            try {
              routedStore.get(key,null);
            }
 catch (            VoldemortException e) {
            }
          }
        }
      }
);
    }
    runner.shutdown();
    runner.awaitTermination(Long.MAX_VALUE,TimeUnit.MILLISECONDS);
    long time=(System.nanoTime() - start) / Time.NS_PER_MS;
    System.err.println("Time: " + time + " ms.");
  }
  finally {
    runner.shutdown();
  }
  if (failureDetector != null)   failureDetector.destroy();
  for (  VoldemortServer server : serverMap.values())   server.stop();
  if (routedStoreThreadPool != null)   routedStoreThreadPool.shutdown();
  System.exit(0);
}
