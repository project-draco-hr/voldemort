{
  List<Node> nodes=pipelineData.getNodes();
  final Map<Integer,Response<ByteArray,Object>> responses=new ConcurrentHashMap<Integer,Response<ByteArray,Object>>();
  int attempts=nodes.size();
  int blocks=Math.min(preferred,attempts);
  final CountDownLatch attemptsLatch=new CountDownLatch(attempts);
  final CountDownLatch blocksLatch=new CountDownLatch(blocks);
  if (logger.isTraceEnabled())   logger.trace("Attempting " + attempts + " "+ pipeline.getOperation().getSimpleName()+ " operations in parallel");
  long beginTime=System.nanoTime();
  for (int i=0; i < attempts; i++) {
    final Node node=nodes.get(i);
    pipelineData.incrementNodeIndex();
    NonblockingStoreCallback callback=new NonblockingStoreCallback(){
      public void requestComplete(      Object result,      long requestTime){
        if (logger.isTraceEnabled())         logger.trace(pipeline.getOperation().getSimpleName() + " response received (" + requestTime+ " ms.) from node "+ node.getId());
        Response<ByteArray,Object> response=new Response<ByteArray,Object>(node,key,result,requestTime);
        if (logger.isTraceEnabled()) {
          logger.trace(attemptsLatch.getCount() + " attempts remaining. Will block " + " for "+ blocksLatch.getCount()+ " more ");
        }
        responses.put(node.getId(),response);
        if (response.getValue() instanceof Exception && isOperationCompleted.get()) {
          handleException(response,pipeline);
        }
        attemptsLatch.countDown();
        blocksLatch.countDown();
      }
    }
;
    if (logger.isTraceEnabled())     logger.info("Submitting " + pipeline.getOperation().getSimpleName() + " request on node "+ node.getId());
    NonblockingStore store=nonblockingStores.get(node.getId());
    store.submitDeleteRequest(key,version,callback,timeoutMs);
  }
  try {
    long ellapsedNs=System.nanoTime() - beginTime;
    long remainingNs=(timeoutMs * Time.NS_PER_MS) - ellapsedNs;
    if (remainingNs > 0) {
      blocksLatch.await(remainingNs,TimeUnit.NANOSECONDS);
    }
  }
 catch (  InterruptedException e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e,e);
  }
  if (processResponses(responses,pipeline))   return;
  boolean quorumSatisfied=true;
  if (pipelineData.getSuccesses() < required) {
    long ellapsedNs=System.nanoTime() - beginTime;
    long remainingNs=(timeoutMs * Time.NS_PER_MS) - ellapsedNs;
    if (remainingNs > 0) {
      try {
        attemptsLatch.await(remainingNs,TimeUnit.NANOSECONDS);
      }
 catch (      InterruptedException e) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn(e,e);
      }
      if (processResponses(responses,pipeline))       return;
    }
    if (pipelineData.getSuccesses() < required) {
      pipelineData.setFatalError(new InsufficientOperationalNodesException(required + " " + pipeline.getOperation().getSimpleName()+ "s required, but only "+ pipelineData.getSuccesses()+ " succeeded",new ArrayList<Node>(pipelineData.getReplicationSet()),new ArrayList<Node>(pipelineData.getNodes()),new ArrayList<Node>(pipelineData.getFailedNodes()),pipelineData.getFailures()));
      abortPipeline(pipeline);
      quorumSatisfied=false;
    }
  }
  if (quorumSatisfied) {
    if (pipelineData.getZonesRequired() != null) {
      int zonesSatisfied=pipelineData.getZoneResponses().size();
      if (zonesSatisfied >= (pipelineData.getZonesRequired() + 1)) {
        completePipeline(pipeline);
      }
 else {
        long timeMs=(System.nanoTime() - beginTime) / Time.NS_PER_MS;
        if ((timeoutMs - timeMs) > 0) {
          try {
            attemptsLatch.await(timeoutMs - timeMs,TimeUnit.MILLISECONDS);
          }
 catch (          InterruptedException e) {
            if (logger.isEnabledFor(Level.WARN))             logger.warn(e,e);
          }
          if (processResponses(responses,pipeline))           return;
        }
        if (pipelineData.getZoneResponses().size() >= (pipelineData.getZonesRequired() + 1)) {
          completePipeline(pipeline);
        }
 else {
          pipelineData.setFatalError(new InsufficientZoneResponsesException((pipelineData.getZonesRequired() + 1) + " " + pipeline.getOperation().getSimpleName()+ "s required zone, but only "+ zonesSatisfied+ " succeeded"));
          abortPipeline(pipeline);
        }
      }
    }
 else {
      completePipeline(pipeline);
    }
  }
}
