{
  RestRequestValidator requestValidator;
  if (!readingChunks) {
    logger.debug("Received request in Request handler");
    HttpRequest request=this.request=(HttpRequest)messageEvent.getMessage();
    String requestURI=this.request.getUri();
    if (logger.isDebugEnabled()) {
      logger.debug("Request URI: " + requestURI);
    }
    long currentTimeInMs=System.currentTimeMillis();
    long originTimeInMs=Long.parseLong(request.getHeader(RestMessageHeaders.X_VOLD_REQUEST_ORIGIN_TIME_MS));
    long diff=currentTimeInMs - originTimeInMs;
    maxLatency=diff;
    System.err.println("Max Time difference in ms = " + maxLatency + " for handler :"+ ctx.getPipeline().getChannel().getId());
    if (request.isChunked()) {
      readingChunks=true;
    }
 else {
      HttpMethod httpMethod=request.getMethod();
      if (httpMethod.equals(HttpMethod.GET)) {
        logger.debug("Received GET request in request handler");
        requestValidator=new RestGetRequestValidator(request,messageEvent);
      }
 else       if (httpMethod.equals(HttpMethod.POST)) {
        requestValidator=new RestPutRequestValidator(request,messageEvent,this.isVectorClockOptional);
      }
 else       if (httpMethod.equals(HttpMethod.DELETE)) {
        requestValidator=new RestDeleteRequestValidator(request,messageEvent,this.isVectorClockOptional);
      }
 else {
        String errorMessage="Illegal Http request.";
        logger.error(errorMessage);
        RestErrorHandler.writeErrorResponse(messageEvent,BAD_REQUEST,errorMessage);
        return;
      }
      registerRequest(requestValidator,ctx,messageEvent);
    }
  }
 else {
    HttpChunk chunk=(HttpChunk)messageEvent.getMessage();
    if (chunk.isLast()) {
      readingChunks=false;
    }
  }
}
