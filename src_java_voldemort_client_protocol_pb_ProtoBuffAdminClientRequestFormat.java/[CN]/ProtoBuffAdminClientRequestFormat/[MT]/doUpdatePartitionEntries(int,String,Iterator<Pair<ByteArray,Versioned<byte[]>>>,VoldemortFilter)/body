{
  Node node=this.getMetadata().getCluster().getNodeById(nodeId);
  SocketDestination destination=new SocketDestination(node.getHost(),node.getSocketPort(),RequestFormatType.ADMIN_PROTOCOL_BUFFERS);
  SocketAndStreams sands=pool.checkout(destination);
  DataOutputStream outputStream=sands.getOutputStream();
  DataInputStream inputStream=sands.getInputStream();
  Queue<Pair<ByteArray,Versioned<byte[]>>> window=new LinkedList<Pair<ByteArray,Versioned<byte[]>>>();
  boolean firstMessage=true;
  try {
    while (entryIterator.hasNext()) {
      Pair<ByteArray,Versioned<byte[]>> pair=entryIterator.next();
      window.add(pair);
      if (window.size() >= windowSize) {
        writeWindowToStream(storeName,window,outputStream,firstMessage,!entryIterator.hasNext());
        if (firstMessage)         firstMessage=false;
      }
    }
    if (!window.isEmpty()) {
      writeWindowToStream(storeName,window,outputStream,firstMessage,true);
      if (firstMessage) {
        firstMessage=false;
      }
    }
    if (!firstMessage) {
      VAdminProto.UpdatePartitionEntriesResponse.Builder updateResponse=ProtoUtils.readToBuilder(inputStream,VAdminProto.UpdatePartitionEntriesResponse.newBuilder());
      if (updateResponse.hasError()) {
        throwException(updateResponse.getError());
      }
    }
  }
 catch (  IOException e) {
    close(sands.getSocket());
    throw new VoldemortException(e);
  }
 finally {
    pool.checkin(destination,sands);
  }
}
