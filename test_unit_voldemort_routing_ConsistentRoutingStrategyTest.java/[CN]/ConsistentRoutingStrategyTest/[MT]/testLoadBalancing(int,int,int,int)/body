{
  List<Integer> tags=new ArrayList<Integer>();
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < numNodes * tagsPerNode; i++)   tags.add(i);
  for (int i=0; i < numNodes; i++)   nodes.add(new Node(i,"host",8080,6666,7777,tags.subList(tagsPerNode * i,tagsPerNode * (i + 1))));
  Random random=new Random(2158745224L);
  Collections.shuffle(nodes,random);
  ConsistentRoutingStrategy router=new ConsistentRoutingStrategy(new FnvHashFunction(),nodes,replicationFactor);
  for (  Node n : nodes)   assertEquals(tagsPerNode,router.getPartitionsByNode(n).size());
  Multiset<Integer> masters=HashMultiset.create();
  Multiset<Integer> counts=HashMultiset.create();
  byte[] key=new byte[16];
  for (int i=0; i < numRequests; i++) {
    random.nextBytes(key);
    List<Node> routed=router.routeRequest(key);
    assertEquals(replicationFactor,routed.size());
    masters.add(routed.get(0).getId());
    for (    Node n : routed)     counts.add(n.getId());
  }
  System.out.println("numNodes = " + numNodes + ", tagsPerNode = "+ tagsPerNode+ ", numRequests = "+ numRequests);
  System.out.println("master node distribution:");
  assertWellBalanced(numNodes,masters);
  System.out.println();
  System.out.println("storage node distribution:");
  assertWellBalanced(numNodes,counts);
  System.out.println();
}
