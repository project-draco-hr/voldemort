{
  super(name);
  this.props=props;
  this.storeName=props.getString(PUSH_STORE_NAME).trim();
  this.clusterUrl=new ArrayList<String>();
  this.dataDirs=new ArrayList<String>();
  String clusterUrlText=props.getString(PUSH_CLUSTER);
  for (  String url : Utils.COMMA_SEP.split(clusterUrlText.trim()))   if (url.trim().length() > 0)   this.clusterUrl.add(url);
  if (clusterUrl.size() <= 0)   throw new RuntimeException("Number of urls should be atleast 1");
  String dataDirText=props.getString(BUILD_OUTPUT_DIR);
  for (  String dataDir : Utils.COMMA_SEP.split(dataDirText.trim()))   if (dataDir.trim().length() > 0)   this.dataDirs.add(dataDir);
  if (dataDirs.size() <= 0)   throw new RuntimeException("Number of data dirs should be atleast 1");
  this.nodeId=props.getInt(PUSH_NODE,0);
  this.log=Logger.getLogger(name);
  this.informedResults=Lists.newArrayList();
  this.informedExecutor=Executors.newFixedThreadPool(2);
  this.hdfsFetcherProtocol=props.getString(VOLDEMORT_FETCHER_PROTOCOL,"hftp");
  this.hdfsFetcherPort=props.getString(VOLDEMORT_FETCHER_PORT,"50070");
  log.info(VOLDEMORT_FETCHER_PROTOCOL + " is set to : " + hdfsFetcherProtocol);
  log.info(VOLDEMORT_FETCHER_PORT + " is set to : " + hdfsFetcherPort);
  isAvroJob=props.getBoolean(BUILD_TYPE_AVRO,false);
  isAvroVersioned=props.getBoolean(AVRO_SERIALIZER_VERSIONED,false);
  keyField=props.getString(AVRO_KEY_FIELD,null);
  valueField=props.getString(AVRO_VALUE_FIELD,null);
  if (isAvroJob) {
    if (keyField == null)     throw new RuntimeException("The key field must be specified in the properties for the Avro build and push job!");
    if (valueField == null)     throw new RuntimeException("The value field must be specified in the properties for the Avro build and push job!");
  }
  heartBeatHookIntervalTime=props.getInt("heartbeat.hook.interval.ms",60000);
  heartBeatHookRunnable=new HeartBeatHookRunnable(heartBeatHookIntervalTime);
  String hookNamesText=props.getString("hooks");
  if (hookNamesText != null && !hookNamesText.isEmpty()) {
    Properties javaProps=props.toProperties();
    for (    String hookName : Utils.COMMA_SEP.split(hookNamesText.trim())) {
      try {
        BuildAndPushHook hook=(BuildAndPushHook)ReflectUtils.callConstructor(Class.forName(hookName));
        try {
          hook.init(javaProps);
          log.info("Initialized BuildAndPushHook [" + hook.getName() + "]");
          hooks.add(hook);
        }
 catch (        Exception e) {
          log.warn("Failed to initialize BuildAndPushHook [" + hook.getName() + "]. It will not be invoked.",e);
        }
      }
 catch (      ClassNotFoundException e) {
        log.error("The requested BuildAndPushHook [" + hookName + "] was not found! Check your classpath and config!",e);
      }
    }
  }
}
