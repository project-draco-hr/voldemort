{
  int httpTimeoutMs=1000 * props.getInt(PUSH_HTTP_TIMEOUT_SECONDS,24 * 60 * 60);
  long pushVersion=props.getLong(PUSH_VERSION,-1L);
  if (props.containsKey(PUSH_VERSION_TIMESTAMP)) {
    DateFormat format=new SimpleDateFormat("yyyyMMddHHmmss");
    pushVersion=Long.parseLong(format.format(new Date()));
  }
  int maxBackoffDelayMs=1000 * props.getInt(PUSH_BACKOFF_DELAY_SECONDS,60);
  List<FailedFetchStrategy> failedFetchStrategyList=Lists.newArrayList();
  int maxNodeFailures=0;
  if (pushHighAvailability) {
    VAdminProto.GetHighAvailabilitySettingsResponse serverSettings=haSettingsPerCluster.get(url);
    if (serverSettings == null || !serverSettings.getEnabled()) {
      log.warn("pushHighAvailability is DISABLED on cluster: " + url);
    }
 else {
      maxNodeFailures=serverSettings.getMaxNodeFailure();
      OutputStream outputStream=new ByteArrayOutputStream();
      props.storeFlattened(outputStream);
      outputStream.flush();
      String jobInfoString=outputStream.toString();
      failedFetchStrategyList.add(new DisableStoreOnFailedNodeFailedFetchStrategy(adminClientPerCluster.get(url),jobInfoString));
      log.info("pushHighAvailability is enabled for cluster URL: " + url + " with cluster ID: "+ serverSettings.getClusterId());
    }
  }
  boolean rollback=props.getBoolean(PUSH_ROLLBACK,true);
  if (rollback) {
    failedFetchStrategyList.add(new DeleteAllFailedFetchStrategy(adminClientPerCluster.get(url)));
  }
  Cluster cluster=adminClientPerCluster.get(url).getAdminClientCluster();
  log.info("Push starting for cluster: " + url);
  new VoldemortSwapJob(this.getId() + "-push-store",cluster,dataDir,storeName,httpTimeoutMs,pushVersion,maxBackoffDelayMs,rollback,hdfsFetcherProtocol,hdfsFetcherPort,maxNodeFailures,failedFetchStrategyList,url,buildPrimaryReplicasOnly).run();
}
