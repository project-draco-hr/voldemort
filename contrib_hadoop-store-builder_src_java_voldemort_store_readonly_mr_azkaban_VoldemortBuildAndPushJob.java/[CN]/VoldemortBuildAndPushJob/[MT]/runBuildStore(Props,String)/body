{
  int replicationFactor=props.getInt(BUILD_REPLICATION_FACTOR,2);
  int chunkSize=props.getInt(BUILD_CHUNK_SIZE,1024 * 1024 * 1024);
  Path tempDir=new Path(props.getString(BUILD_TEMP_DIR,"/tmp/vold-build-and-push-" + new Random().nextLong()));
  URI uri=new URI(url);
  Path outputDir=new Path(props.getString(BUILD_OUTPUT_DIR),uri.getHost());
  Path inputPath=getInputPath();
  String keySelection=props.getString(KEY_SELECTION,null);
  String valSelection=props.getString(VALUE_SELECTION,null);
  CheckSumType checkSumType=CheckSum.fromString(props.getString(CHECKSUM_TYPE,CheckSum.toString(CheckSumType.MD5)));
  boolean saveKeys=props.getBoolean(SAVE_KEYS,true);
  boolean reducerPerBucket=props.getBoolean(REDUCER_PER_BUCKET,false);
  int numChunks=props.getInt(NUM_CHUNKS,-1);
  if (isAvroJob) {
    String recSchema=getRecordSchema();
    String keySchema=getKeySchema();
    String valSchema=getValueSchema();
    new VoldemortStoreBuilderJob(this.getId() + "-build-store",props,new VoldemortStoreBuilderConf(replicationFactor,chunkSize,tempDir,outputDir,inputPath,cluster,storeDefs,storeName,keySelection,valSelection,null,null,checkSumType,saveKeys,reducerPerBucket,numChunks,keyFieldName,valueFieldName,recSchema,keySchema,valSchema),true).run();
    return outputDir.toString();
  }
  new VoldemortStoreBuilderJob(this.getId() + "-build-store",props,new VoldemortStoreBuilderConf(replicationFactor,chunkSize,tempDir,outputDir,inputPath,cluster,storeDefs,storeName,keySelection,valSelection,null,null,checkSumType,saveKeys,reducerPerBucket,numChunks)).run();
  return outputDir.toString();
}
