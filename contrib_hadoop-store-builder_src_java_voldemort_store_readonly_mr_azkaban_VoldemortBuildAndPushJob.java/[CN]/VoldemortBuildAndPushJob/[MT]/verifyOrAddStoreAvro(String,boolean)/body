{
  Schema schema=AvroUtils.getAvroSchemaFromPath(getInputPath());
  int replicationFactor=props.getInt(BUILD_REPLICATION_FACTOR,2);
  int requiredReads=props.getInt(BUILD_REQUIRED_READS,1);
  int requiredWrites=props.getInt(BUILD_REQUIRED_WRITES,1);
  String description=props.getString(PUSH_STORE_DESCRIPTION,"");
  String owners=props.getString(PUSH_STORE_OWNERS,"");
  String serializerName;
  if (isVersioned)   serializerName=AVRO_GENERIC_VERSIONED_TYPE_NAME;
 else   serializerName=AVRO_GENERIC_TYPE_NAME;
  String keySchema="\n\t\t<type>" + serializerName + "</type>\n\t\t<schema-info version=\"0\">"+ schema.getField(keyField).schema()+ "</schema-info>\n\t";
  String valSchema="\n\t\t<type>" + serializerName + "</type>\n\t\t<schema-info version=\"0\">"+ schema.getField(valueField).schema()+ "</schema-info>\n\t";
  boolean hasCompression=false;
  if (props.containsKey(BUILD_COMPRESS_VALUE)) {
    hasCompression=true;
  }
  if (hasCompression) {
    valSchema+="\t<compression><type>gzip</type></compression>\n\t";
  }
  if (props.containsKey(BUILD_FORCE_SCHEMA_KEY)) {
    keySchema=props.get(BUILD_FORCE_SCHEMA_KEY);
  }
  if (props.containsKey(BUILD_FORCE_SCHEMA_VALUE)) {
    valSchema=props.get(BUILD_FORCE_SCHEMA_VALUE);
  }
  String newStoreDefXml=VoldemortUtils.getStoreDefXml(storeName,replicationFactor,requiredReads,requiredWrites,props.containsKey(BUILD_PREFERRED_READS) ? props.getInt(BUILD_PREFERRED_READS) : null,props.containsKey(BUILD_PREFERRED_WRITES) ? props.getInt(BUILD_PREFERRED_WRITES) : null,(props.containsKey(PUSH_FORCE_SCHEMA_KEY)) ? props.getString(PUSH_FORCE_SCHEMA_KEY) : keySchema,(props.containsKey(PUSH_FORCE_SCHEMA_VALUE)) ? props.getString(PUSH_FORCE_SCHEMA_VALUE) : valSchema,description,owners);
  KeyValueSchema returnSchemaObj=new KeyValueSchema(keySchema,valSchema);
  boolean foundStore=findAndVerifyAvro(url,newStoreDefXml,hasCompression,replicationFactor,requiredReads,requiredWrites,serializerName,returnSchemaObj);
  if (!foundStore) {
    try {
      StoreDefinition newStoreDef=VoldemortUtils.getStoreDef(newStoreDefXml);
      addStore(description,owners,url,newStoreDef);
    }
 catch (    RuntimeException e) {
      log.error("Error in adding store definition from: " + url,e);
      System.exit(-1);
    }
  }
  AdminClient adminClient=new AdminClient(url,new AdminClientConfig(),new ClientConfig());
  storeDefs=ImmutableList.of(VoldemortUtils.getStoreDef(VoldemortUtils.getStoreDefXml(storeName,replicationFactor,requiredReads,requiredWrites,props.containsKey(BUILD_PREFERRED_READS) ? props.getInt(BUILD_PREFERRED_READS) : null,props.containsKey(BUILD_PREFERRED_WRITES) ? props.getInt(BUILD_PREFERRED_WRITES) : null,returnSchemaObj.keySchema,returnSchemaObj.valSchema)));
  cluster=adminClient.getAdminClientCluster();
  adminClient.close();
}
