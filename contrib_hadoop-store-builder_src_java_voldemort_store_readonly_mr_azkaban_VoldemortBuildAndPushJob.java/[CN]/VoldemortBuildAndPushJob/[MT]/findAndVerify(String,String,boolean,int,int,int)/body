{
  log.info("Verifying store: \n" + newStoreDefXml.toString());
  StoreDefinition newStoreDef=VoldemortUtils.getStoreDef(newStoreDefXml);
  log.info("Getting store definition from: " + url + " (node id "+ this.nodeId+ ")");
  List<StoreDefinition> remoteStoreDefs=adminClientPerCluster.get(url).metadataMgmtOps.getRemoteStoreDefList(this.nodeId).getValue();
  boolean foundStore=false;
  for (  StoreDefinition remoteStoreDef : remoteStoreDefs) {
    if (remoteStoreDef.getName().equals(storeName)) {
      if (!remoteStoreDef.equals(newStoreDef)) {
        SerializerDefinition localKeySerializerDef=newStoreDef.getKeySerializer();
        SerializerDefinition localValueSerializerDef=newStoreDef.getValueSerializer();
        SerializerDefinition remoteKeySerializerDef=remoteStoreDef.getKeySerializer();
        SerializerDefinition remoteValueSerializerDef=remoteStoreDef.getValueSerializer();
        if (remoteKeySerializerDef.getName().equals("json") && remoteValueSerializerDef.getName().equals("json") && remoteKeySerializerDef.getAllSchemaInfoVersions().size() == 1 && remoteValueSerializerDef.getAllSchemaInfoVersions().size() == 1) {
          JsonTypeDefinition remoteKeyDef=JsonTypeDefinition.fromJson(remoteKeySerializerDef.getCurrentSchemaInfo());
          JsonTypeDefinition remoteValDef=JsonTypeDefinition.fromJson(remoteValueSerializerDef.getCurrentSchemaInfo());
          JsonTypeDefinition localKeyDef=JsonTypeDefinition.fromJson(localKeySerializerDef.getCurrentSchemaInfo());
          JsonTypeDefinition localValDef=JsonTypeDefinition.fromJson(localValueSerializerDef.getCurrentSchemaInfo());
          if (remoteKeyDef.equals(localKeyDef) && remoteValDef.equals(localValDef)) {
            String compressionPolicy="";
            if (hasCompression) {
              compressionPolicy="\n\t\t<compression><type>gzip</type></compression>";
            }
            newStoreDefXml=VoldemortUtils.getStoreDefXml(storeName,replicationFactor,requiredReads,requiredWrites,props.containsKey(BUILD_PREFERRED_READS) ? props.getInt(BUILD_PREFERRED_READS) : null,props.containsKey(BUILD_PREFERRED_WRITES) ? props.getInt(BUILD_PREFERRED_WRITES) : null,"\n\t\t<type>json</type>\n\t\t<schema-info version=\"0\">" + remoteKeySerializerDef.getCurrentSchemaInfo() + "</schema-info>\n\t","\n\t\t<type>json</type>\n\t\t<schema-info version=\"0\">" + remoteValueSerializerDef.getCurrentSchemaInfo() + "</schema-info>"+ compressionPolicy+ "\n\t");
            newStoreDef=VoldemortUtils.getStoreDef(newStoreDefXml);
            if (!remoteStoreDef.equals(newStoreDef)) {
              throw new RuntimeException("Your store schema is identical, but the store definition does not match. Have: " + newStoreDef + "\nBut expected: "+ remoteStoreDef);
            }
          }
 else {
            throw new RuntimeException("Your store definition does not match the store definition that is already in the cluster. Tried to resolve identical schemas between local and remote, but failed. Have: " + newStoreDef + "\nBut expected: "+ remoteStoreDef);
          }
        }
 else {
          throw new RuntimeException("Your store definition does not match the store definition that is already in the cluster. Have: " + newStoreDef + "\nBut expected: "+ remoteStoreDef);
        }
      }
      foundStore=true;
      break;
    }
  }
  return foundStore;
}
