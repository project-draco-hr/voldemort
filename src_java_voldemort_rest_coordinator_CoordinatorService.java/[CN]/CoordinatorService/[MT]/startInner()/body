{
  ClientConfig clientConfig=new ClientConfig();
  clientConfig.setBootstrapUrls(this.coordinatorConfig.getBootstrapURLs());
  storeClientFactory=new SocketStoreClientFactory(clientConfig);
  try {
    initializeFatClients();
    SystemStoreRepository sysRepository=new SystemStoreRepository(clientConfig);
    String clusterXml=storeClientFactory.bootstrapMetadataWithRetries(MetadataStore.CLUSTER_KEY);
    sysRepository.createSystemStores(clientConfig,clusterXml,storeClientFactory.getFailureDetector());
    Callable<Void> rebootstrapCallback=new Callable<Void>(){
      @Override public Void call() throws Exception {
        initializeFatClients();
        return null;
      }
    }
;
    asyncMetadataManager=new AsyncMetadataVersionManager(sysRepository,rebootstrapCallback,null);
    schedulerService=new SchedulerService(1,SystemTime.INSTANCE,true);
    schedulerService.schedule(asyncMetadataManager.getClass().getName(),asyncMetadataManager,new Date(),this.coordinatorConfig.getMetadataCheckIntervalInMs());
  }
 catch (  BootstrapFailureException be) {
  }
  this.workerPool=(ThreadPoolExecutor)Executors.newCachedThreadPool();
  this.bootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),workerPool));
  this.bootstrap.setOption("backlog",this.coordinatorConfig.getNettyServerBacklog());
  this.bootstrap.setOption("child.tcpNoDelay",true);
  this.bootstrap.setOption("child.keepAlive",true);
  this.bootstrap.setOption("child.reuseAddress",true);
  this.bootstrap.setPipelineFactory(new CoordinatorPipelineFactory(this.fatClientMap,this.coordinatorMetadata,this.coordinatorConfig,this.coordinatorPerfStats,this.connectionStats));
  JmxUtils.registerMbean(this,JmxUtils.createObjectName(JmxUtils.getPackageName(this.getClass()),JmxUtils.getClassName(this.getClass())));
  JmxUtils.registerMbean(this.connectionStats,JmxUtils.createObjectName(JmxUtils.getPackageName(this.getClass()),JmxUtils.getClassName(this.connectionStats.getClass())));
  this.nettyServerChannel=this.bootstrap.bind(new InetSocketAddress(this.coordinatorConfig.getServerPort()));
  logger.info("Coordinator service started on port " + this.coordinatorConfig.getServerPort());
}
