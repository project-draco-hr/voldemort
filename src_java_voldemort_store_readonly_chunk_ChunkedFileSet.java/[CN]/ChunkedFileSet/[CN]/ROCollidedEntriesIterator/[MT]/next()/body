{
  if (!hasNext())   throw new VoldemortException("Reached the end");
  try {
    ByteBuffer keyBuffer=ByteBuffer.allocate(2 * ByteUtils.SIZE_OF_INT);
    ByteBuffer numKeyValsBuffer=ByteBuffer.allocate(ByteUtils.SIZE_OF_SHORT);
    getCurrentChunk().read(numKeyValsBuffer,getCurrentOffsetInChunk());
    short tupleCount=numKeyValsBuffer.getShort(0);
    int offsetMoved=ByteUtils.SIZE_OF_SHORT;
    ByteBuffer keyValueLength=ByteBuffer.allocate(2 * ByteUtils.SIZE_OF_INT);
    for (int tupleId=0; tupleId < tupleCount; tupleId++) {
      getCurrentChunk().read(keyValueLength,getCurrentOffsetInChunk() + offsetMoved);
      int keyLength=keyValueLength.getInt(0);
      int valueLength=keyValueLength.getInt(ByteUtils.SIZE_OF_INT);
      if (keyBuffer.hasRemaining()) {
        ByteBuffer tempKeyBuffer=ByteBuffer.allocate(keyLength);
        getCurrentChunk().read(tempKeyBuffer,getCurrentOffsetInChunk() + keyLength + valueLength);
        keyBuffer.put(ByteUtils.copy(md5er.digest(tempKeyBuffer.array()),0,2 * ByteUtils.SIZE_OF_INT));
      }
      offsetMoved+=(2 * ByteUtils.SIZE_OF_INT) + keyLength + valueLength;
      keyValueLength.clear();
    }
    ByteBuffer finalValue=ByteBuffer.allocate(offsetMoved);
    getCurrentChunk().read(finalValue,getCurrentOffsetInChunk());
    updateOffset(getCurrentOffsetInChunk() + offsetMoved);
    return Pair.create(keyBuffer,finalValue);
  }
 catch (  IOException e) {
    logger.error(e);
    throw new VoldemortException(e);
  }
 finally {
    md5er.reset();
  }
}
