{
  FileChannel dataFile=dataFileFor(chunk);
  try {
switch (storageFormat) {
case READONLY_V0:
case READONLY_V1:
{
        ByteBuffer sizeBuffer=ByteBuffer.allocate(ByteUtils.SIZE_OF_INT);
        dataFile.read(sizeBuffer,valueLocation);
        int valueSize=sizeBuffer.getInt(0);
        ByteBuffer valueBuffer=ByteBuffer.allocate(valueSize);
        dataFile.read(valueBuffer,valueLocation + ByteUtils.SIZE_OF_INT);
        return valueBuffer.array();
      }
case READONLY_V2:
{
      ByteBuffer sizeBuffer=ByteBuffer.allocate(ByteUtils.SIZE_OF_SHORT + (2 * ByteUtils.SIZE_OF_INT));
      dataFile.read(sizeBuffer,valueLocation);
      short numKeyValues=sizeBuffer.getShort(0);
      valueLocation+=ByteUtils.SIZE_OF_SHORT;
      int keySize=sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT);
      valueLocation+=ByteUtils.SIZE_OF_INT;
      int valueSize=sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT);
      valueLocation+=ByteUtils.SIZE_OF_INT;
      do {
        if (keySize == -1 && valueSize == -1) {
          sizeBuffer.clear();
          dataFile.read(sizeBuffer,valueLocation);
          keySize=sizeBuffer.getInt(0);
          valueSize=sizeBuffer.getInt(ByteUtils.SIZE_OF_INT);
          valueLocation+=(2 * ByteUtils.SIZE_OF_INT);
        }
        ByteBuffer buffer=ByteBuffer.allocate(keySize);
        dataFile.read(buffer,valueLocation);
        valueLocation+=keySize;
        if (ByteUtils.compare(buffer.array(),key) == 0) {
          buffer=ByteBuffer.allocate(valueSize);
          dataFile.read(buffer,valueLocation);
          return buffer.array();
        }
        valueLocation+=valueSize;
        keySize=valueSize=-1;
      }
 while (--numKeyValues > 0);
      return new byte[0];
    }
default :
{
    throw new VoldemortException("Storage format not supported ");
  }
}
}
 catch (IOException e) {
throw new VoldemortException(e);
}
}
