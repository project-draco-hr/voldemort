{
  List<Node> nodes=null;
  try {
    nodes=getNodes(key);
  }
 catch (  VoldemortException e) {
    pipelineData.setFatalError(e);
    pipeline.abort();
    return;
  }
  if (logger.isDebugEnabled())   logger.debug("Adding " + nodes.size() + " node(s) to preference list");
  if (pipelineData.getZonesRequired() != null) {
    if (pipelineData.getZonesRequired() > this.clientZone.getProximityList().size()) {
      throw new VoldemortException("Number of zones required should be less than the total number of zones");
    }
    if (pipelineData.getZonesRequired() > required) {
      throw new VoldemortException("Number of zones required should be less than the required number of " + pipeline.getOperation().getSimpleName() + "s");
    }
    Map<Integer,List<Node>> zoneIdToNode=new HashMap<Integer,List<Node>>();
    for (    Node node : nodes) {
      List<Node> nodesList=null;
      if (zoneIdToNode.containsKey(node.getZoneId())) {
        nodesList=zoneIdToNode.get(node.getZoneId());
      }
 else {
        nodesList=new ArrayList<Node>();
        zoneIdToNode.put(node.getZoneId(),nodesList);
      }
      nodesList.add(node);
    }
    nodes=new ArrayList<Node>();
    LinkedList<Integer> proximityList=this.clientZone.getProximityList();
    if (pipeline.getOperation() != Operation.PUT) {
      for (int index=0; index < pipelineData.getZonesRequired(); index++) {
        List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
        if (zoneNodes != null) {
          nodes.add(zoneNodes.remove(0));
        }
      }
    }
    nodes.addAll(zoneIdToNode.get(this.clientZone.getId()));
    for (int index=0; index < proximityList.size(); index++) {
      List<Node> zoneNodes=zoneIdToNode.get(proximityList.get(index));
      if (zoneNodes != null)       nodes.addAll(zoneNodes);
    }
  }
  pipelineData.setNodes(nodes);
  pipeline.addEvent(completeEvent);
}
