{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("sshprivatekey","File containing SSH private key").withRequiredArg();
  parser.accepts("hostuserid","User ID on remote host").withRequiredArg();
  parser.accepts("voldemortroot","Voldemort's root directory on remote host").withRequiredArg();
  parser.accepts("voldemorthome","Voldemort's home directory on remote host").withRequiredArg();
  parser.accepts("clusterxml","Voldemort's cluster.xml file on the local file system; used to determine host names").withRequiredArg();
  OptionSet options=parse(args);
  File hostNamesFile=getRequiredInputFile(options,"hostnames");
  List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(hostNamesFile);
  final List<String> externalHostNames=new ArrayList<String>();
  final List<String> internalHostNames=new ArrayList<String>();
  for (  HostNamePair hostNamePair : hostNamePairs) {
    externalHostNames.add(hostNamePair.getExternalHostName());
    internalHostNames.add(hostNamePair.getInternalHostName());
  }
  final File sshPrivateKey=getRequiredInputFile(options,"sshprivatekey");
  final String hostUserId=CmdUtils.valueOf(options,"hostuserid","root");
  String voldemortHomeDirectory=getRequiredString(options,"voldemorthome");
  final String voldemortRootDirectory=getRequiredString(options,"voldemortroot");
  File clusterXmlFile=getRequiredInputFile(options,"clusterxml");
  Map<String,Integer> nodeIds=getNodeIds(hostNamesFile,clusterXmlFile,hostNamePairs);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      RemoteOperation<Object> operation=new SshClusterStopper(externalHostNames,sshPrivateKey,hostUserId,voldemortRootDirectory);
      try {
        operation.execute();
      }
 catch (      RemoteOperationException e) {
        e.printStackTrace();
      }
    }
  }
);
  RemoteOperation<Object> operation=new SshClusterStarter(externalHostNames,sshPrivateKey,hostUserId,voldemortRootDirectory,voldemortHomeDirectory,nodeIds);
  operation.execute();
}
