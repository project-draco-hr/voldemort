{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("sshprivatekey","File containing SSH private key").withRequiredArg();
  parser.accepts("hostuserid","User ID on remote host").withRequiredArg();
  parser.accepts("voldemortroot","Voldemort's root directory on remote host").withRequiredArg();
  parser.accepts("voldemorthome","Voldemort's home directory on remote host").withRequiredArg();
  OptionSet options=parse(args);
  File hostNamesFile=getRequiredInputFile(options,"hostnames");
  File sshPrivateKey=getRequiredInputFile(options,"sshprivatekey");
  String hostUserId=CmdUtils.valueOf(options,"hostuserid","root");
  String voldemortHomeDirectory=getRequiredString(options,"voldemorthome");
  String voldemortRootDirectory=getRequiredString(options,"voldemortroot");
  List<String> hostNames=getHostNamesFromFile(hostNamesFile,true);
  final CommandLineClusterConfig config=new CommandLineClusterConfig();
  config.setHostNames(hostNames);
  config.setHostUserId(hostUserId);
  config.setSshPrivateKey(sshPrivateKey);
  config.setVoldemortHomeDirectory(voldemortHomeDirectory);
  config.setVoldemortRootDirectory(voldemortRootDirectory);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      ClusterOperation<Object> operation=new SshClusterStopper(config);
      try {
        operation.execute();
      }
 catch (      ClusterOperationException e) {
        e.printStackTrace();
      }
    }
  }
);
  ClusterOperation<Object> operation=new SshClusterStarter(config);
  operation.execute();
}
