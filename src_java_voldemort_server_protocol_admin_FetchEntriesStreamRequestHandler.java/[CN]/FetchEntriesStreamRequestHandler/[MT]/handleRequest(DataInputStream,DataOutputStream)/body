{
  if (!keyIterator.hasNext())   return StreamRequestHandlerState.COMPLETE;
  long startNs=System.nanoTime();
  ByteArray key=keyIterator.next();
  if (RebalanceUtils.checkKeyBelongsToPartition(nodeId,key.get(),replicaToPartitionList,initialCluster,storeDef) && counter % skipRecords == 0) {
    List<Versioned<byte[]>> values=storageEngine.get(key,null);
    stats.recordDiskTime(handle,System.nanoTime() - startNs);
    for (    Versioned<byte[]> value : values) {
      throttler.maybeThrottle(key.length());
      if (filter.accept(key,value)) {
        fetched++;
        handle.incrementEntriesScanned();
        VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
        VAdminProto.PartitionEntry partitionEntry=VAdminProto.PartitionEntry.newBuilder().setKey(ProtoUtils.encodeBytes(key)).setVersioned(ProtoUtils.encodeVersioned(value)).build();
        response.setPartitionEntry(partitionEntry);
        Message message=response.build();
        startNs=System.nanoTime();
        ProtoUtils.writeMessage(outputStream,message);
        stats.recordNetworkTime(handle,System.nanoTime() - startNs);
        throttler.maybeThrottle(AdminServiceRequestHandler.valueSize(value));
      }
    }
  }
 else {
    stats.recordDiskTime(handle,System.nanoTime() - startNs);
  }
  counter++;
  if (0 == counter % 100000) {
    long totalTime=(System.currentTimeMillis() - startTime) / 1000;
    logger.info("Fetch entries scanned " + counter + " entries, fetched "+ fetched+ " entries for store '"+ storageEngine.getName()+ "' replicaToPartitionList:"+ replicaToPartitionList+ " in "+ totalTime+ " s");
  }
  if (keyIterator.hasNext())   return StreamRequestHandlerState.WRITING;
 else {
    stats.closeHandle(handle);
    return StreamRequestHandlerState.COMPLETE;
  }
}
