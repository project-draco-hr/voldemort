{
  long incorrectTimeout=200;
  long correctTimeout=1500;
  String key="a";
  String value="First";
  String newValue="Second";
  try {
    this.dynamicTimeoutClient.put(new ByteArray(key.getBytes()),value.getBytes());
  }
 catch (  Exception e) {
    fail("Error in regular put.");
  }
  long startTime=System.currentTimeMillis();
  try {
    this.dynamicTimeoutClient.putWithCustomTimeout(new CompositePutVoldemortRequest<ByteArray,byte[]>(new ByteArray(key.getBytes()),newValue.getBytes(),incorrectTimeout));
    fail("Should not reach this point. The small (incorrect) timeout did not work.");
  }
 catch (  InsufficientOperationalNodesException ion) {
    System.out.println("This failed as Expected.");
  }
  try {
    List<Versioned<byte[]>> versionedValues=this.dynamicTimeoutClient.getWithCustomTimeout(new CompositeGetVoldemortRequest<ByteArray,byte[]>(new ByteArray(key.getBytes()),correctTimeout,true));
    assertTrue(versionedValues.size() == 1);
    Versioned<byte[]> versionedValue=versionedValues.get(0);
    long endTime=System.currentTimeMillis();
    System.out.println("Total time taken = " + (endTime - startTime));
    String response=new String(versionedValue.getValue());
    if (!response.equals(value)) {
      fail("The returned value does not match. Expected: " + value + " but Received: "+ response);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("The dynamic per call timeout did not work !");
  }
}
