{
  int numServers=1;
  servers=new VoldemortServer[numServers];
  int partitionMap[][]={{0,2,4,6,1,3,5,7}};
  Properties props=new Properties();
  props.setProperty("storage.configs","voldemort.store.bdb.BdbStorageConfiguration,voldemort.store.slow.SlowStorageConfiguration");
  props.setProperty("testing.slow.queueing.get.ms",SLOW_STORE_DELAY);
  props.setProperty("testing.slow.queueing.put.ms",SLOW_STORE_DELAY);
  cluster=ServerTestUtils.startVoldemortCluster(numServers,servers,partitionMap,socketStoreFactory,true,null,STORES_XML,props);
  socketUrl=servers[0].getIdentityNode().getSocketUrl().toString();
  String bootstrapUrl=socketUrl;
  ClientConfig clientConfig=new ClientConfig().setBootstrapUrls(bootstrapUrl).setEnableCompressionLayer(false).setEnableSerializationLayer(false).enableDefaultClient(true).setEnableLazy(false);
  String storesXml=FileUtils.readFileToString(new File(STORES_XML),"UTF-8");
  ClusterMapper mapper=new ClusterMapper();
  this.dynamicTimeoutClient=new DynamicTimeoutStoreClient<ByteArray,byte[]>(STORE_NAME,new SocketStoreClientFactory(clientConfig),1,storesXml,mapper.writeCluster(cluster));
}
