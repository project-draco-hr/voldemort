{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("partitions","Number of partitions per cluster node").withRequiredArg().ofType(Integer.class);
  parser.accepts("clustername","Cluster name; defaults to mycluster").withRequiredArg();
  parser.accepts("useinternal","Use internal host name; defaults to true").withRequiredArg().ofType(Boolean.class);
  OptionSet options=parse(args);
  List<File> hostNamesFiles=getRequiredInputFiles(options,"hostnames");
  int partitions=getRequiredInt(options,"partitions");
  String clusterName=CmdUtils.valueOf(options,"clustername","mycluster");
  boolean useInternal=CmdUtils.valueOf(options,"useinternal",true);
  HashMap<Integer,List<String>> zoneToHostNames=new HashMap<Integer,List<String>>();
  int zoneId=0;
  for (  File hostNameFile : hostNamesFiles) {
    List<HostNamePair> hostNamePairs=getHostNamesPairsFromFile(hostNameFile);
    List<String> hostNames=new ArrayList<String>();
    for (    HostNamePair hostNamePair : hostNamePairs) {
      if (useInternal)       hostNames.add(hostNamePair.getInternalHostName());
 else       hostNames.add(hostNamePair.getExternalHostName());
    }
    zoneToHostNames.put(zoneId++,hostNames);
  }
  String clusterXml=new ClusterGenerator().createClusterDescriptor(clusterName,zoneToHostNames,partitions);
  System.out.print(clusterXml);
}
