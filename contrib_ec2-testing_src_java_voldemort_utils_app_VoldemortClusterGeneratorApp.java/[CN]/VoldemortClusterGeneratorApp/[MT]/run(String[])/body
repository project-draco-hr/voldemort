{
  parser.accepts("help","Prints this help");
  parser.accepts("logging","Options are \"debug\", \"info\" (default), \"warn\", \"error\", or \"off\"").withRequiredArg();
  parser.accepts("hostnames","File containing host names").withRequiredArg();
  parser.accepts("partitions","Number of partitions per cluster node").withRequiredArg().ofType(Integer.class);
  parser.accepts("output","Output file for cluster.xml").withRequiredArg();
  parser.accepts("clustername","Cluster name; defaults to mycluster").withRequiredArg();
  OptionSet options=parse(args);
  File hostNamesFile=getRequiredInputFile(options,"hostnames");
  int partitions=getRequiredInt(options,"partitions");
  File output=getRequiredOutputFile(options,"output");
  String clusterName=CmdUtils.valueOf(options,"clustername","mycluster");
  List<String> privateHostNames=getHostNamesFromFile(hostNamesFile,false);
  String clusterXml=new ClusterGenerator().createClusterDescriptor(clusterName,privateHostNames,partitions);
  FileUtils.writeStringToFile(output,clusterXml);
}
