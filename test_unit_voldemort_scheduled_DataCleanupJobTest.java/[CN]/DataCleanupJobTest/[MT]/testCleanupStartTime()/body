{
  GregorianCalendar cal=new GregorianCalendar();
  assertEquals("Default is not tomorrow",Utils.getDayOfTheWeekFromNow(1),(cal.get(Calendar.DAY_OF_WEEK) + 1) % 7);
  GregorianCalendar expectedStart=TestUtils.getCalendar(2012,Calendar.SEPTEMBER,29,0,0,0);
  Random rand=new Random();
  for (int day=Calendar.SUNDAY; day <= Calendar.FRIDAY; day++) {
    GregorianCalendar serverStartTime=TestUtils.getCalendar(2012,Calendar.SEPTEMBER,22 + day,rand.nextInt(24),rand.nextInt(60),rand.nextInt(60));
    GregorianCalendar computedStart=Utils.getCalendarForNextRun(serverStartTime,Calendar.SATURDAY,0);
    assertEquals("Expected :" + expectedStart.getTimeInMillis() + " Computed: "+ computedStart.getTimeInMillis(),expectedStart.getTimeInMillis(),computedStart.getTimeInMillis());
  }
  GregorianCalendar serverStartTime=TestUtils.getCalendar(2012,Calendar.SEPTEMBER,28,23,59,59);
  GregorianCalendar computedStart=Utils.getCalendarForNextRun(serverStartTime,Calendar.SATURDAY,0);
  assertEquals("Expected :" + expectedStart.getTimeInMillis() + " Computed: "+ computedStart.getTimeInMillis(),expectedStart.getTimeInMillis(),computedStart.getTimeInMillis());
  serverStartTime=TestUtils.getCalendar(2012,Calendar.SEPTEMBER,29,1,0,1);
  computedStart=Utils.getCalendarForNextRun(serverStartTime,Calendar.SATURDAY,0);
  assertEquals(Calendar.SATURDAY,computedStart.get(Calendar.DAY_OF_WEEK));
  assertEquals(serverStartTime.get(Calendar.DAY_OF_YEAR) + 7,computedStart.get(Calendar.DAY_OF_YEAR));
}
