{
  SchedulerService scheduler=new SchedulerService(1,time);
  String cleanUpJobName="cleanup-freq-test";
  try {
    Date beginningOfTest=new Date();
    Runnable cleanupJob=new DataCleanupJob<ByteArray,byte[],byte[]>(engine,new ScanPermitWrapper(1),2 * Time.MS_PER_SECOND,SystemTime.INSTANCE,new EventThrottler(1000),null);
    scheduler.schedule(cleanUpJobName,cleanupJob,beginningOfTest,5 * Time.MS_PER_SECOND);
    for (int i=0; i < 10; i++) {
      ByteArray b=new ByteArray(Integer.toString(i).getBytes());
      engine.put(b,new Versioned<byte[]>(b.get()),null);
    }
    Thread.sleep(2 * Time.MS_PER_SECOND);
    for (int i=0; i < 10; i++) {
      ByteArray b=new ByteArray(Integer.toString(i).getBytes());
      List<Versioned<byte[]>> found=engine.get(b,null);
      assertTrue("Did not find key '" + i + "' in store!",found.size() > 0);
    }
    Thread.sleep((beginningOfTest.getTime() + 4 * Time.MS_PER_SECOND) - System.currentTimeMillis());
    for (int i=10; i < 20; i++) {
      ByteArray b=new ByteArray(Integer.toString(i).getBytes());
      engine.put(b,new Versioned<byte[]>(b.get()),null);
    }
    Thread.sleep((beginningOfTest.getTime() + 6 * Time.MS_PER_SECOND) - System.currentTimeMillis());
    for (int i=0; i < 10; i++) {
      ByteArray b=new ByteArray(Integer.toString(i).getBytes());
      List<Versioned<byte[]>> found=engine.get(b,null);
      assertTrue("Expected key '" + i + "' to be deleted!",found.size() == 0);
    }
    for (int i=10; i < 20; i++) {
      ByteArray b=new ByteArray(Integer.toString(i).getBytes());
      List<Versioned<byte[]>> found=engine.get(b,null);
      assertTrue("Expected key '" + i + "' to be retained!",found.size() > 0);
    }
  }
 catch (  Exception e) {
    logger.error("Got exception in testCleanupFrequency",e);
    fail("Got exception in testCleanupFrequency");
  }
 finally {
    scheduler.terminate(cleanUpJobName);
    scheduler.stop();
  }
}
