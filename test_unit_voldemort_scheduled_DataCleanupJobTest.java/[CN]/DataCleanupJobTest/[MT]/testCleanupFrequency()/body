{
  SchedulerService scheduler=new SchedulerService(1,time);
  String cleanUpJobName="cleanup-freq-test";
  try {
    MockTime mockTime=new MockTime(System.currentTimeMillis());
    DataCleanupJob cleanupJob=new DataCleanupJob<ByteArray,byte[],byte[]>(engine,new ScanPermitWrapper(1),STORE_NAME,mockTime,metadataStore);
    scheduler.schedule(cleanUpJobName,cleanupJob,new Date(),1 * Time.MS_PER_SECOND);
    putWithTimeStamp(0,10,System.currentTimeMillis());
    Thread.sleep(3 * Time.MS_PER_SECOND);
    assertPresence(0,10);
    assertEquals("No entries must be deleted now",0,cleanupJob.getEntriesDeleted());
    assertTrue("Entries are scanned, but not deleted",cleanupJob.getEntriesScanned() > 0);
    mockTime.setTime(System.currentTimeMillis() + START_RETENTION * Time.MS_PER_DAY + 1);
    putWithTimeStamp(10,20,mockTime.getMilliseconds());
    Thread.sleep(3 * Time.MS_PER_SECOND);
    assertAbsence(0,10);
    assertPresence(10,20);
    assertEquals("10 entries should be deleted",10,cleanupJob.getEntriesDeleted());
    long currentTime=mockTime.getMilliseconds();
    for (int i=20; i < 30; i++) {
      currentTime+=Time.MS_PER_DAY + 1;
      putWithTimeStamp(i,i + 1,currentTime);
    }
    mockTime.setTime(currentTime);
    updateStoreDef(REDUCED_RETENTION);
    Thread.sleep(3 * Time.MS_PER_SECOND);
    assertAbsence(10,28);
    assertEquals("28 entries should be deleted",28,cleanupJob.getEntriesDeleted());
    assertPresence(28,30);
  }
  finally {
    scheduler.terminate(cleanUpJobName);
    scheduler.stop();
  }
}
