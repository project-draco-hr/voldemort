{
  HttpURLConnection conn=null;
  String response=null;
  TestVersionedValue responseObj=null;
  int expectedResponseCode=200;
  try {
    String base64Key=new String(Base64.encodeBase64(key.getBytes()));
    URL url=new URL(this.coordinatorURL + "/" + STORE_NAME+ "/"+ base64Key);
    conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod("GET");
    conn.setDoInput(true);
    conn.setRequestProperty(VoldemortHttpRequestHandler.X_VOLD_REQUEST_TIMEOUT_MS,"1000");
    if (options != null) {
      if (options.get("timeout") != null && options.get("timeout") instanceof String) {
        conn.setRequestProperty(VoldemortHttpRequestHandler.X_VOLD_REQUEST_TIMEOUT_MS,(String)options.get("timeout"));
      }
      if (options.get("responseCode") != null && options.get("responseCode") instanceof Integer) {
        expectedResponseCode=(Integer)options.get("responseCode");
      }
    }
    if (conn.getResponseCode() != expectedResponseCode) {
      System.err.println("Illegal response during GET : " + conn.getResponseMessage());
      fail("Incorrect response received for a HTTP GET request :" + conn.getResponseCode());
    }
    if (conn.getResponseCode() == 404 || conn.getResponseCode() == 408) {
      return null;
    }
    ByteArrayDataSource ds=new ByteArrayDataSource(conn.getInputStream(),"multipart/mixed");
    MimeMultipart mp=new MimeMultipart(ds);
    assertEquals("The number of body parts expected is not 1",1,mp.getCount());
    MimeBodyPart part=(MimeBodyPart)mp.getBodyPart(0);
    VectorClock vc=CoordinatorUtils.deserializeVectorClock(part.getHeader(VoldemortHttpRequestHandler.X_VOLD_VECTOR_CLOCK)[0]);
    response=(String)part.getContent();
    responseObj=new TestVersionedValue(response,vc);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error in sending the REST request");
  }
 finally {
    if (conn != null) {
      conn.disconnect();
    }
  }
  return responseObj;
}
