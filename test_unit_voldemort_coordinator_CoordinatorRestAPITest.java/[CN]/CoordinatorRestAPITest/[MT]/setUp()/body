{
  int numServers=1;
  servers=new VoldemortServer[numServers];
  int partitionMap[][]={{0,2,4,6,1,3,5,7}};
  Properties props=new Properties();
  props.setProperty("storage.configs","voldemort.store.bdb.BdbStorageConfiguration,voldemort.store.slow.SlowStorageConfiguration");
  props.setProperty("testing.slow.queueing.get.ms","4");
  props.setProperty("testing.slow.queueing.getall.ms","4");
  props.setProperty("testing.slow.queueing.put.ms","4");
  props.setProperty("testing.slow.queueing.delete.ms","4");
  ServerTestUtils.startVoldemortCluster(numServers,servers,partitionMap,socketStoreFactory,true,null,STORES_XML,props);
  CoordinatorConfig config=new CoordinatorConfig();
  List<String> bootstrapUrls=new ArrayList<String>();
  socketUrl=servers[0].getIdentityNode().getSocketUrl().toString();
  bootstrapUrls.add(socketUrl);
  System.out.println("\n\n************************ Starting the Coordinator *************************");
  config.setBootstrapURLs(bootstrapUrls);
  config.setFatClientConfigPath(FAT_CLIENT_CONFIG_FILE_PATH);
  StoreClientConfigService storeClientConfigs=null;
switch (config.getFatClientConfigSource()) {
case FILE:
    storeClientConfigs=new FileBasedStoreClientConfigService(config);
  break;
case ZOOKEEPER:
throw new UnsupportedOperationException("Zookeeper-based configs are not implemented yet!");
default :
storeClientConfigs=null;
}
this.coordinator=new CoordinatorProxyService(config,storeClientConfigs);
if (!this.coordinator.isStarted()) {
this.coordinator.start();
}
}
