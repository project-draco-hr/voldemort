{
  parser=new OptionParser();
  parser.accepts("help","Print usage information");
  parser.accepts("current-cluster","Path to current cluster xml").withRequiredArg().describedAs("cluster.xml");
  parser.accepts("target-cluster","Path to target cluster xml").withRequiredArg().describedAs("cluster.xml");
  parser.accepts("current-stores","Path to store definition xml").withRequiredArg().describedAs("stores.xml");
  parser.accepts("tries","(1) Tries during rebalance [ Default: " + RebalanceClientConfig.MAX_TRIES_REBALANCING + " ] (2) Number of tries while generating new metadata").withRequiredArg().ofType(Integer.class).describedAs("num-tries");
  parser.accepts("output-dir","Specify the output directory for the repartitioned cluster.xml and the analysis files.").withRequiredArg().ofType(String.class).describedAs("path");
  parser.accepts("generate","Optimize the target cluster which has new nodes with empty partitions");
  parser.accepts("generate-disable-primary-balancing","Make sure that all nodes within every zone have the same (within one) number of primary partitions [default: enabled]");
  parser.accepts("generate-enable-xzone-primary-moves","Allow primary partitions to move across zones [Default: disabled]");
  parser.accepts("generate-enable-any-xzone-nary-moves","Allow non-primary partitions to move across zones at any time (i.e., does not check for xzone moves) [Default: disabled]");
  parser.accepts("generate-enable-last-resort-xzone-nary-moves","Allow non-primary partitions to move across zones as a last resort (i.e., checks for xzone moves and prefers to avoid them, unless a xzone move is required to achieve balance) [Default: disabled]");
  parser.accepts("generate-enable-xzone-shuffle","Allows non-primary partitions to move across zones in random or greedy shuffles. [Default: disabled]");
  parser.accepts("generate-enable-random-swaps","Enable attempts to improve balance by random partition swaps within a zone. [Default: disabled]");
  parser.accepts("generate-random-swap-attempts","Number of random swaps to attempt. [Default:" + DEFAULT_GENERATE_RANDOM_SWAP_ATTEMPTS + " ]").withRequiredArg().ofType(Integer.class).describedAs("num-attempts");
  parser.accepts("generate-random-swap-successes","Number of successful random swaps to permit exit before completing all swap attempts. [Default:" + DEFAULT_GENERATE_RANDOM_SWAP_SUCCESSES + " ]").withRequiredArg().ofType(Integer.class).describedAs("num-successes");
  parser.accepts("generate-enable-greedy-swaps","Enable attempts to improve balance by greedily swapping (random) partitions within a zone. [Default: disabled]");
  parser.accepts("generate-greedy-swap-attempts","Number of greedy (random) swaps to attempt. [Default:" + DEFAULT_GENERATE_GREEDY_SWAP_ATTEMPTS + " ]").withRequiredArg().ofType(Integer.class).describedAs("num-attempts");
  parser.accepts("generate-greedy-max-partitions-per-node","Max number of partitions per-node to evaluate swapping with other partitions within the zone. [Default:" + DEFAULT_GENERATE_GREEDY_MAX_PARTITIONS_PER_NODE + " ]").withRequiredArg().ofType(Integer.class).describedAs("max-partitions-per-node");
  parser.accepts("generate-greedy-max-partitions-per-zone","Max number of (random) partitions per-zone to evaluate swapping with partitions from node being evaluated. [Default:" + DEFAULT_GENERATE_GREEDY_MAX_PARTITIONS_PER_ZONE + " ]").withRequiredArg().ofType(Integer.class).describedAs("max-partitions-per-zone");
  parser.accepts("generate-max-contiguous-partitions","Limit the number of contiguous partition IDs allowed within a zone. [Default:" + DEFAULT_GENERATE_MAX_CONTIGUOUS_PARTITIONS + " (indicating no limit)]").withRequiredArg().ofType(Integer.class).describedAs("num-contiguous");
}
