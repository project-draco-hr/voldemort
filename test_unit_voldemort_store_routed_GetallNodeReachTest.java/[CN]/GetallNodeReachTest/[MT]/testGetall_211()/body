{
  cluster=getFourNodeClusterWithZones();
  HashMap<Integer,Integer> zoneReplicationFactor=new HashMap<Integer,Integer>();
  zoneReplicationFactor.put(0,2);
  zoneReplicationFactor.put(1,1);
  zoneReplicationFactor.put(2,1);
  storeDef=new StoreDefinitionBuilder().setName("test").setType(InMemoryStorageConfiguration.TYPE_NAME).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setReplicationFactor(4).setZoneReplicationFactor(zoneReplicationFactor).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).setZoneCountReads(0).setZoneCountWrites(0).build();
  makeStore();
  Versioned<byte[]> v=Versioned.value("v".getBytes());
  subStores.get(0).put(TestUtils.toByteArray("k001"),v,null);
  subStores.get(0).put(TestUtils.toByteArray("k011"),v,null);
  subStores.get(0).put(TestUtils.toByteArray("k101"),v,null);
  subStores.get(0).put(TestUtils.toByteArray("k111"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k010"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k011"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k110"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k111"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k100"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k101"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k110"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k111"),v,null);
  List<ByteArray> keys=new ArrayList<ByteArray>();
  keys.add(TestUtils.toByteArray("k000"));
  keys.add(TestUtils.toByteArray("k001"));
  keys.add(TestUtils.toByteArray("k010"));
  keys.add(TestUtils.toByteArray("k011"));
  keys.add(TestUtils.toByteArray("k100"));
  keys.add(TestUtils.toByteArray("k101"));
  keys.add(TestUtils.toByteArray("k110"));
  keys.add(TestUtils.toByteArray("k111"));
  Map<ByteArray,List<Versioned<byte[]>>> result=store.getAll(keys,null);
  assertFalse(result.containsKey(TestUtils.toByteArray("not_included")));
  assertFalse(result.containsKey(TestUtils.toByteArray("k000")));
  assertEquals(1,result.get(TestUtils.toByteArray("k011")).size());
  assertFalse(result.containsKey(TestUtils.toByteArray("k100")));
  assertEquals(1,result.get(TestUtils.toByteArray("k111")).size());
}
