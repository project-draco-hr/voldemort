{
  cluster=getEightNodeClusterWithZones();
  HashMap<Integer,Integer> zoneReplicationFactor=new HashMap<Integer,Integer>();
  zoneReplicationFactor.put(0,3);
  zoneReplicationFactor.put(1,3);
  storeDef=new StoreDefinitionBuilder().setName("test").setType(InMemoryStorageConfiguration.TYPE_NAME).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setReplicationFactor(6).setZoneReplicationFactor(zoneReplicationFactor).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setPreferredReads(2).setRequiredReads(2).setPreferredWrites(2).setRequiredWrites(2).setZoneCountReads(0).setZoneCountWrites(0).build();
  makeStore();
  Versioned<byte[]> v=Versioned.value("v".getBytes());
  subStores.get(0).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(0).put(TestUtils.toByteArray("k0000_1111"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(1).put(TestUtils.toByteArray("k0000_1111"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(2).put(TestUtils.toByteArray("k0000_1111"),v,null);
  subStores.get(3).put(TestUtils.toByteArray("k0000_1111"),v,null);
  subStores.get(3).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(4).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(4).put(TestUtils.toByteArray("k1111_0000"),v,null);
  subStores.get(5).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(5).put(TestUtils.toByteArray("k1111_0000"),v,null);
  subStores.get(6).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(6).put(TestUtils.toByteArray("k1111_0000"),v,null);
  subStores.get(7).put(TestUtils.toByteArray("k1111_1111"),v,null);
  subStores.get(7).put(TestUtils.toByteArray("k1111_0000"),v,null);
  List<ByteArray> keys=new ArrayList<ByteArray>();
  keys.add(TestUtils.toByteArray("k0000_0000"));
  keys.add(TestUtils.toByteArray("k0000_1111"));
  keys.add(TestUtils.toByteArray("k1111_0000"));
  keys.add(TestUtils.toByteArray("k1111_1111"));
  Map<ByteArray,List<Versioned<byte[]>>> result=store.getAll(keys,null);
  assertFalse(result.containsKey(TestUtils.toByteArray("not_included")));
  assertFalse(result.containsKey(TestUtils.toByteArray("k0000_0000")));
  assertEquals(2,result.get(TestUtils.toByteArray("k0000_1111")).size());
  assertFalse(result.containsKey(TestUtils.toByteArray("k1111_0000")));
  assertEquals(2,result.get(TestUtils.toByteArray("k1111_1111")).size());
}
