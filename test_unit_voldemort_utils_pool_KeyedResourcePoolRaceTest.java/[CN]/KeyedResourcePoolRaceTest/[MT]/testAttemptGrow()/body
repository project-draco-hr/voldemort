{
  ExecutorService service=Executors.newFixedThreadPool(POOL_SIZE);
  for (int i=0; i < NUM_TESTS; i++) {
    final CountDownLatch checkouts=new CountDownLatch(POOL_SIZE);
    List<Callable<Boolean>> tasks=new ArrayList<Callable<Boolean>>(POOL_SIZE);
    for (int t=0; t < POOL_SIZE; t++) {
      tasks.add(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          try {
            TestResource resource=pool.checkout("a");
            checkouts.countDown();
            checkouts.await();
            resource.invalidate();
            pool.checkin("a",resource);
            return true;
          }
 catch (          Exception e) {
            checkouts.countDown();
            throw e;
          }
        }
      }
);
    }
    try {
      List<Future<Boolean>> futures=service.invokeAll(tasks);
      for (      Future<Boolean> future : futures) {
        assertTrue(future.get());
      }
    }
 catch (    Exception e) {
      fail("Unexpected exception - " + e.getMessage());
    }
  }
}
