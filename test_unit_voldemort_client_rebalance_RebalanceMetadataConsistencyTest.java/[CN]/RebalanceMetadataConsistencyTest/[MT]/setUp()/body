{
  currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1,3},{2}});
  targetCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1},{2},{3}});
  rwStoreDefWithReplication=new StoreDefinitionBuilder().setName(testStoreNameRW).setType(BdbStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  Store<String,String,String> innerStore=new InMemoryStorageEngine<String,String,String>("inner-store");
  innerStore.put(MetadataStore.CLUSTER_KEY,new Versioned<String>(new ClusterMapper().writeCluster(currentCluster)),null);
  innerStore.put(MetadataStore.STORES_KEY,new Versioned<String>(new StoreDefinitionsMapper().writeStoreList(Lists.newArrayList(rwStoreDefWithReplication))),null);
  rwStoreDefWithReplication2=new StoreDefinitionBuilder().setName(testStoreNameRW2).setType(BdbStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  metadataStore=new MetadataStore(innerStore,0);
  rebalancer=new Rebalancer(null,metadataStore,null,null);
}
