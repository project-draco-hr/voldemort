{
  long start=System.nanoTime();
  while (true) {
    EventData eventData=null;
    try {
      eventData=eventDataQueue.poll(timeout,unit);
    }
 catch (    InterruptedException e) {
      throw new InsufficientOperationalNodesException(stateData.getOperation().getSimpleName() + " operation interrupted!",e);
    }
    if ((System.nanoTime() - start) > unit.toNanos(timeout))     throw new InsufficientOperationalNodesException(stateData.getOperation().getSimpleName() + " operation interrupted!");
    if (eventData.event.equals(Event.ERROR)) {
      if (logger.isTraceEnabled())       logger.trace(stateData.getOperation().getSimpleName() + " request, events complete due to error");
      break;
    }
 else     if (eventData.event.equals(Event.STOPPED)) {
      if (logger.isTraceEnabled())       logger.trace(stateData.getOperation().getSimpleName() + " request, events complete");
      break;
    }
    if (eventData.event.equals(Event.NOP))     continue;
    Action action=eventActions.get(eventData.event);
    if (action == null)     throw new IllegalStateException("action was null for event " + eventData.event);
    if (logger.isTraceEnabled())     logger.trace(stateData.getOperation().getSimpleName() + " request, action " + action.getClass().getSimpleName()+ " to handle "+ eventData.event+ " event");
    action.execute(this,eventData.data);
  }
}
