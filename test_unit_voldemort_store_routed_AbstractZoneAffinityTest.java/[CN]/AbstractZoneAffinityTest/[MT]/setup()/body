{
  byte[] v1_bytes={(byte)'V',(byte)'1'};
  byte[] v2_bytes={(byte)'V',(byte)'2'};
  byte[] k1_bytes={(byte)'K',(byte)'1'};
  byte[] k2_bytes={(byte)'K',(byte)'2'};
  byte[] k3_bytes={(byte)'K',(byte)'3'};
  clientConfig=new ClientConfig();
  clientConfig.setBootstrapUrls(cluster.getNodes().iterator().next().getSocketUrl().toString());
  clientConfig.setClientZoneId(clientZoneId);
  setupZoneAffinitySettings();
  SocketStoreClientFactory socketStoreClientFactory=new SocketStoreClientFactory(clientConfig);
  for (  Integer nodeId : cluster.getNodeIds()) {
    SocketStoreFactory socketStoreFactory=new ClientRequestExecutorPool(2,10000,100000,1024);
    VoldemortConfig config=ServerTestUtils.createServerConfigWithDefs(true,nodeId,TestUtils.createTempDir().getAbsolutePath(),cluster,stores,new Properties());
    VoldemortServer vs=ServerTestUtils.startVoldemortServer(socketStoreFactory,config,cluster);
    vservers.put(nodeId,vs);
    socketStoreFactories.put(nodeId,socketStoreFactory);
    Store<ByteArray,byte[],byte[]> store=vs.getStoreRepository().getLocalStore(storeDef.getName());
    Node node=cluster.getNodeById(nodeId);
    VectorClock version1=new VectorClock();
    version1.incrementVersion(0,System.currentTimeMillis());
    VectorClock version2=version1.incremented(0,System.currentTimeMillis());
    if (node.getZoneId() == clientZoneId) {
      store.put(new ByteArray(k1_bytes),new Versioned<byte[]>(v1_bytes,version1),null);
      store.put(new ByteArray(k2_bytes),new Versioned<byte[]>(v1_bytes,version1),null);
    }
 else {
      store.put(new ByteArray(k1_bytes),new Versioned<byte[]>(v2_bytes,version2),null);
      store.put(new ByteArray(k2_bytes),new Versioned<byte[]>(v1_bytes,version1),null);
      store.put(new ByteArray(k3_bytes),new Versioned<byte[]>(v1_bytes,version1),null);
    }
  }
  client=socketStoreClientFactory.getRawStore(storeDef.getName(),null);
}
