{
  Cluster cluster=new ClusterMapper().readCluster(new File(clusterXmlFile));
  StoreDefinition def1=new StoreDefinitionBuilder().setName("test1").setType(InMemoryStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.SERVER).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  StoreDefinition def2=new StoreDefinitionBuilder().setName("test2").setType(ReadOnlyStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.SERVER).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(2).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  HashMap<Integer,Integer> zoneRepFactor=Maps.newHashMap();
  zoneRepFactor.put(0,1);
  zoneRepFactor.put(1,1);
  StoreDefinition def3=new StoreDefinitionBuilder().setName("test3").setType(InMemoryStorageConfiguration.TYPE_NAME).setKeySerializer(new SerializerDefinition("string")).setValueSerializer(new SerializerDefinition("string")).setRoutingPolicy(RoutingTier.SERVER).setRoutingStrategyType(RoutingStrategyType.ZONE_STRATEGY).setReplicationFactor(2).setZoneCountReads(0).setZoneCountWrites(0).setZoneReplicationFactor(zoneRepFactor).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  StoreRepository repository=new StoreRepository();
  StorageEngine<ByteArray,byte[],byte[]> store=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test1");
  repository.addStorageEngine(store);
  StorageEngine<ByteArray,byte[],byte[]> store2=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test2");
  repository.addStorageEngine(store2);
  StorageEngine<ByteArray,byte[],byte[]> store3=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("test3");
  repository.addStorageEngine(store3);
  MetadataStore metadata=ServerTestUtils.createMetadataStore(cluster,Lists.newArrayList(def1,def2,def3));
  repository.addLocalStore(metadata);
  StorageEngine<ByteArray,byte[],byte[]> slopStore=new InMemoryStorageEngine<ByteArray,byte[],byte[]>("slop");
  SlopStorageEngine slopStorageEngine=new SlopStorageEngine(slopStore,metadata.getCluster());
  repository.setSlopStore(slopStorageEngine);
  for (int i=0; i < NUM_KEYS; i++) {
    store.put(new ByteArray(new String("key" + i).getBytes()),new Versioned<byte[]>(new String("value" + i).getBytes()),null);
    store2.put(new ByteArray(new String("key" + i).getBytes()),new Versioned<byte[]>(new String("value" + i).getBytes()),null);
    store3.put(new ByteArray(new String("key" + i).getBytes()),new Versioned<byte[]>(new String("value" + i).getBytes()),null);
  }
  RoutingStrategyFactory factory=new RoutingStrategyFactory();
  RoutingStrategy strategy1=factory.updateRoutingStrategy(def1,cluster), strategy3=factory.updateRoutingStrategy(def3,cluster);
  for (int nodeId=0; nodeId < 4; nodeId++) {
    metadata.put(MetadataStore.NODE_ID_KEY,nodeId);
    RepairJob job=new RepairJob(repository,metadata,new Semaphore(1));
    job.run();
    ClosableIterator<Pair<ByteArray,Versioned<Slop>>> iterator=slopStorageEngine.asSlopStore().entries();
    while (iterator.hasNext()) {
      Pair<ByteArray,Versioned<Slop>> keyVal=iterator.next();
      String storeName=keyVal.getSecond().getValue().getStoreName();
      byte[] key=keyVal.getSecond().getValue().getKey().get();
      if (storeName.compareTo("test1") == 0) {
        assertFalse(containsNode(strategy1.routeRequest(key),nodeId));
      }
 else       if (storeName.compareTo("test3") == 0) {
        assertFalse(containsNode(strategy3.routeRequest(key),nodeId));
      }
 else {
        Assert.fail("Cannot have slops for any other store");
      }
    }
    slopStore.truncate();
  }
}
