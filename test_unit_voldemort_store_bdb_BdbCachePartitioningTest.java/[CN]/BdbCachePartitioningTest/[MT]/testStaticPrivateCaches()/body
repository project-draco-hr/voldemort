{
  int totalCache=20 * ByteUtils.BYTES_PER_MB;
  int shareA=10 * ByteUtils.BYTES_PER_MB;
  int shareB=5 * ByteUtils.BYTES_PER_MB;
  int shareC=totalCache - shareA - shareB;
  int numRecords=40;
  BdbStorageEngine storeA=null, storeB=null, storeC=null;
  try {
    Props props=new Props();
    props.put("node.id",1);
    props.put("voldemort.home","test/common/voldemort/config");
    VoldemortConfig voldemortConfig=new VoldemortConfig(props);
    voldemortConfig.setBdbCacheSize(totalCache);
    voldemortConfig.setBdbOneEnvPerStore(true);
    voldemortConfig.setBdbDataDirectory(bdbMasterDir.toURI().getPath());
    voldemortConfig.setBdbPrefixKeysWithPartitionId(prefixPartitionId);
    bdbStorage=new BdbStorageConfiguration(voldemortConfig);
    StoreDefinition defA=TestUtils.makeStoreDefinition("storeA",shareA / (ByteUtils.BYTES_PER_MB));
    storeA=(BdbStorageEngine)bdbStorage.getStore(defA,TestUtils.makeSingleNodeRoutingStrategy());
    StoreDefinition defB=TestUtils.makeStoreDefinition("storeB",shareB / (ByteUtils.BYTES_PER_MB));
    storeB=(BdbStorageEngine)bdbStorage.getStore(defB,TestUtils.makeSingleNodeRoutingStrategy());
    StoreDefinition defC=TestUtils.makeStoreDefinition("storeC");
    storeC=(BdbStorageEngine)bdbStorage.getStore(defC,TestUtils.makeSingleNodeRoutingStrategy());
    assertTrue("Store A grew without traffic",Math.abs(shareA - getCacheSize(defA)) > ByteUtils.BYTES_PER_MB);
    assertTrue("Store B grew without traffic",Math.abs(shareB - getCacheSize(defB)) > ByteUtils.BYTES_PER_MB);
    assertEquals("Store A has non zero shared cache",0,getStats(bdbStorage.getEnvironment(defA)).getSharedCacheTotalBytes());
    assertEquals("Store B has non zero shared cache",0,getStats(bdbStorage.getEnvironment(defB)).getSharedCacheTotalBytes());
    byte[] value=new byte[ByteUtils.BYTES_PER_MB];
    for (int i=0; i < numRecords; i++) {
      storeA.put(TestUtils.toByteArray("testKey" + i),new Versioned<byte[]>(value),null);
      storeB.put(TestUtils.toByteArray("testKey" + i),new Versioned<byte[]>(value),null);
      storeC.put(TestUtils.toByteArray("testKey" + i),new Versioned<byte[]>(value),null);
    }
    long cacheSizeA=Long.MIN_VALUE;
    long cacheSizeB=Long.MIN_VALUE;
    long cacheSizeC=Long.MIN_VALUE;
    for (int cycle=0; cycle < 10; cycle++) {
      for (int i=0; i < numRecords; i++) {
        long cycleCacheSizeA=getAndCheckCacheSize(storeA,defA,"testKey" + i);
        long cycleCacheSizeB=getAndCheckCacheSize(storeB,defB,"testKey" + i);
        long cycleCacheSizeC=getAndCheckCacheSize(storeC,defC,"testKey" + i);
        cacheSizeA=(cycleCacheSizeA > cacheSizeA) ? cycleCacheSizeA : cacheSizeA;
        cacheSizeB=(cycleCacheSizeB > cacheSizeB) ? cycleCacheSizeB : cacheSizeB;
        cacheSizeC=(cycleCacheSizeC > cacheSizeC) ? cycleCacheSizeC : cacheSizeC;
      }
    }
    assertTrue("Store A not within limits",cacheSizeA <= (shareA + ByteUtils.BYTES_PER_MB));
    assertTrue("Store B not within limits",cacheSizeB <= (shareB + ByteUtils.BYTES_PER_MB));
    assertTrue("Store C not within limits",cacheSizeC <= (shareC + ByteUtils.BYTES_PER_MB));
    long cacheSizeCNow=Long.MIN_VALUE;
    for (int cycle=0; cycle < 10; cycle++) {
      for (int i=0; i < numRecords; i++) {
        long cycleCacheSizeCNow=getAndCheckCacheSize(storeC,defC,"testkey" + i);
        cacheSizeCNow=(cycleCacheSizeCNow > cacheSizeCNow) ? cycleCacheSizeCNow : cacheSizeCNow;
      }
    }
    assertTrue("Store C not within limits after spike",cacheSizeCNow <= (shareC + ByteUtils.BYTES_PER_MB));
  }
  finally {
    if (storeA != null)     storeA.close();
    if (storeB != null)     storeB.close();
    if (storeC != null)     storeC.close();
    bdbStorage.close();
  }
}
