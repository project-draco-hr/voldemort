{
  final Cluster currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3},{}});
  final Cluster targetCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{},{0,1,2,3}});
  final List<Integer> serverList=Arrays.asList(0,1);
  final Cluster updatedCluster=startServers(currentCluster,storeDefFile,serverList,null);
  ExecutorService executors=Executors.newFixedThreadPool(2);
  final AtomicBoolean rebalancingToken=new AtomicBoolean(false);
  final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
  populateData(currentCluster,Arrays.asList(0));
  Node node=currentCluster.getNodeById(0);
  final Store<ByteArray,byte[]> serverSideRoutingStore=ServerTestUtils.getSocketStore(testStoreName,node.getHost(),node.getSocketPort(),RequestFormatType.PROTOCOL_BUFFERS,true);
  executors.execute(new Runnable(){
    public void run(){
      try {
        List<String> keys=new ArrayList<String>(testEntries.keySet());
        int nRequests=0;
        while (!rebalancingToken.get()) {
          int index=(int)(Math.random() * keys.size());
          try {
            nRequests++;
            List<Versioned<byte[]>> values=serverSideRoutingStore.get(new ByteArray(ByteUtils.getBytes(keys.get(index),"UTF-8")));
            assertEquals("serverSideRoutingStore should return value.",1,values.size());
            assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),new Versioned<String>(ByteUtils.getString(values.get(0).getValue(),"UTF-8"),values.get(0).getVersion()));
          }
 catch (          UnreachableStoreException e) {
          }
catch (          Exception e) {
            exceptions.add(e);
          }
        }
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
    }
  }
);
  executors.execute(new Runnable(){
    public void run(){
      try {
        Thread.sleep(100);
        RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(currentCluster,0),new RebalanceClientConfig());
        rebalanceAndCheck(updatedCluster,targetCluster,rebalanceClient,Arrays.asList(1));
        Thread.sleep(60 * 1000);
        rebalancingToken.set(true);
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
 finally {
        try {
          stopServer(serverList);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
);
  executors.shutdown();
  executors.awaitTermination(300,TimeUnit.SECONDS);
  if (exceptions.size() > 0) {
    for (    Exception e : exceptions) {
      e.printStackTrace();
    }
    fail("Should not see any exceptions !!");
  }
}
