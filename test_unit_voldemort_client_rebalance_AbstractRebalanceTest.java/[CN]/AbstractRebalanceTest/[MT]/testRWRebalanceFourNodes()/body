{
  Cluster currentCluster=ServerTestUtils.getLocalCluster(4,new int[][]{{0,1,4,7,9},{2,3,5,6,8},{},{}});
  ArrayList<Node> nodes=Lists.newArrayList(currentCluster.getNodes());
  int totalPortNum=nodes.size() * 3;
  int[] ports=new int[totalPortNum];
  for (int i=0; i < nodes.size(); i++) {
    ports[i * 3]=nodes.get(i).getHttpPort();
    ports[i * 3 + 1]=nodes.get(i).getSocketPort();
    ports[i * 3 + 2]=nodes.get(i).getAdminPort();
  }
  Cluster targetCluster=ServerTestUtils.getLocalCluster(4,ports,new int[][]{{0,4,7},{2,8},{1,6},{3,5,9}});
  List<Integer> serverList=Arrays.asList(0,1,2,3);
  currentCluster=startServers(currentCluster,rwTwoStoreDefFileWithReplication,serverList,null);
  targetCluster=updateCluster(targetCluster);
  RebalanceClientConfig config=new RebalanceClientConfig();
  config.setDeleteAfterRebalancingEnabled(true);
  config.setStealerBasedRebalancing(!useDonorBased());
  config.setPrimaryPartitionBatchSize(10);
  RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(currentCluster,0),config);
  try {
    populateData(currentCluster,rwStoreDefWithReplication,rebalanceClient.getAdminClient(),false);
    populateData(currentCluster,rwStoreDefWithReplication2,rebalanceClient.getAdminClient(),false);
    rebalanceAndCheck(currentCluster,targetCluster,Lists.newArrayList(rwStoreDefWithReplication,rwStoreDefWithReplication2),rebalanceClient,serverList);
    checkConsistentMetadata(targetCluster,serverList);
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
 finally {
    stopServer(serverList);
  }
}
