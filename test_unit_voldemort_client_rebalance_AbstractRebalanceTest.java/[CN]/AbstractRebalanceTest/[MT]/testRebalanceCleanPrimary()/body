{
  logger.info("Starting testRebalanceCleanPrimary");
  Cluster currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1,3},{2}});
  Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,2,Lists.newArrayList(3));
  Map<String,String> configProps=new HashMap<String,String>();
  configProps.put("enable.repair","true");
  List<Integer> serverList=Arrays.asList(0,1,2);
  currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
  targetCluster=updateCluster(targetCluster);
  RebalanceClientConfig config=new RebalanceClientConfig();
  config.setDeleteAfterRebalancingEnabled(false);
  RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(currentCluster,0),config);
  try {
    populateData(currentCluster,rwStoreDefWithReplication,rebalanceClient.getAdminClient(),false);
    ByteArray[] checkKeysNegative=new ByteArray[20];
    List<Integer> movedPartitions=new ArrayList<Integer>();
    movedPartitions.add(3);
    AdminClient admin=rebalanceClient.getAdminClient();
    Iterator<ByteArray> keys=null;
    keys=admin.bulkFetchOps.fetchKeys(1,rwStoreDefWithReplication.getName(),movedPartitions,null,false);
    int keyIndex=0;
    while (keys.hasNext() && keyIndex < 20) {
      checkKeysNegative[keyIndex++]=keys.next();
    }
    ByteArray[] checkKeysPositive=new ByteArray[20];
    List<Integer> stablePartitions=new ArrayList<Integer>();
    stablePartitions.add(1);
    Iterator<ByteArray> keys2=null;
    keys2=admin.bulkFetchOps.fetchKeys(1,rwStoreDefWithReplication.getName(),stablePartitions,null,false);
    int keyIndex2=0;
    while (keys2.hasNext() && keyIndex2 < 20) {
      checkKeysPositive[keyIndex2++]=keys2.next();
    }
    rebalanceAndCheck(currentCluster,targetCluster,Lists.newArrayList(rwStoreDefWithReplication),rebalanceClient,Arrays.asList(0,1,2));
    checkConsistentMetadata(targetCluster,serverList);
    for (int i=0; i < 3; i++) {
      admin.storeMntOps.repairJob(i);
    }
    boolean cleanNode=true;
    for (int i=0; i < keyIndex; i++) {
      KeyLocationValidation val=new KeyLocationValidation(targetCluster,1,rwStoreDefWithReplication,checkKeysNegative[i]);
      if (!val.validate(false))       cleanNode=false;
    }
    for (int i=0; i < keyIndex2; i++) {
      KeyLocationValidation val=new KeyLocationValidation(targetCluster,1,rwStoreDefWithReplication,checkKeysPositive[i]);
      if (!val.validate(true))       cleanNode=false;
    }
    if (cleanNode)     System.out.println("[Primary] Successful clean after Rebalancing");
 else     System.out.println("[Primary] Rebalancing not clean");
  }
  finally {
    stopServer(serverList);
  }
}
