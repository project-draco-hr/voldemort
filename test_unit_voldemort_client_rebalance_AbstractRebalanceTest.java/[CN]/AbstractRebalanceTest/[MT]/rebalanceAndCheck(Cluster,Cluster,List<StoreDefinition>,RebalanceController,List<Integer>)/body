{
  rebalanceClient.rebalance(targetCluster);
  Map<Integer,Set<Pair<Integer,Integer>>> currentNodeToPartitionTuples=RebalanceUtils.getNodeIdToAllPartitions(currentCluster,storeDef,true);
  Map<Integer,Set<Pair<Integer,Integer>>> targetNodeToPartitionTuples=RebalanceUtils.getNodeIdToAllPartitions(targetCluster,storeDef,true);
  for (  int nodeId : nodeCheckList) {
    Set<Pair<Integer,Integer>> currentPartitionTuples=currentNodeToPartitionTuples.get(nodeId);
    Set<Pair<Integer,Integer>> targetPartitionTuples=targetNodeToPartitionTuples.get(nodeId);
    HashMap<Integer,List<Integer>> flattenedPresentTuples=RebalanceUtils.flattenPartitionTuples(RebalanceUtils.getAddedInTarget(currentPartitionTuples,targetPartitionTuples));
    for (    StoreDefinition def : storeDef) {
      Store<ByteArray,byte[],byte[]> store=getSocketStore(def.getName(),targetCluster.getNodeById(nodeId).getHost(),targetCluster.getNodeById(nodeId).getSocketPort());
      checkGetEntries(targetCluster.getNodeById(nodeId),targetCluster,def,store,flattenedPresentTuples);
    }
  }
}
