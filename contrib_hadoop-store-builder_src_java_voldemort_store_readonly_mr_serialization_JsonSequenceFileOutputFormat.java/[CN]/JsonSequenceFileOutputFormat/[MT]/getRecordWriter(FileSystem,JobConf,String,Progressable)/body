{
  Path file=FileOutputFormat.getTaskOutputPath(job,name);
  FileSystem fs=file.getFileSystem(job);
  CompressionType compressionType=CompressionType.BLOCK;
  Class<?> codecClass=getOutputCompressorClass(job,DefaultCodec.class);
  CompressionCodec codec=(CompressionCodec)ReflectionUtils.newInstance(codecClass,job);
  SequenceFile.Metadata meta=new SequenceFile.Metadata();
  meta.set(new Text("key.schema"),new Text(getSchema("reducer.output.key.schema",job)));
  meta.set(new Text("value.schema"),new Text(getSchema("reducer.output.value.schema",job)));
  final SequenceFile.Writer out=SequenceFile.createWriter(fs,job,file,job.getOutputKeyClass(),job.getOutputValueClass(),compressionType,codec,progress,meta);
  return new RecordWriter<BytesWritable,BytesWritable>(){
    public void write(    BytesWritable key,    BytesWritable value) throws IOException {
      out.append(key,value);
    }
    public void close(    Reporter reporter) throws IOException {
      out.close();
    }
  }
;
}
