{
  super(storeDef.getName(),innerStores,cluster,storeDef,repairReads,timeoutConfig,failureDetector,SystemTime.INSTANCE);
  if (zoneAffinity != null && storeDef.getZoneCountReads() != null && storeDef.getZoneCountReads() > 0) {
    if (zoneAffinity.isGetOpZoneAffinityEnabled()) {
      throw new IllegalArgumentException("storeDef.getZoneCountReads() is non-zero while zoneAffinityGet is enabled");
    }
    if (zoneAffinity.isGetAllOpZoneAffinityEnabled()) {
      throw new IllegalArgumentException("storeDef.getZoneCountReads() is non-zero while zoneAffinityGetAll is enabled");
    }
  }
  this.nonblockingSlopStores=nonblockingSlopStores;
  boolean isZonedClient;
  if (clientZoneId == Zone.UNSET_ZONE_ID) {
    isZonedClient=false;
    Collection<Zone> availableZones=cluster.getZones();
    this.clientZone=availableZones.iterator().next();
    if (availableZones.size() > 1) {
      String format="Client Zone is not specified. Default to Zone %d. The servers could be in a remote zone";
      logger.warn(String.format(format,this.clientZone.getId()));
    }
 else {
      if (logger.isDebugEnabled())       logger.debug(String.format("Client Zone is not specified. Default to Zone %d",this.clientZone.getId()));
    }
  }
 else {
    isZonedClient=true;
    this.clientZone=cluster.getZoneById(clientZoneId);
  }
  String storeName=storeDef.getName();
  boolean isSystemStore=SystemStoreConstants.isSystemStore(storeName);
  boolean isRouteToAllStrategy=routingStrategy.getType().equals(RoutingStrategyType.TO_ALL_STRATEGY);
  if (isZonedClient && isSystemStore && isRouteToAllStrategy) {
    logger.info("Enabling zone routing for Store" + storeName);
    forceZoneRouting=true;
  }
 else {
    forceZoneRouting=false;
  }
  this.nonblockingStores=new ConcurrentHashMap<Integer,NonblockingStore>(nonblockingStores);
  this.slopStores=slopStores;
  if (storeDef.getRoutingStrategyType().compareTo(RoutingStrategyType.ZONE_STRATEGY) == 0) {
    zoneRoutingEnabled=true;
  }
 else {
    zoneRoutingEnabled=false;
  }
  if (storeDef.hasHintedHandoffStrategyType()) {
    HintedHandoffStrategyFactory factory=new HintedHandoffStrategyFactory(zoneRoutingEnabled,clientZone.getId());
    this.handoffStrategy=factory.updateHintedHandoffStrategy(storeDef,cluster);
  }
 else {
    this.handoffStrategy=null;
  }
  this.jmxEnabled=isJmxEnabled;
  this.stats=stats;
  if (this.jmxEnabled) {
    this.stats.registerJmxIfRequired();
  }
  if (zoneAffinity != null) {
    this.zoneAffinity=zoneAffinity;
  }
 else {
    this.zoneAffinity=new ZoneAffinity();
  }
}
