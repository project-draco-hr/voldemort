{
  StoreUtils.assertValidKey(key);
  BasicPipelineData<Boolean> pipelineData=new BasicPipelineData<Boolean>();
  if (zoneRoutingEnabled)   pipelineData.setZonesRequired(storeDef.getZoneCountWrites());
 else   pipelineData.setZonesRequired(null);
  pipelineData.setStoreName(name);
  Pipeline pipeline=new Pipeline(Operation.DELETE,timeoutMs,TimeUnit.MILLISECONDS);
  pipeline.setEnableHintedHandoff(isHintedHandoffEnabled());
  HintedHandoff hintedHandoff=null;
  if (isHintedHandoffEnabled())   hintedHandoff=new HintedHandoff(failureDetector,slopStores,nonblockingSlopStores,handoffStrategy,pipelineData.getFailedNodes(),timeoutMs);
  pipeline.addEventAction(Event.STARTED,new ConfigureNodes<Boolean,BasicPipelineData<Boolean>>(pipelineData,Event.CONFIGURED,failureDetector,storeDef.getRequiredWrites(),routingStrategy,key,clientZone));
  pipeline.addEventAction(Event.CONFIGURED,new PerformParallelDeleteRequests<Boolean,BasicPipelineData<Boolean>>(pipelineData,isHintedHandoffEnabled() ? Event.RESPONSES_RECEIVED : Event.COMPLETED,key,failureDetector,storeDef.getPreferredWrites(),storeDef.getRequiredWrites(),timeoutMs,nonblockingStores,hintedHandoff,version));
  if (isHintedHandoffEnabled()) {
    pipeline.addEventAction(Event.RESPONSES_RECEIVED,new PerformDeleteHintedHandoff(pipelineData,Event.COMPLETED,key,version,hintedHandoff));
    pipeline.addEventAction(Event.ABORTED,new PerformDeleteHintedHandoff(pipelineData,Event.ERROR,key,version,hintedHandoff));
  }
  pipeline.addEvent(Event.STARTED);
  if (logger.isDebugEnabled()) {
    logger.debug("Operation " + pipeline.getOperation().getSimpleName() + " Key "+ ByteUtils.toHexString(key.get()));
  }
  pipeline.execute();
  if (pipelineData.getFatalError() != null)   throw pipelineData.getFatalError();
  for (  Response<ByteArray,Boolean> response : pipelineData.getResponses()) {
    if (response.getValue().booleanValue())     return true;
  }
  return false;
}
