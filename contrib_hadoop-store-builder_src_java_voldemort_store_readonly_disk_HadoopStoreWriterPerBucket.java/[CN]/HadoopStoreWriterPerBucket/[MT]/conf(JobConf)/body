{
  this.conf=job;
  try {
    List<StoreDefinition> storeDefs=new StoreDefinitionsMapper().readStoreList(new StringReader(conf.get("stores.xml")));
    if (storeDefs.size() != 1)     throw new IllegalStateException("Expected to find only a single store, but found multiple!");
    this.storeDef=storeDefs.get(0);
    this.numChunks=conf.getInt("num.chunks",-1);
    if (this.numChunks < 1)     throw new VoldemortException("num.chunks not specified in the job conf.");
    this.saveKeys=conf.getBoolean("save.keys",false);
    this.position=new int[getNumChunks()];
    this.reducerPerBucket=conf.getBoolean("reducer.per.bucket",false);
    this.outputDir=job.get("final.output.dir");
    this.taskId=job.get("mapred.task.id");
    this.checkSumType=CheckSum.fromString(job.get("checksum.type"));
    this.checkSumDigestIndex=new CheckSum[getNumChunks()];
    this.checkSumDigestValue=new CheckSum[getNumChunks()];
    initFileStreams(conf.getBoolean("reducer.output.compress",false),conf.get("reducer.output.compress.codec",NO_COMPRESSION_CODEC));
  }
 catch (  IOException e) {
    throw new RuntimeException("Failed to open Input/OutputStream",e);
  }
}
