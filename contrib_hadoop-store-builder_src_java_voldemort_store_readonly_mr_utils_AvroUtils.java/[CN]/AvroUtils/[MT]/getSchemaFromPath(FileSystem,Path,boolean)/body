{
  try {
    if (fs.isFile(path)) {
      BufferedInputStream inStream=null;
      try {
        inStream=new BufferedInputStream(fs.open(path));
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
      GenericDatumReader datum=new GenericDatumReader();
      DataFileStream reader=null;
      try {
        reader=new DataFileStream(inStream,datum);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return reader.getSchema();
    }
 else {
      FileStatus[] statuses=null;
      if (fs.isDirectory(path)) {
        statuses=fs.listStatus(path);
      }
 else {
        statuses=fs.globStatus(path);
      }
      if (statuses == null || statuses.length == 0)       throw new IllegalArgumentException("No files found in path pattern " + path.toUri().getPath());
      List<Schema> schemas=new ArrayList<Schema>();
      for (      FileStatus status : statuses) {
        if (!HadoopUtils.shouldPathBeIgnored(status.getPath())) {
          if (!checkSameSchema) {
            return getSchemaFromPath(fs,status.getPath(),checkSameSchema);
          }
          schemas.add(getSchemaFromPath(fs,status.getPath(),checkSameSchema));
        }
      }
      if (schemas.size() > 0) {
        Schema schema=schemas.get(0);
        for (int i=1; i < schemas.size(); i++)         if (!schema.equals(schemas.get(i)))         throw new IllegalArgumentException("The directory " + path.toString() + " contains heterogenous schemas: found both '"+ schema.toString()+ "' and '"+ schemas.get(i).toString()+ "'.");
        return schema;
      }
 else {
        throw new IllegalArgumentException("No Valid metadata file found for Path:" + path.toString());
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
