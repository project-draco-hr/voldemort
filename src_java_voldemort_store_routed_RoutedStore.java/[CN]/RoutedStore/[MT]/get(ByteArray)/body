{
  StoreUtils.assertValidKey(key);
  BasicPipelineData pipelineData=new BasicPipelineData();
  final Pipeline pipeline=new Pipeline(Operation.GET);
  NonblockingStoreRequest nonblockingStoreRequest=new NonblockingStoreRequest(){
    public void request(    Node node,    NonblockingStore store){
      final NonblockingStoreCallback callback=new PipelineEventNonblockingStoreCallback(pipeline,node,key);
      store.submitGetRequest(key,callback);
    }
  }
;
  BlockingStoreRequest blockingStoreRequest=new BlockingStoreRequest(){
    public Object request(    Node node,    Store<ByteArray,byte[]> store){
      return store.get(key);
    }
  }
;
  Action configureNodes=createConfigureNodes(pipelineData,key,true);
  Action performRequests=createPerformParallelRequests(pipelineData,true,nonblockingStoreRequest);
  Action acknowledgeResponse=createAcknowledgeResponse(pipelineData,true,repairReads ? Event.RESPONSES_RECEIVED : Event.COMPLETED,Event.INSUFFICIENT_SUCCESSES);
  Action performSerialRequests=createPerformSerialRequests(pipelineData,key,true,blockingStoreRequest,repairReads ? Event.RESPONSES_RECEIVED : Event.COMPLETED,null);
  Action updateResults=createUpdateResults(pipelineData);
  Map<Event,Action> eventActions=new HashMap<Event,Action>();
  eventActions.put(Event.STARTED,configureNodes);
  eventActions.put(Event.CONFIGURED,performRequests);
  eventActions.put(Event.RESPONSE_RECEIVED,acknowledgeResponse);
  if (repairReads) {
    Action readRepair=createReadRepair(pipelineData,Event.COMPLETED);
    eventActions.put(Event.RESPONSES_RECEIVED,readRepair);
  }
  eventActions.put(Event.INSUFFICIENT_SUCCESSES,performSerialRequests);
  eventActions.put(Event.COMPLETED,updateResults);
  pipeline.setEventActions(eventActions);
  pipeline.addEvent(Event.STARTED);
  pipeline.processEvents(timeoutMs,TimeUnit.MILLISECONDS);
  List<Versioned<byte[]>> results=pipelineData.get();
  return results;
}
