{
  StoreUtils.assertValidKey(key);
  BasicPipelineData<List<Version>> pipelineData=new BasicPipelineData<List<Version>>();
  final Pipeline pipeline=new Pipeline(Operation.GET_VERSIONS);
  NonblockingStoreRequest storeRequest=new NonblockingStoreRequest(){
    public void request(    Node node,    NonblockingStore store){
      NonblockingStoreCallback callback=new BasicResponseCallback<ByteArray>(pipeline,node,key);
      store.submitGetVersionsRequest(key,callback);
    }
  }
;
  Action configureNodes=new ConfigureNodes<List<Version>,BasicPipelineData<List<Version>>>(pipelineData,Event.CONFIGURED,failureDetector,storeDef.getRequiredReads(),routingStrategy,key);
  Action performRequests=new PerformParallelRequests<List<Version>,BasicPipelineData<List<Version>>>(pipelineData,Event.NOP,storeDef.getPreferredReads(),nonblockingStores,storeRequest);
  Action acknowledgeResponse=new AcknowledgeResponse<List<Version>,BasicPipelineData<List<Version>>>(pipelineData,Event.COMPLETED,failureDetector,storeDef.getPreferredReads(),storeDef.getRequiredReads(),null);
  Map<Event,Action> eventActions=new HashMap<Event,Action>();
  eventActions.put(Event.STARTED,configureNodes);
  eventActions.put(Event.CONFIGURED,performRequests);
  eventActions.put(Event.RESPONSE_RECEIVED,acknowledgeResponse);
  pipeline.setEventActions(eventActions);
  pipeline.addEvent(Event.STARTED);
  pipeline.processEvents(timeoutMs,TimeUnit.MILLISECONDS);
  if (pipelineData.getFatalError() != null)   throw pipelineData.getFatalError();
  List<Version> results=new ArrayList<Version>();
  for (  Response<ByteArray,List<Version>> response : pipelineData.getResponses())   results.addAll(response.getValue());
  return results;
}
