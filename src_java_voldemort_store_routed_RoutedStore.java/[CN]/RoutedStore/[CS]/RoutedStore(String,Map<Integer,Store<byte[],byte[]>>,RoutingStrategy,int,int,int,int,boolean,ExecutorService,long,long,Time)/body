{
  if (requiredReads < 1)   throw new IllegalArgumentException("Cannot have a requiredReads number less than 1.");
  if (requiredWrites < 1)   throw new IllegalArgumentException("Cannot have a requiredWrites number less than 1.");
  if (preferredReads < requiredReads)   throw new IllegalArgumentException("preferredReads must be greater or equal to requiredReads.");
  if (preferredWrites < requiredWrites)   throw new IllegalArgumentException("preferredWrites must be greater or equal to requiredWrites.");
  if (preferredReads > innerStores.size())   throw new IllegalArgumentException("preferredReads is larger than the total number of stores!");
  if (preferredWrites > innerStores.size())   throw new IllegalArgumentException("preferredWrites is larger than the total number of stores!");
  this.name=name;
  this.innerStores=new ConcurrentHashMap<Integer,Store<byte[],byte[]>>(innerStores);
  this.routingStrategy=routingStrategy;
  this.preferredReads=preferredReads;
  this.requiredReads=requiredReads;
  this.preferredWrites=preferredWrites;
  this.requiredWrites=requiredWrites;
  this.repairReads=repairReads;
  this.executor=threadPool;
  this.readRepairer=new ReadRepairer<byte[],byte[]>();
  this.timeoutMs=timeoutMs;
  this.nodeBannageMs=nodeBannageMs;
  this.time=Utils.notNull(time);
}
