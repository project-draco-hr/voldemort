{
  if (storeDef.getRequiredReads() < 1)   throw new IllegalArgumentException("Cannot have a storeDef.getRequiredReads() number less than 1.");
  if (storeDef.getRequiredWrites() < 1)   throw new IllegalArgumentException("Cannot have a storeDef.getRequiredWrites() number less than 1.");
  if (storeDef.getPreferredReads() < storeDef.getRequiredReads())   throw new IllegalArgumentException("storeDef.getPreferredReads() must be greater or equal to storeDef.getRequiredReads().");
  if (storeDef.getPreferredWrites() < storeDef.getRequiredWrites())   throw new IllegalArgumentException("storeDef.getPreferredWrites() must be greater or equal to storeDef.getRequiredWrites().");
  if (storeDef.getPreferredReads() > innerStores.size())   throw new IllegalArgumentException("storeDef.getPreferredReads() is larger than the total number of nodes!");
  if (storeDef.getPreferredWrites() > innerStores.size())   throw new IllegalArgumentException("storeDef.getPreferredWrites() is larger than the total number of nodes!");
  this.name=name;
  this.innerStores=new ConcurrentHashMap<Integer,Store<ByteArray,byte[]>>(innerStores);
  this.repairReads=repairReads;
  this.executor=threadPool;
  this.readRepairer=new ReadRepairer<ByteArray,byte[]>();
  this.timeoutMs=timeoutMs;
  this.time=Utils.notNull(time);
  this.storeDef=storeDef;
  this.failureDetector=failureDetector;
  this.routingStrategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDef,cluster);
}
