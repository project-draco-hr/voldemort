{
  if (logger.isDebugEnabled()) {
    logger.debug("Gossiping key " + key);
  }
  Versioned<String> remoteVersioned=adminClient.metadataMgmtOps.getRemoteMetadata(node.getId(),key);
  Versioned<String> localVersioned=adminClient.metadataMgmtOps.getRemoteMetadata(metadataStore.getNodeId(),key);
switch (remoteVersioned.getVersion().compare(localVersioned.getVersion())) {
case AFTER:
{
      logger.info("Updating key " + key + " from "+ node);
      adminClient.metadataMgmtOps.updateRemoteMetadata(metadataStore.getNodeId(),key,remoteVersioned);
      if (logger.isDebugEnabled()) {
        logger.debug("Updated key " + key + ": "+ remoteVersioned);
      }
      break;
    }
case BEFORE:
{
    if (logger.isDebugEnabled()) {
      logger.debug("Remote(" + remoteVersioned + ") came before, allowing them to initiate Gossip");
    }
    break;
  }
case CONCURRENTLY:
{
  logger.error(key + " is concurrent between local node(" + localVersioned+ ") and remote at "+ node+ "("+ remoteVersioned+ ")");
  break;
}
}
}
