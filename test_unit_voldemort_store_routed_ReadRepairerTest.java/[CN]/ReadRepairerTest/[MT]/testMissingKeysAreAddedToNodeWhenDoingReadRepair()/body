{
  ByteArray key=TestUtils.toByteArray("key");
  byte[] value="foo".getBytes();
  Cluster cluster=VoldemortTestConstants.getThreeNodeCluster();
  StoreDefinition storeDef=ServerTestUtils.getStoreDef("test",3,3,3,2,2,RoutingStrategyType.CONSISTENT_STRATEGY);
  Map<Integer,Store<ByteArray,byte[]>> subStores=Maps.newHashMap();
  for (int a=0; a < 3; a++) {
    subStores.put(Iterables.get(cluster.getNodes(),a).getId(),new InMemoryStorageEngine<ByteArray,byte[]>("test"));
  }
  FailureDetectorConfig failureDetectorConfig=new FailureDetectorConfig().setImplementationClassName(failureDetectorClass.getName()).setBannagePeriod(1000).setNodes(cluster.getNodes()).setStoreVerifier(create(subStores)).setTime(time);
  failureDetector=create(failureDetectorConfig,false);
  RoutedStore store=new RoutedStore("test",subStores,cluster,storeDef,1,true,1000L,failureDetector);
  recordException(failureDetector,Iterables.get(cluster.getNodes(),0));
  store.put(key,new Versioned<byte[]>(value));
  recordSuccess(failureDetector,Iterables.get(cluster.getNodes(),0));
  time.sleep(2000);
  assertEquals(2,store.get(key).size());
  assertEquals(3,store.get(key).size());
  ByteArray anotherKey=TestUtils.toByteArray("anotherKey");
  recordException(failureDetector,Iterables.get(cluster.getNodes(),0));
  store.put(anotherKey,new Versioned<byte[]>(value));
  recordSuccess(failureDetector,Iterables.get(cluster.getNodes(),0));
  assertEquals(2,store.getAll(Arrays.asList(anotherKey)).get(anotherKey).size());
  assertEquals(3,store.get(anotherKey).size());
}
