{
  setupParser();
  OptionSet options=getValidOptions(args);
  int dropZoneId=CmdUtils.valueOf(options,"drop-zoneid",Zone.UNSET_ZONE_ID);
  String outputDir=null;
  if (options.has("output-dir")) {
    outputDir=(String)options.valueOf("output-dir");
  }
  String initialClusterXML=(String)options.valueOf("current-cluster");
  Cluster initialCluster=new ClusterMapper().readCluster(new File(initialClusterXML));
  Set<Integer> originalPartitions=new HashSet<Integer>();
  for (  Integer zoneId : initialCluster.getZoneIds()) {
    originalPartitions.addAll(initialCluster.getPartitionIdsInZone(zoneId));
  }
  Cluster intermediateCluster=RebalanceUtils.vacateZone(initialCluster,dropZoneId);
  Cluster finalCluster=RebalanceUtils.dropZone(intermediateCluster,dropZoneId);
  if (initialCluster.getNumberOfPartitions() != finalCluster.getNumberOfPartitions()) {
    logger.error("The number of partitions in the initial and the final cluster is not equal \n");
  }
  Set<Integer> finalPartitions=new HashSet<Integer>();
  for (  Integer zoneId : finalCluster.getZoneIds()) {
    finalPartitions.addAll(finalCluster.getPartitionIdsInZone(zoneId));
  }
  if (!originalPartitions.equals(finalPartitions)) {
    logger.error("The list of partition ids in the initial and the final cluster doesn't match \n ");
  }
  RebalanceUtils.dumpClusterToFile(outputDir,RebalanceUtils.finalClusterFileName,finalCluster);
  logger.info("Generating the adjusted stores.xml..");
  String initialStoresXML=(String)options.valueOf("current-stores");
  List<StoreDefinition> initialStoreDefs=new StoreDefinitionsMapper().readStoreList(new File(initialStoresXML));
  List<StoreDefinition> finalStoreDefs=RebalanceUtils.dropZone(initialStoreDefs,dropZoneId);
  RebalanceUtils.dumpStoreDefsToFile(outputDir,RebalanceUtils.finalStoresFileName,finalStoreDefs);
}
