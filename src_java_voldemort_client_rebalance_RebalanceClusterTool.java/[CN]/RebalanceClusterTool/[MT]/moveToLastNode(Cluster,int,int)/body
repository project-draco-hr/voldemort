{
  Node lastNode=candidate.getNodeById(candidate.getNumberOfNodes() - 1);
  if (lastNode.getPartitionIds().contains(partition))   return null;
  List<Node> nodes=new ArrayList<Node>();
  for (int i=0; i < candidate.getNumberOfNodes() - 1; i++) {
    Node currNode=candidate.getNodeById(i);
    if (currNode.getPartitionIds().contains(partition)) {
      List<Integer> currNodePartitions=new ArrayList<Integer>();
      for (      int oldPartition : currNode.getPartitionIds()) {
        if (oldPartition != partition)         currNodePartitions.add(oldPartition);
      }
      nodes.add(new Node(i,currNode.getHost(),currNode.getHttpPort(),currNode.getSocketPort(),currNode.getAdminPort(),currNodePartitions));
    }
 else     nodes.add(currNode);
  }
  List<Integer> lastNodePartitions=new ArrayList<Integer>();
  lastNodePartitions.addAll(lastNode.getPartitionIds());
  lastNodePartitions.add(partition);
  Collections.sort(lastNodePartitions);
  nodes.add(new Node(lastNode.getId(),lastNode.getHost(),lastNode.getHttpPort(),lastNode.getSocketPort(),lastNode.getAdminPort(),lastNodePartitions));
  Cluster attempt=new Cluster(candidate.getName(),nodes);
  if (hasMultipleCopies(attempt) || getRemappedReplicaCount(attempt) > maxRemap)   return null;
  return attempt;
}
