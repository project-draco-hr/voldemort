{
  Set<Integer> partitionsNotMoved=Sets.difference(allPartitions,partitionsMoved);
  if (partitionsNotMoved.isEmpty())   return candidate;
  if (isGoodEnough(candidate,minPartitions))   return candidate;
  for (int i=candidate.getNumberOfPartitions() - 1; i >= 0; i--) {
    if (!partitionsMoved.contains(i)) {
      Cluster attempt=moveToLastNode(candidate,i,maxRemap);
      if (attempt != null) {
        return createTargetCluster(attempt,minPartitions,maxRemap,Sets.union(partitionsMoved,ImmutableSet.of(i)),allPartitions);
      }
    }
  }
  return candidate;
}
