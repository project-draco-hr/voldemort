{
  super(name);
  this.props=props;
  this.log=Logger.getLogger(name);
  this.nodeId=props.getInt("check.node",0);
  List<String> inputDirsPathString=VoldemortUtils.getCommaSeparatedStringValues(props.getString("build.input.path"),"input directory");
  this.storeNames=VoldemortUtils.getCommaSeparatedStringValues(props.getString("push.store.name"),"store name");
  if (this.storeNames.size() != inputDirsPathString.size()) {
    throw new RuntimeException("Number of stores ( " + this.storeNames.size() + " ) is not equal to number of input directories ( "+ inputDirsPathString.size()+ " )");
  }
  this.inputDirsPerStore=Maps.newHashMap();
  int index=0;
  for (  String inputDirPathString : inputDirsPathString) {
    this.inputDirsPerStore.put(storeNames.get(index),getPath(inputDirPathString));
    index++;
  }
  String outputDirString=props.getString("build.output.dir","/tmp/voldemort-build-and-push-temp-" + new Random().nextLong());
  this.outputDir=getPath(outputDirString);
  log.info("Storing output of all push jobs in " + this.outputDir);
  this.clusterUrls=VoldemortUtils.getCommaSeparatedStringValues(props.getString("push.cluster"),"cluster urls");
}
