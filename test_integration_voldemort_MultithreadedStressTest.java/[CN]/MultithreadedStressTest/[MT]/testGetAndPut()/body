{
  final AtomicInteger obsoletes=new AtomicInteger(0);
  final CountDownLatch isDone=new CountDownLatch(numberOfRequests);
  for (int i=0; i < numberOfRequests; i++) {
    final int index=i % numberOfValues;
    service.execute(new Runnable(){
      public void run(){
        boolean done=false;
        while (!done) {
          try {
            byte[] key=Integer.toString(index).getBytes();
            List<Versioned<byte[]>> found=store.get(key,null);
            if (found.size() > 1) {
              throw new RuntimeException("Found multiple versions: " + found);
            }
 else             if (found.size() == 1) {
              Versioned<byte[]> versioned=found.get(0);
              byte[] valueBytes=Integer.toString(MultithreadedStressTest.this.value.getAndIncrement()).getBytes();
              versioned.setObject(valueBytes);
              store.put(key,versioned,null);
              done=true;
            }
 else             if (found.size() == 0) {
              throw new RuntimeException("No values found!");
            }
          }
 catch (          ObsoleteVersionException e) {
            obsoletes.getAndIncrement();
          }
 finally {
            isDone.countDown();
          }
        }
      }
    }
);
  }
  isDone.await();
  System.err.println("Number of obsoletes: " + obsoletes.get());
  System.exit(0);
}
