{
  parser=new OptionParser();
  parser.accepts("help","Print usage information");
  parser.accepts("url","Url to bootstrap from ").withRequiredArg().describedAs("url");
  parser.accepts("donor-based","Execute donor-based rebalancing.");
  parser.accepts("stealer-based","Execute stealer-based rebalancing (default).");
  parser.accepts("parallelism","Number of servers running stealer- or donor-based tasks in parallel [ Default:" + RebalanceController.MAX_PARALLEL_REBALANCING + " ]").withRequiredArg().ofType(Integer.class).describedAs("parallelism");
  parser.accepts("proxy-pause","Time, in seconds, to pause between changing cluster metadata and starting rebalance tasks on server. [ Default:" + RebalanceController.PROXY_PAUSE_IN_SECONDS + " ]").withRequiredArg().ofType(Long.class).describedAs("proxy pause");
  parser.accepts("final-cluster","Path to final cluster xml").withRequiredArg().describedAs("cluster.xml");
  parser.accepts("final-stores","Path to final store definition xml. Needed for zone expansion.").withRequiredArg().describedAs("stores.xml");
  parser.accepts("batch-size","Number of primary partitions to move together [ RebalancePlan parameter; Default : " + RebalancePlan.BATCH_SIZE + " ]").withRequiredArg().ofType(Integer.class).describedAs("num-primary-partitions");
  parser.accepts("output-dir","RebalancePlan parameter; Output directory in which to dump per-batch metadata").withRequiredArg().ofType(String.class).describedAs("path");
  parser.accepts("no-reset-quota","Do NOT reset the quota value for all stores on all nodes after rebalance");
}
