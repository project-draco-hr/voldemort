{
  setupParser();
  OptionSet options=getValidOptions(args);
  String bootstrapURL=(String)options.valueOf("url");
  RebalanceController rebalanceController=new RebalanceController(bootstrapURL,1,2,TimeUnit.DAYS.toSeconds(30),true,false);
  Cluster currentCluster=rebalanceController.getCurrentCluster();
  List<StoreDefinition> currentStoreDefs=rebalanceController.getCurrentStoreDefs();
  RebalanceUtils.validateClusterStores(currentCluster,currentStoreDefs);
  String finalClusterXML=(String)options.valueOf("final-cluster");
  Cluster finalCluster=new ClusterMapper().readCluster(new File(finalClusterXML));
  List<StoreDefinition> finalStoreDefs=currentStoreDefs;
  if (options.has("final-stores")) {
    String storesXML=(String)options.valueOf("final-stores");
    finalStoreDefs=new StoreDefinitionsMapper().readStoreList(new File(storesXML));
  }
  RebalanceUtils.validateClusterStores(finalCluster,finalStoreDefs);
  RebalanceUtils.validateCurrentFinalCluster(currentCluster,finalCluster);
  int batchSize=CmdUtils.valueOf(options,"batch",RebalanceClientConfig.PRIMARY_PARTITION_BATCH_SIZE);
  String outputDir=null;
  if (options.has("output-dir")) {
    outputDir=(String)options.valueOf("output-dir");
  }
  boolean stealerBased=true;
  if (options.has("donor-based")) {
    stealerBased=false;
  }
  RebalancePlan rebalancePlan=new RebalancePlan(currentCluster,currentStoreDefs,finalCluster,finalStoreDefs,stealerBased,batchSize,outputDir);
  rebalanceController.rebalance(rebalancePlan);
}
