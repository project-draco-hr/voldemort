{
  setupParser();
  OptionSet options=getValidOptions(args);
  String bootstrapURL=(String)options.valueOf("url");
  int parallelism=RebalanceController.MAX_PARALLEL_REBALANCING;
  if (options.has("parallelism")) {
    parallelism=(Integer)options.valueOf("parallelism");
  }
  long proxyPauseSec=RebalanceController.PROXY_PAUSE_IN_SECONDS;
  if (options.has("proxy-pause")) {
    proxyPauseSec=(Long)options.valueOf("proxy-pause");
  }
  RebalanceController rebalanceController=new RebalanceController(bootstrapURL,parallelism,proxyPauseSec);
  Cluster currentCluster=rebalanceController.getCurrentCluster();
  List<StoreDefinition> currentStoreDefs=rebalanceController.getCurrentStoreDefs();
  RebalanceUtils.validateClusterStores(currentCluster,currentStoreDefs);
  String finalClusterXML=(String)options.valueOf("final-cluster");
  Cluster finalCluster=new ClusterMapper().readCluster(new File(finalClusterXML));
  List<StoreDefinition> finalStoreDefs=currentStoreDefs;
  if (options.has("final-stores")) {
    String storesXML=(String)options.valueOf("final-stores");
    finalStoreDefs=new StoreDefinitionsMapper().readStoreList(new File(storesXML));
  }
  RebalanceUtils.validateClusterStores(finalCluster,finalStoreDefs);
  RebalanceUtils.validateCurrentFinalCluster(currentCluster,finalCluster);
  int batchSize=CmdUtils.valueOf(options,"batch-size",RebalancePlan.BATCH_SIZE);
  String outputDir=null;
  if (options.has("output-dir")) {
    outputDir=(String)options.valueOf("output-dir");
  }
  RebalancePlan rebalancePlan=new RebalancePlan(currentCluster,currentStoreDefs,finalCluster,finalStoreDefs,batchSize,outputDir);
  boolean resetQuota=options.has("reset-quota");
  Map<Integer,Boolean> mapNodeToQuotaEnforcingEnabled=Maps.newHashMap();
  AdminClient adminClient=AdminToolUtils.getAdminClient(bootstrapURL);
  final Set<Integer> nodeIds=rebalancePlan.getFinalCluster().getNodeIds();
  if (resetQuota) {
    for (    Integer nodeId : nodeIds) {
      boolean quotaEnforcement=Boolean.parseBoolean(adminClient.metadataMgmtOps.getRemoteMetadata(nodeId,MetadataStore.QUOTA_ENFORCEMENT_ENABLED_KEY).getValue());
      mapNodeToQuotaEnforcingEnabled.put(nodeId,quotaEnforcement);
    }
    adminClient.metadataMgmtOps.updateRemoteMetadata(nodeIds,MetadataStore.QUOTA_ENFORCEMENT_ENABLED_KEY,Boolean.toString(false));
  }
  rebalanceController.rebalance(rebalancePlan);
  if (resetQuota) {
    for (    Integer nodeId : nodeIds) {
      boolean quotaEnforcement=mapNodeToQuotaEnforcingEnabled.get(nodeId);
      adminClient.metadataMgmtOps.updateRemoteMetadata(Arrays.asList(nodeId),MetadataStore.QUOTA_ENFORCEMENT_ENABLED_KEY,Boolean.toString(quotaEnforcement));
    }
    for (    StoreDefinition storeDef : finalStoreDefs) {
      String storeName=storeDef.getName();
      adminClient.quotaMgmtOps.rebalanceQuota(storeName);
    }
  }
}
