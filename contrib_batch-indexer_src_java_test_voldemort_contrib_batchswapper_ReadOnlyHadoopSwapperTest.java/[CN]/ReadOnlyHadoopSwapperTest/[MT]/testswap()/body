{
  Store<ByteArray,byte[]> store1=server1.getStoreMap().get(storeName);
  Store<ByteArray,byte[]> store2=server2.getStoreMap().get(storeName);
  SerializerDefinition serDef=new SerializerDefinition("json","'string'");
  Serializer<Object> serializer=(Serializer<Object>)new DefaultSerializerFactory().getSerializer(serDef);
  for (int i=1; i < 1000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    byte[] value=serializer.toBytes("value" + i);
    assertEquals("either store1 or store2 will have the key:'key-" + i + "'",true,store1.get(key).size() > 0 || store2.get(key).size() > 0);
  }
  final String newIndexDir=makeReadOnlyIndex(2000,3000);
  ReadOnlyBatchIndexHadoopSwapper indexSwapper=new ReadOnlyBatchIndexHadoopSwapper(){
    @Override public void configure(    JobConf conf){
      conf.set("voldemort.cluster.local.filePath",clusterFile);
      conf.set("voldemort.store.name",storeName);
      conf.set("source.path",newIndexDir);
      conf.set("destination.path",baseDir + File.separatorChar + (int)(Math.random() * 1000));
    }
    @Override public Class<? extends SwapperMapper> getSwapperMapperClass(){
      return SwapperMapper.class;
    }
  }
;
  indexSwapper.run(null);
  for (int i=1; i < 1000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    byte[] value=serializer.toBytes("value" + i);
    assertEquals("store 1 get for key:" + i + " should be empty",0,store1.get(key).size());
    assertEquals("store 2 get for key:" + i + " should be empty",0,store2.get(key).size());
  }
  for (int i=2000; i < 3000; i++) {
    ByteArray key=new ByteArray(serializer.toBytes("key" + i));
    byte[] value=serializer.toBytes("value" + i);
    assertEquals("either store1 or store2 will have the key:'key-" + i + "'",true,store1.get(key).size() > 0 || store2.get(key).size() > 0);
  }
}
