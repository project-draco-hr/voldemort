{
  if (logger.isInfoEnabled()) {
    logger.info("Connecting to bootstrap server: " + url);
  }
  Properties clientProps=new Properties();
  clientProps.put("connection_timeout_ms","2500");
  clientProps.put("max_connections",Integer.toString(keyParallelism));
  clientProps.put("routing_timeout_ms","10000");
  clientProps.put("socket_timeout_ms","10000");
  clientProps.put("failuredetector_threshold","10");
  this.adminClient=new AdminClient(url,new AdminClientConfig(),new ClientConfig(clientProps));
  this.cluster=adminClient.getAdminClientCluster();
  this.storeDefinitions=adminClient.metadataMgmtOps.getRemoteStoreDefList(0).getValue();
  this.storeNamesSet=new HashSet<String>();
  for (  StoreDefinition storeDefinition : storeDefinitions) {
    String storeName=storeDefinition.getName();
    if (storeNames != null) {
      if (!storeNames.contains(storeName)) {
        logger.debug("Will not sample store " + storeName + " since it is not in list of storeNames provided on command line.");
        continue;
      }
    }
    this.storeNamesSet.add(storeName);
  }
  if (storeNames != null) {
    List<String> badStoreNames=new LinkedList<String>();
    for (    String storeName : storeNames) {
      if (!this.storeNamesSet.contains(storeName)) {
        badStoreNames.add(storeName);
      }
    }
    if (badStoreNames.size() > 0) {
      Utils.croak("Some storeNames provided on the command line were not found on this cluster: " + badStoreNames);
    }
  }
  this.inDir=inDir;
  this.outDir=outDir;
  this.kvFetcherService=Executors.newFixedThreadPool(keyParallelism);
  this.progressPeriodOps=progressPeriodOps;
  this.outputBatchSize=outputBatchSize;
  this.startTimeMs=System.currentTimeMillis();
}
