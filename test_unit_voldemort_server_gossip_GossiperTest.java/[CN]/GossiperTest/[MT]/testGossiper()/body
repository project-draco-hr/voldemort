{
  Cluster newCluster=null;
  boolean startedAdditionalServer=false;
  while (!startedAdditionalServer) {
    try {
      newCluster=attemptStartAdditionalServer();
      startedAdditionalServer=true;
    }
 catch (    IOException ioe) {
      logger.warn("Caught an IOException when attempting to start additional server. Will print stacktrace and then attempt to start additional server again.");
      ioe.printStackTrace();
    }
  }
  AdminClient localAdminClient=getAdminClient(newCluster);
  Versioned<String> versionedClusterXML=localAdminClient.getRemoteMetadata(3,MetadataStore.CLUSTER_KEY);
  Version version=versionedClusterXML.getVersion();
  ((VectorClock)version).incrementVersion(3,((VectorClock)version).getTimestamp() + 1);
  ((VectorClock)version).incrementVersion(0,((VectorClock)version).getTimestamp() + 1);
  localAdminClient.updateRemoteMetadata(0,MetadataStore.CLUSTER_KEY,versionedClusterXML);
  localAdminClient.updateRemoteMetadata(3,MetadataStore.CLUSTER_KEY,versionedClusterXML);
  try {
    Thread.sleep(500);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  final Cluster newFinalCluster=newCluster;
  try {
    TestUtils.assertWithBackoff(5000,new Attempt(){
      public void checkCondition(){
        int serversSeen=0;
        for (        VoldemortServer server : servers) {
          Cluster clusterAtServer=server.getMetadataStore().getCluster();
          int nodeId=server.getMetadataStore().getNodeId();
          assertEquals("server " + nodeId + " has heard "+ " the gossip about number of nodes",clusterAtServer.getNumberOfNodes(),newFinalCluster.getNumberOfNodes());
          assertEquals("server " + nodeId + " has heard "+ " the gossip about partitions",clusterAtServer.getNodeById(nodeId).getPartitionIds(),newFinalCluster.getNodeById(nodeId).getPartitionIds());
          serversSeen++;
        }
        assertEquals("saw all servers",serversSeen,servers.size());
      }
    }
);
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
