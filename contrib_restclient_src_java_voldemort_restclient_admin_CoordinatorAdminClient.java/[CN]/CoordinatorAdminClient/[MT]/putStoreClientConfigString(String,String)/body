{
  String responseMessage=null;
  Boolean success=false;
  try {
    StringBuilder URIStringBuilder=new StringBuilder().append(coordinatorUrl).append(URL_SEPARATOR).append(STORE_CLIENT_CONFIG_OPS).append(URL_SEPARATOR);
    RestRequestBuilder requestBuilder=new RestRequestBuilder(new URI(URIStringBuilder.toString()));
    byte[] payload=storeClientConfigAvro.getBytes("UTF-8");
    requestBuilder.setMethod(requestType.POST.toString());
    requestBuilder.setEntity(payload);
    requestBuilder.setHeader(CONTENT_TYPE,"binary");
    requestBuilder.setHeader(CONTENT_LENGTH,"" + payload.length);
    String timeoutStr=Long.toString(this.config.getTimeoutConfig().getOperationTimeout(VoldemortOpCode.PUT_OP_CODE));
    requestBuilder.setHeader(RestMessageHeaders.X_VOLD_REQUEST_TIMEOUT_MS,timeoutStr);
    requestBuilder=setCommonRequestHeader(requestBuilder);
    RestRequest request=requestBuilder.build();
    Future<RestResponse> future=client.restRequest(request);
    RestResponse response=future.get();
    final ByteString entity=response.getEntity();
    if (entity == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Empty response !");
      }
      responseMessage="Received empty response from " + coordinatorUrl;
    }
 else {
      responseMessage=entity.asString("UTF-8");
      success=true;
    }
  }
 catch (  Exception e) {
    if (e.getCause() instanceof RestException) {
      responseMessage=((RestException)e.getCause()).getResponse().getEntity().asString("UTF-8");
    }
 else {
      responseMessage="An exception other than RestException happens!";
    }
    handleRequestAndResponseException(e);
  }
 finally {
    System.out.println(responseMessage);
  }
  return success;
}
