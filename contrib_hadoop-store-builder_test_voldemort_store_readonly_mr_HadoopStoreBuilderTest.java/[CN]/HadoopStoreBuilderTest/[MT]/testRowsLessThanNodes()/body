{
  Map<String,String> values=new HashMap<String,String>();
  File testDir=TestUtils.createTempDir();
  File tempDir=new File(testDir,"temp");
  File outputDir=new File(testDir,"output");
  File inputFile=File.createTempFile("input",".txt",testDir);
  inputFile.deleteOnExit();
  StringBuilder contents=new StringBuilder();
  for (  Map.Entry<String,String> entry : values.entrySet())   contents.append(entry.getKey() + "\t" + entry.getValue()+ "\n");
  FileUtils.writeStringToFile(inputFile,contents.toString());
  String storeName="test";
  SerializerDefinition serDef=new SerializerDefinition("string");
  Cluster cluster=ServerTestUtils.getLocalCluster(10);
  StoreDefinition def=new StoreDefinitionBuilder().setName(storeName).setType(ReadOnlyStorageConfiguration.TYPE_NAME).setKeySerializer(serDef).setValueSerializer(serDef).setRoutingPolicy(RoutingTier.CLIENT).setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY).setReplicationFactor(1).setPreferredReads(1).setRequiredReads(1).setPreferredWrites(1).setRequiredWrites(1).build();
  HadoopStoreBuilder builder=new HadoopStoreBuilder(new Configuration(),TextStoreMapper.class,TextInputFormat.class,cluster,def,new Path(tempDir.getAbsolutePath()),new Path(outputDir.getAbsolutePath()),new Path(inputFile.getAbsolutePath()),CheckSumType.MD5,saveKeys,false,64 * 1024,-1,false,0L);
  builder.build();
  Assert.assertEquals(cluster.getNumberOfNodes(),outputDir.listFiles().length);
  for (  File f : outputDir.listFiles()) {
    Assert.assertFalse(f.toString().contains("node--1"));
  }
  for (int nodeId=0; nodeId < 10; nodeId++) {
    File nodeFile=new File(outputDir,"node-" + Integer.toString(nodeId));
    Assert.assertTrue(nodeFile.exists());
    Assert.assertTrue(new File(nodeFile,".metadata").exists());
  }
}
