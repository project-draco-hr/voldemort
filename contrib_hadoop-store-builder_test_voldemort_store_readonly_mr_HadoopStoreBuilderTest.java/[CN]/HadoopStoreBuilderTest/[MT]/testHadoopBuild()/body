{
  Map<String,String> values=new HashMap<String,String>();
  File testDir=TestUtils.createTempDir();
  File tempDir=new File(testDir,"temp");
  File outputDir=new File(testDir,"output");
  File storeDir=TestUtils.createTempDir(testDir);
  for (int i=0; i < 200; i++)   values.put(Integer.toString(i),Integer.toBinaryString(i));
  File inputFile=File.createTempFile("input",".txt",testDir);
  inputFile.deleteOnExit();
  StringBuilder contents=new StringBuilder();
  for (  Map.Entry<String,String> entry : values.entrySet())   contents.append(entry.getKey() + "\t" + entry.getValue()+ "\n");
  FileUtils.writeStringToFile(inputFile,contents.toString());
  String storeName="test";
  SerializerDefinition serDef=new SerializerDefinition("string");
  Cluster cluster=ServerTestUtils.getLocalCluster(1);
  StoreDefinition def=new StoreDefinition(storeName,"read-only",serDef,serDef,RoutingTier.CLIENT,RoutingStrategyType.CONSISTENT_STRATEGY,1,1,1,1,1,null,null);
  HadoopStoreBuilder builder=new HadoopStoreBuilder(new Configuration(),TextStoreMapper.class,TextInputFormat.class,cluster,def,2,64 * 1024,new Path(tempDir.getAbsolutePath()),new Path(outputDir.getAbsolutePath()),new Path(inputFile.getAbsolutePath()));
  builder.build();
  File versionDir=new File(storeDir,"version-0");
  versionDir.mkdirs();
  assertTrue("Rename failed.",new File(outputDir,"node-0").renameTo(versionDir));
  @SuppressWarnings("unchecked") Serializer<Object> serializer=(Serializer<Object>)new DefaultSerializerFactory().getSerializer(serDef);
  Store<Object,Object> store=new SerializingStore<Object,Object>(new ReadOnlyStorageEngine(storeName,storeDir,1),serializer,serializer);
  for (  Map.Entry<String,String> entry : values.entrySet()) {
    List<Versioned<Object>> found=store.get(entry.getKey());
    assertEquals("Incorrect number of results",1,found.size());
    assertEquals(entry.getValue(),found.get(0).getValue());
  }
}
