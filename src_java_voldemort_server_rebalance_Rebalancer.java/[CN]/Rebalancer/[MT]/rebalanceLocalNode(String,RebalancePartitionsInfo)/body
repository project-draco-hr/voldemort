{
  if (!acquireRebalancingPermit())   return -1;
  int requestId=asyncRunner.getUniqueRequestId();
  asyncRunner.submitOperation(requestId,new AsyncOperation(requestId,stealInfo.toString()){
    private int migratePartitionsAsyncId=-1;
    @Override public void operate() throws Exception {
      AdminClient adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,metadataStore.getCluster());
      try {
        logger.info("Rebalancer: rebalance " + stealInfo + " starting.");
        checkAndCreateRedirectingSocketStore(storeName,adminClient.getAdminClientCluster().getNodeById(stealInfo.getDonorId()));
        checkCurrentState(metadataStore,stealInfo);
        setRebalancingState(metadataStore,stealInfo);
        migratePartitionsAsyncId=adminClient.migratePartitions(stealInfo.getDonorId(),metadataStore.getNodeId(),storeName,stealInfo.getPartitionList(),null);
        adminClient.waitForCompletion(metadataStore.getNodeId(),migratePartitionsAsyncId,voldemortConfig.getAdminSocketTimeout(),TimeUnit.SECONDS);
        logger.info("Rebalancer: rebalance " + stealInfo + " completed successfully.");
        metadataStore.cleanAllRebalancingState();
        if (voldemortConfig.isDeleteAfterRebalancingEnabled()) {
          logger.warn("Deleting data from donorNode after rebalancing !!");
          adminClient.deletePartitions(stealInfo.getDonorId(),storeName,stealInfo.getPartitionList(),null);
          logger.info("Deleted partitions " + stealInfo.getPartitionList() + " from donorNode:"+ stealInfo.getDonorId());
        }
      }
  finally {
        releaseRebalancingPermit();
        adminClient.stop();
        migratePartitionsAsyncId=-1;
      }
    }
    @Override @JmxGetter(name="asyncTaskStatus") public AsyncOperationStatus getStatus(){
      if (-1 != migratePartitionsAsyncId)       try {
        updateStatus(asyncRunner.getStatus(migratePartitionsAsyncId));
      }
 catch (      Exception e) {
      }
      return super.getStatus();
    }
  }
);
  return requestId;
}
