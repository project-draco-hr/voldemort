{
  Cluster currentCluster=metadataStore.getCluster();
  List<StoreDefinition> currentStoreDefs=metadataStore.getStoreDefList();
  logger.info("Server doing rebalance state change with options [ cluster metadata change - " + changeClusterAndStoresMetadata + " ], [ changing rebalancing state - "+ changeRebalanceState+ " ], [ changing swapping RO - "+ swapRO+ " ], [ rollback - "+ rollback+ " ]");
  List<RebalancePartitionsInfo> completedRebalancePartitionsInfo=Lists.newArrayList();
  List<String> swappedStoreNames=Lists.newArrayList();
  boolean completedClusterAndStoresChange=false;
  boolean completedRebalanceSourceClusterChange=false;
  Cluster previousRebalancingSourceCluster=null;
  List<StoreDefinition> previousRebalancingSourceStores=null;
  try {
    if (changeRebalanceState) {
      try {
        previousRebalancingSourceCluster=metadataStore.getRebalancingSourceCluster();
        previousRebalancingSourceStores=metadataStore.getRebalancingSourceStores();
        if (!rollback) {
          changeClusterAndStores(MetadataStore.REBALANCING_SOURCE_CLUSTER_XML,currentCluster,MetadataStore.REBALANCING_SOURCE_STORES_XML,currentStoreDefs);
          completedRebalanceSourceClusterChange=true;
          for (          RebalancePartitionsInfo info : rebalancePartitionsInfo) {
            metadataStore.addRebalancingState(info);
            completedRebalancePartitionsInfo.add(info);
          }
        }
 else {
          changeClusterAndStores(MetadataStore.REBALANCING_SOURCE_CLUSTER_XML,null,MetadataStore.REBALANCING_SOURCE_STORES_XML,null);
          completedRebalanceSourceClusterChange=true;
          for (          RebalancePartitionsInfo info : rebalancePartitionsInfo) {
            metadataStore.deleteRebalancingState(info);
            completedRebalancePartitionsInfo.add(info);
          }
        }
      }
 catch (      Exception e) {
        throw new VoldemortException(e);
      }
    }
    if (changeClusterAndStoresMetadata) {
      logger.info("Switching cluster metadata from " + currentCluster + " to "+ cluster);
      logger.info("Switching stores metadata from " + currentStoreDefs + " to "+ storeDefs);
      changeClusterAndStores(MetadataStore.CLUSTER_KEY,cluster,MetadataStore.STORES_KEY,storeDefs);
      completedClusterAndStoresChange=true;
    }
    if (swapRO) {
      swapROStores(swappedStoreNames,false);
    }
  }
 catch (  VoldemortException e) {
    logger.error("Got exception while changing state, now rolling back changes",e);
    if (completedClusterAndStoresChange) {
      try {
        logger.info("Rolling back cluster.xml to " + currentCluster);
        logger.info("Rolling back stores.xml to " + currentStoreDefs);
        changeClusterAndStores(MetadataStore.CLUSTER_KEY,currentCluster,MetadataStore.STORES_KEY,currentStoreDefs);
      }
 catch (      Exception exception) {
        logger.error("Error while rolling back cluster metadata to " + currentCluster + " Stores metadata to "+ currentStoreDefs,exception);
      }
    }
    if (swappedStoreNames.size() > 0) {
      try {
        swapROStores(swappedStoreNames,true);
      }
 catch (      Exception exception) {
        logger.error("Error while swapping back to old state ",exception);
      }
    }
    if (completedRebalancePartitionsInfo.size() > 0) {
      if (!rollback) {
        for (        RebalancePartitionsInfo info : completedRebalancePartitionsInfo) {
          try {
            metadataStore.deleteRebalancingState(info);
          }
 catch (          Exception exception) {
            logger.error("Error while deleting back rebalance info during error rollback " + info,exception);
          }
        }
      }
 else {
        for (        RebalancePartitionsInfo info : completedRebalancePartitionsInfo) {
          try {
            metadataStore.addRebalancingState(info);
          }
 catch (          Exception exception) {
            logger.error("Error while adding back rebalance info during error rollback " + info,exception);
          }
        }
      }
    }
    if (completedRebalanceSourceClusterChange) {
      logger.info("Reverting the REBALANCING_SOURCE_CLUSTER_XML back to " + previousRebalancingSourceCluster);
      logger.info("Reverting the REBALANCING_SOURCE_STORES_XML back to " + previousRebalancingSourceStores);
      changeClusterAndStores(MetadataStore.REBALANCING_SOURCE_CLUSTER_XML,previousRebalancingSourceCluster,MetadataStore.REBALANCING_SOURCE_STORES_XML,previousRebalancingSourceStores);
    }
    throw e;
  }
}
