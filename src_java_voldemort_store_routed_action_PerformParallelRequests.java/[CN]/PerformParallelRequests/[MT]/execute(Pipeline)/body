{
  List<Node> nodes=pipelineData.getNodes();
  int attempts=Math.min(preferred,nodes.size());
  final Map<Integer,Response<ByteArray,Object>> responses=new ConcurrentHashMap<Integer,Response<ByteArray,Object>>();
  final CountDownLatch latch=new CountDownLatch(attempts);
  if (logger.isTraceEnabled())   logger.trace("Attempting " + attempts + " "+ pipeline.getOperation().getSimpleName()+ " operations in parallel for key "+ key);
  final AtomicBoolean isResponseProcessed=new AtomicBoolean(false);
  for (int i=0; i < attempts; i++) {
    final Node node=nodes.get(i);
    pipelineData.incrementNodeIndex();
    final long startMs=logger.isDebugEnabled() ? System.currentTimeMillis() : -1;
    NonblockingStoreCallback callback=new NonblockingStoreCallback(){
      public void requestComplete(      Object result,      long requestTime){
        if (logger.isTraceEnabled())         logger.trace(pipeline.getOperation().getSimpleName() + " response received (" + requestTime+ " ms.) from node "+ node.getId()+ "for key "+ key);
        Response<ByteArray,Object> response=new Response<ByteArray,Object>(node,key,result,requestTime);
        if (logger.isDebugEnabled())         logger.debug("Finished " + pipeline.getOperation().getSimpleName() + " for key "+ ByteUtils.toHexString(key.get())+ " (keyRef: "+ System.identityHashCode(key)+ "); started at "+ startMs+ " took "+ requestTime+ " ms on node "+ node.getId()+ "("+ node.getHost()+ ")");
        responses.put(node.getId(),response);
        latch.countDown();
        if (isResponseProcessed.get() && response.getValue() instanceof Exception) {
          if (response.getValue() instanceof InvalidMetadataException) {
            pipelineData.reportException((InvalidMetadataException)response.getValue());
            logger.warn("Received invalid metadata problem after a successful " + pipeline.getOperation().getSimpleName() + " call on node "+ node.getId()+ ", store '"+ pipelineData.getStoreName()+ "' for key "+ key);
          }
 else {
            handleResponseError(response,pipeline,failureDetector);
          }
        }
      }
    }
;
    if (logger.isTraceEnabled())     logger.trace("Submitting " + pipeline.getOperation().getSimpleName() + " request on node "+ node.getId()+ " for key "+ key);
    NonblockingStore store=nonblockingStores.get(node.getId());
    if (pipeline.getOperation() == Operation.GET)     store.submitGetRequest(key,transforms,callback,timeoutMs);
 else     if (pipeline.getOperation() == Operation.GET_VERSIONS)     store.submitGetVersionsRequest(key,callback,timeoutMs);
 else     throw new IllegalStateException(getClass().getName() + " does not support pipeline operation " + pipeline.getOperation());
  }
  try {
    latch.await(timeoutMs,TimeUnit.MILLISECONDS);
  }
 catch (  InterruptedException e) {
    if (logger.isEnabledFor(Level.WARN))     logger.warn(e,e);
  }
  for (  Response<ByteArray,Object> response : responses.values()) {
    if (response.getValue() instanceof Exception) {
      if (handleResponseError(response,pipeline,failureDetector))       return;
    }
 else {
      pipelineData.incrementSuccesses();
      Response<ByteArray,V> rCast=Utils.uncheckedCast(response);
      pipelineData.getResponses().add(rCast);
      failureDetector.recordSuccess(response.getNode(),response.getRequestTime());
      pipelineData.getZoneResponses().add(response.getNode().getZoneId());
    }
  }
  isResponseProcessed.set(true);
  if (logger.isDebugEnabled())   logger.debug("GET for key " + ByteUtils.toHexString(key.get()) + " (keyRef: "+ System.identityHashCode(key)+ "); successes: "+ pipelineData.getSuccesses()+ " preferred: "+ preferred+ " required: "+ required);
  if (pipelineData.getSuccesses() < required) {
    if (insufficientSuccessesEvent != null) {
      pipeline.addEvent(insufficientSuccessesEvent);
    }
 else {
      pipelineData.setFatalError(new InsufficientOperationalNodesException(required + " " + pipeline.getOperation().getSimpleName()+ "s required, but only "+ pipelineData.getSuccesses()+ " succeeded",new ArrayList<Node>(pipelineData.getReplicationSet()),new ArrayList<Node>(pipelineData.getNodes()),new ArrayList<Node>(pipelineData.getFailedNodes()),pipelineData.getFailures()));
      pipeline.abort();
    }
  }
 else {
    if (pipelineData.getZonesRequired() != null) {
      int zonesSatisfied=pipelineData.getZoneResponses().size();
      if (zonesSatisfied >= (pipelineData.getZonesRequired() + 1)) {
        pipeline.addEvent(completeEvent);
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Operation " + pipeline.getOperation().getSimpleName() + "failed due to insufficent zone responses, required "+ pipelineData.getZonesRequired()+ " obtained "+ zonesSatisfied+ " "+ pipelineData.getZoneResponses()+ " for key "+ key);
        }
        if (this.insufficientZonesEvent != null) {
          pipeline.addEvent(this.insufficientZonesEvent);
        }
 else {
          pipelineData.setFatalError(new InsufficientZoneResponsesException((pipelineData.getZonesRequired() + 1) + " " + pipeline.getOperation().getSimpleName()+ "s required zone, but only "+ zonesSatisfied+ " succeeded"));
        }
      }
    }
 else {
      pipeline.addEvent(completeEvent);
    }
  }
}
