{
  long asyncRecoveryInterval=getConfig().getAsyncRecoveryInterval();
  while (!Thread.currentThread().isInterrupted() && isRunning) {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug("Sleeping for " + asyncRecoveryInterval + " ms before checking node availability");
      }
      getConfig().getTime().sleep(asyncRecoveryInterval);
    }
 catch (    InterruptedException e) {
      break;
    }
    Set<Node> unavailableNodesCopy=null;
synchronized (this) {
      unavailableNodesCopy=new HashSet<Node>(unavailableNodes);
    }
    for (    Node node : unavailableNodesCopy) {
      if (logger.isDebugEnabled())       logger.debug("Checking previously unavailable node " + node);
      StoreVerifier storeVerifier=getConfig().getStoreVerifier();
      if (storeVerifier == null) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn(node + " store verifier is null; cannot determine node availability");
        continue;
      }
      try {
        storeVerifier.verifyStore(node);
synchronized (unavailableNodes) {
          unavailableNodes.remove(node);
        }
        nodeRecovered(node);
      }
 catch (      UnreachableStoreException e) {
        if (logger.isEnabledFor(Level.WARN))         logger.warn(node + " still unavailable",e);
      }
catch (      Exception e) {
        if (logger.isEnabledFor(Level.ERROR))         logger.error(node + " unavailable due to error",e);
      }
    }
  }
}
