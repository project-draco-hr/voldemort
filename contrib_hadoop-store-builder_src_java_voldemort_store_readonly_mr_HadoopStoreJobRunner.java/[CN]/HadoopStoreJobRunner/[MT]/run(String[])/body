{
  Class<? extends AbstractHadoopStoreBuilderMapper<?,?>> mapperClass=null;
  Class<? extends InputFormat<?,?>> inputFormatClass=null;
  Cluster cluster=null;
  StoreDefinition storeDef=null;
  int replicationFactor=0;
  long chunkSizeBytes=-1;
  Path inputPath=null;
  Path outputDir=null;
  Path tempDir=null;
  CommandLine cmdLine=parser.parse(args);
  List<String> addJars=new ArrayList<String>();
  if (cmdLine != null) {
    inputPath=new Path((String)cmdLine.getValue("-input"));
    outputDir=new Path((String)cmdLine.getValue("-output"));
    tempDir=new Path((String)cmdLine.getValue("-tmpdir"));
    File clusterFile=new File((String)cmdLine.getValue("-cluster"));
    cluster=new ClusterMapper().readCluster(new BufferedReader(new FileReader(clusterFile)));
    File storeDefFile=new File((String)cmdLine.getValue("-storedefinitions"));
    String storeName=(String)cmdLine.getValue("-storename");
    List<StoreDefinition> stores;
    stores=new StoreDefinitionsMapper().readStoreList(new BufferedReader(new FileReader(storeDefFile)));
    for (    StoreDefinition def : stores) {
      if (def.getName().equals(storeName))       storeDef=def;
    }
    chunkSizeBytes=Long.parseLong((String)cmdLine.getValue("-chunksize"));
    replicationFactor=Integer.parseInt((String)cmdLine.getValue("-replication"));
    ClassLoader cl=Thread.currentThread().getContextClassLoader();
    if (cmdLine.hasOption("-jar")) {
      String jar=(String)cmdLine.getValue("-jar");
      URL[] urls=new URL[1];
      urls[0]=new File(jar).toURI().toURL();
      cl=new URLClassLoader(urls);
      addJars.add(jar);
    }
    mapperClass=(Class<? extends AbstractHadoopStoreBuilderMapper<?,?>>)ReflectUtils.loadClass((String)cmdLine.getValue("-mapper"),cl);
    if (cmdLine.hasOption("-inputformat") && !((String)cmdLine.getValue("-inputformat")).equals("TextInputFormat")) {
      inputFormatClass=(Class<? extends InputFormat<?,?>>)ReflectUtils.loadClass((String)cmdLine.getValue("-inputformat"),cl);
    }
 else {
      inputFormatClass=TextInputFormat.class;
    }
  }
  Configuration conf=getConf();
  Class[] deps=new Class[]{ImmutableCollection.class,JDOMException.class,VoldemortConfig.class,HadoopStoreJobRunner.class,mapperClass};
  addDepJars(conf,deps,addJars);
  HadoopStoreBuilder builder=new HadoopStoreBuilder(conf,mapperClass,inputFormatClass,cluster,storeDef,replicationFactor,chunkSizeBytes,tempDir,outputDir,inputPath);
  builder.build();
  return 0;
}
