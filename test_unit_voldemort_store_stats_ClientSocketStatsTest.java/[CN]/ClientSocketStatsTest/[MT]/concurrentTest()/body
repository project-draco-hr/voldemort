{
class TestThread implements Runnable {
    SocketDestination dest;
    public TestThread(    SocketDestination dest){
      this.dest=dest;
    }
    @Override public void run(){
      masterStats.recordCheckoutTimeUs(dest,1000);
      masterStats.recordCheckoutTimeUs(dest,2000);
      masterStats.recordCheckoutTimeUs(dest,3000);
      masterStats.recordCheckoutTimeUs(dest,4000);
      masterStats.recordCheckoutTimeUs(dest,5000);
      masterStats.recordCheckoutTimeUs(dest,6000);
      masterStats.recordCheckoutTimeUs(dest,7000);
      masterStats.recordCheckoutTimeUs(dest,8000);
      masterStats.recordCheckoutTimeUs(dest,9000);
    }
  }
  Thread t1=new Thread(new TestThread(dest1));
  Thread t1_1=new Thread(new TestThread(dest1));
  Thread t1_2=new Thread(new TestThread(dest1));
  Thread t1_3=new Thread(new TestThread(dest1));
  Thread t2=new Thread(new TestThread(dest2));
  Thread t2_1=new Thread(new TestThread(dest2));
  t1.start();
  t2.start();
  t2_1.start();
  t1_1.start();
  t1_2.start();
  t1_3.start();
  try {
    t1.join();
    t2.join();
    t2_1.join();
    t1_1.join();
    t1_2.join();
    t1_3.join();
  }
 catch (  Exception e) {
  }
  assertEquals((int)(masterStats.getCheckoutTimeMsQ10th() * Time.US_PER_MS),1000);
  assertEquals((int)(masterStats.getCheckoutTimeMsQ50th() * Time.US_PER_MS),5000);
  assertEquals((int)(masterStats.getStatsMap().get(dest1).getCheckoutTimeMsQ10th() * Time.US_PER_MS),1000);
  assertEquals((int)(masterStats.getStatsMap().get(dest1).getCheckoutTimeMsQ50th() * Time.US_PER_MS),5000);
  assertEquals((int)(masterStats.getStatsMap().get(dest2).getCheckoutTimeMsQ10th() * Time.US_PER_MS),1000);
  assertEquals((int)(masterStats.getStatsMap().get(dest2).getCheckoutTimeMsQ50th() * Time.US_PER_MS),5000);
}
