{
  for (String line=commandReader.readLine(); line != null; line=commandReader.readLine()) {
    if (line.trim().equals(""))     continue;
    if (printCommands)     commandOutput.println(line);
    try {
      if (line.toLowerCase().startsWith("put")) {
        processPut(line.substring("put".length()));
      }
 else       if (line.toLowerCase().startsWith("getall")) {
        processGetAll(line.substring("getall".length()));
      }
 else       if (line.toLowerCase().startsWith("get")) {
        processGet(line.substring("get".length()));
      }
 else       if (line.toLowerCase().startsWith("delete")) {
        processDelete(line.substring("delete".length()));
      }
 else       if (line.startsWith("help")) {
        commandOutput.println();
        commandOutput.println("Commands:");
        commandOutput.println(PROMPT + "put key value --- Associate the given value with the key.");
        commandOutput.println(PROMPT + "get key --- Retrieve the value associated with the key.");
        commandOutput.println(PROMPT + "getall key1 [key2...] --- Retrieve the value(s) associated with the key(s).");
        commandOutput.println(PROMPT + "delete key --- Remove all values associated with the key.");
        commandOutput.println(PROMPT + "help --- Print this message.");
        commandOutput.println(PROMPT + "exit --- Exit from this shell.");
        commandOutput.println();
        commandOutput.println("Avro usage:");
        commandOutput.println("For avro keys or values, ensure that the entire json string is enclosed within single quotes (').");
        commandOutput.println("Also, the field names and strings should STRICTLY be enclosed by double quotes(\")");
        commandOutput.println("eg: > put '{\"id\":1,\"name\":\"Vinoth Chandar\"}' '[{\"skill\":\"java\", \"score\":90.27, \"isendorsed\": true}]'");
      }
 else       if (line.equals("quit") || line.equals("exit")) {
        commandOutput.println("bye.");
        System.exit(0);
      }
 else {
        errorStream.println("Invalid command. (Try 'help' for usage.)");
      }
    }
 catch (    EndOfFileException e) {
      errorStream.println("Expected additional token.");
    }
catch (    SerializationException e) {
      errorStream.print("Error serializing values: ");
      e.printStackTrace(errorStream);
    }
catch (    VoldemortException e) {
      errorStream.println("Exception thrown during operation.");
      e.printStackTrace(errorStream);
    }
catch (    ArrayIndexOutOfBoundsException e) {
      errorStream.println("Invalid command. (Try 'help' for usage.)");
    }
catch (    Exception e) {
      errorStream.println("Unexpected error:");
      e.printStackTrace(errorStream);
    }
    commandOutput.print(PROMPT);
  }
}
