{
  Map<ByteArray,List<Versioned<byte[]>>> results=new HashMap<ByteArray,List<Versioned<byte[]>>>();
  try {
    byte[] bytes=new byte[entity.length()];
    entity.copyBytes(bytes,0);
    ByteArrayDataSource ds=new ByteArrayDataSource(bytes,"multipart/mixed");
    MimeMultipart mp=new MimeMultipart(ds);
    for (int i=0; i < mp.getCount(); i++) {
      MimeBodyPart part=(MimeBodyPart)mp.getBodyPart(i);
      String contentLocation=part.getHeader("Content-Location")[0];
      String base64Key=contentLocation.split("/")[2];
      ByteArray key=new ByteArray(RestUtils.decodeVoldemortKey(base64Key));
      if (logger.isDebugEnabled()) {
        logger.debug("Content-Location : " + contentLocation);
        logger.debug("Base 64 key : " + base64Key);
      }
      List<Versioned<byte[]>> valueResultList=new ArrayList<Versioned<byte[]>>();
      ByteArrayDataSource nestedDS=new ByteArrayDataSource((String)part.getContent(),"multipart/mixed");
      MimeMultipart valueParts=new MimeMultipart(nestedDS);
      for (int valueId=0; valueId < valueParts.getCount(); valueId++) {
        MimeBodyPart valuePart=(MimeBodyPart)valueParts.getBodyPart(valueId);
        String serializedVC=valuePart.getHeader(RestMessageHeaders.X_VOLD_VECTOR_CLOCK)[0];
        int contentLength=Integer.parseInt(valuePart.getHeader(RestMessageHeaders.CONTENT_LENGTH)[0]);
        if (logger.isDebugEnabled()) {
          logger.debug("Received serialized Vector Clock : " + serializedVC);
        }
        VectorClockWrapper vcWrapper=mapper.readValue(serializedVC,VectorClockWrapper.class);
        InputStream input=valuePart.getInputStream();
        byte[] bodyPartBytes=new byte[contentLength];
        input.read(bodyPartBytes);
        VectorClock clock=new VectorClock(vcWrapper.getVersions(),vcWrapper.getTimestamp());
        valueResultList.add(new Versioned<byte[]>(bodyPartBytes,clock));
      }
      results.put(key,valueResultList);
    }
  }
 catch (  MessagingException e) {
    throw new VoldemortException("Messaging exception while trying to parse GET response " + e.getMessage(),e);
  }
catch (  JsonParseException e) {
    throw new VoldemortException("JSON parsing exception while trying to parse GET response " + e.getMessage(),e);
  }
catch (  JsonMappingException e) {
    throw new VoldemortException("JSON mapping exception while trying to parse GET response " + e.getMessage(),e);
  }
catch (  IOException e) {
    throw new VoldemortException("IO exception while trying to parse GET response " + e.getMessage(),e);
  }
  return results;
}
