{
  Map<ByteArray,List<Versioned<byte[]>>> results=new HashMap<ByteArray,List<Versioned<byte[]>>>();
  try {
    byte[] bytes=new byte[entity.length()];
    entity.copyBytes(bytes,0);
    ByteArrayDataSource ds=new ByteArrayDataSource(bytes,"multipart/mixed");
    MimeMultipart mp=new MimeMultipart(ds);
    for (int i=0; i < mp.getCount(); i++) {
      MimeBodyPart part=(MimeBodyPart)mp.getBodyPart(i);
      String eTag=part.getHeader("ETag")[0];
      String contentLocation=part.getHeader("Content-Location")[0];
      logger.debug("Received etag : " + eTag);
      logger.debug("Content-Location : " + contentLocation);
      String base64Key=contentLocation.split("/")[2];
      logger.debug("Base 64 key : " + base64Key);
      ByteArray key=new ByteArray(Base64.decodeBase64(base64Key.getBytes()));
      VectorClockWrapper vcWrapper=mapper.readValue(eTag,VectorClockWrapper.class);
      List<Versioned<byte[]>> keyResultList=new ArrayList<Versioned<byte[]>>(2);
      byte[] bodyPartBytes=((String)part.getContent()).getBytes();
      VectorClock clock=new VectorClock(vcWrapper.getVersions(),vcWrapper.getTimestamp());
      keyResultList.add(new Versioned<byte[]>(bodyPartBytes,clock));
      results.put(key,keyResultList);
    }
  }
 catch (  MessagingException e) {
    e.printStackTrace();
  }
catch (  JsonParseException e) {
    e.printStackTrace();
  }
catch (  JsonMappingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return results;
}
