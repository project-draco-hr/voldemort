{
  Map<ByteArray,List<Versioned<byte[]>>> resultMap=new HashMap<ByteArray,List<Versioned<byte[]>>>();
  try {
    Iterator<ByteArray> it=keys.iterator();
    String keyArgs=null;
    while (it.hasNext()) {
      ByteArray key=it.next();
      String base64Key=RestUtils.encodeVoldemortKey(key.get());
      if (keyArgs == null) {
        keyArgs=base64Key;
      }
 else {
        keyArgs+="," + base64Key;
      }
    }
    RestRequestBuilder rb=new RestRequestBuilder(new URI(this.baseURL + "/" + getName()+ "/"+ keyArgs));
    rb.setMethod(GET);
    rb.setHeader("Accept",MULTIPART_CONTENT_TYPE);
    String timeoutStr=Long.toString(this.config.getTimeoutConfig().getOperationTimeout(VoldemortOpCode.GET_ALL_OP_CODE));
    rb.setHeader(RestMessageHeaders.X_VOLD_REQUEST_TIMEOUT_MS,timeoutStr);
    rb.setHeader(RestMessageHeaders.X_VOLD_REQUEST_ORIGIN_TIME_MS,String.valueOf(System.currentTimeMillis()));
    if (this.routingTypeCode != null) {
      rb.setHeader(RestMessageHeaders.X_VOLD_ROUTING_TYPE_CODE,this.routingTypeCode);
    }
    if (this.zoneId != INVALID_ZONE_ID) {
      rb.setHeader(RestMessageHeaders.X_VOLD_ZONE_ID,String.valueOf(this.zoneId));
    }
    RestRequest request=rb.build();
    Future<RestResponse> f=client.restRequest(request);
    RestResponse response=f.get();
    final ByteString entity=response.getEntity();
    String contentType=response.getHeader(CONTENT_TYPE);
    if (entity != null) {
      if (contentType.equalsIgnoreCase(MULTIPART_CONTENT_TYPE)) {
        resultMap=parseGetAllResults(entity);
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("Did not receive a multipart response");
        }
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Did not get any response!");
      }
    }
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof RestException) {
      RestException exception=(RestException)e.getCause();
      if (logger.isDebugEnabled()) {
        logger.debug("REST EXCEPTION STATUS : " + exception.getResponse().getStatus());
      }
    }
 else {
      throw new VoldemortException("Unknown HTTP request execution exception: " + e.getMessage(),e);
    }
  }
catch (  InterruptedException e) {
    if (logger.isDebugEnabled()) {
      logger.debug("Operation interrupted : " + e.getMessage(),e);
    }
    throw new VoldemortException("Operation interrupted exception: " + e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    throw new VoldemortException("Illegal HTTP URL" + e.getMessage(),e);
  }
  return resultMap;
}
