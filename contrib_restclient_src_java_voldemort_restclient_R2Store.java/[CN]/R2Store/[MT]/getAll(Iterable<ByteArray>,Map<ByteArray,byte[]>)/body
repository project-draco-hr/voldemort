{
  Map<ByteArray,List<Versioned<byte[]>>> resultMap=new HashMap<ByteArray,List<Versioned<byte[]>>>();
  try {
    Iterator<ByteArray> it=keys.iterator();
    String keyArgs=null;
    while (it.hasNext()) {
      ByteArray key=it.next();
      String base64Key=new String(Base64.encodeBase64(key.get()));
      if (keyArgs == null) {
        keyArgs=base64Key;
      }
 else {
        keyArgs+="," + base64Key;
      }
    }
    RestRequestBuilder rb=new RestRequestBuilder(new URI(this.baseURL + "/" + getName()+ "/"+ keyArgs));
    rb.setMethod(GET);
    rb.setHeader("Accept",MULTIPART_CONTENT_TYPE);
    String timeoutStr=Long.toString(this.timeoutConfig.getOperationTimeout(VoldemortOpCode.GET_ALL_OP_CODE));
    rb.setHeader(X_VOLD_REQUEST_TIMEOUT_MS,timeoutStr);
    RestRequest request=rb.build();
    Future<RestResponse> f=client.restRequest(request);
    RestResponse response=f.get();
    final ByteString entity=response.getEntity();
    String contentType=response.getHeader(CONTENT_TYPE);
    if (entity != null) {
      if (contentType.equalsIgnoreCase(MULTIPART_CONTENT_TYPE)) {
        resultMap=parseGetAllResults(entity);
      }
 else {
        logger.error("Did not receive a multipart response");
      }
    }
 else {
      logger.error("Did not get any response!");
    }
  }
 catch (  VoldemortException ve) {
    logger.error("Voldemort Exception occured : " + ve.getMessage(),ve);
  }
catch (  Exception e) {
    if (!e.getMessage().contains("status=404")) {
      logger.error("ERROR: " + e);
    }
  }
  return resultMap;
}
