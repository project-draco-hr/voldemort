{
  try {
    String base64Key=RestUtils.encodeVoldemortKey(key.get());
    RestRequestBuilder rb=new RestRequestBuilder(new URI(this.baseURL + "/" + getName()+ "/"+ base64Key));
    rb.setMethod(DELETE);
    rb.setHeader(CONTENT_LENGTH,"0");
    String timeoutStr=Long.toString(this.config.getTimeoutConfig().getOperationTimeout(VoldemortOpCode.DELETE_OP_CODE));
    rb.setHeader(RestMessageHeaders.X_VOLD_REQUEST_TIMEOUT_MS,timeoutStr);
    rb.setHeader(RestMessageHeaders.X_VOLD_REQUEST_ORIGIN_TIME_MS,String.valueOf(System.currentTimeMillis()));
    if (this.routingTypeCode != null) {
      rb.setHeader(RestMessageHeaders.X_VOLD_ROUTING_TYPE_CODE,this.routingTypeCode);
    }
    if (this.zoneId != INVALID_ZONE_ID) {
      rb.setHeader(RestMessageHeaders.X_VOLD_ZONE_ID,String.valueOf(this.zoneId));
    }
    VectorClock vc=(VectorClock)version;
    if (vc != null && vc.getEntries().size() != 0) {
      String serializedVC=null;
      if (!vc.getEntries().isEmpty()) {
        serializedVC=RestUtils.getSerializedVectorClock(vc);
      }
      if (serializedVC != null && serializedVC.length() > 0) {
        rb.setHeader(RestMessageHeaders.X_VOLD_VECTOR_CLOCK,serializedVC);
      }
    }
    RestRequest request=rb.build();
    Future<RestResponse> f=client.restRequest(request);
    RestResponse response=f.get();
    final ByteString entity=response.getEntity();
    if (entity == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Empty response !");
      }
    }
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof RestException) {
      RestException exception=(RestException)e.getCause();
      if (logger.isDebugEnabled()) {
        logger.debug("REST EXCEPTION STATUS : " + exception.getResponse().getStatus());
      }
      if (exception.getResponse().getStatus() == NOT_FOUND.getCode()) {
        return false;
      }
    }
 else {
      throw new VoldemortException("Unknown HTTP request execution exception: " + e.getMessage(),e);
    }
  }
catch (  InterruptedException e) {
    if (logger.isDebugEnabled()) {
      logger.debug("Operation interrupted : " + e.getMessage());
    }
    throw new VoldemortException("Operation Interrupted: " + e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    throw new VoldemortException("Illegal HTTP URL" + e.getMessage(),e);
  }
  return true;
}
