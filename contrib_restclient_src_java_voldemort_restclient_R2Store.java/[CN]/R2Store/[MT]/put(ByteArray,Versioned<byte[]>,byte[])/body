{
  try {
    byte[] payload=value.getValue();
    String base64Key=new String(Base64.encodeBase64(key.get()));
    RestRequestBuilder rb=new RestRequestBuilder(new URI(this.baseURL + "/" + getName()+ "/"+ base64Key));
    rb.setMethod(POST);
    rb.setEntity(payload);
    rb.setHeader(CONTENT_TYPE,"binary");
    rb.setHeader(CONTENT_LENGTH,"" + payload.length);
    String timeoutStr=Long.toString(this.timeoutConfig.getOperationTimeout(VoldemortOpCode.PUT_OP_CODE));
    rb.setHeader(X_VOLD_REQUEST_TIMEOUT_MS,timeoutStr);
    VectorClock vc=(VectorClock)value.getVersion();
    if (vc != null && vc.getEntries().size() != 0) {
      String serializedVC=null;
      if (!vc.getEntries().isEmpty()) {
        serializedVC=CoordinatorUtils.getSerializedVectorClock(vc);
      }
      if (serializedVC != null && serializedVC.length() > 0) {
        rb.setHeader(X_VOLD_VECTOR_CLOCK,serializedVC);
      }
    }
    RestRequest request=rb.build();
    Future<RestResponse> f=client.restRequest(request);
    RestResponse response=f.get();
    final ByteString entity=response.getEntity();
    if (entity == null) {
      logger.error("Empty response !");
    }
  }
 catch (  VoldemortException ve) {
    logger.error("Voldemort Exception occured : " + ve.getMessage(),ve);
  }
catch (  Exception e) {
    if (!e.getMessage().contains("status=412")) {
      logger.error("Specified version of the value is Obsolete.",e);
    }
  }
}
