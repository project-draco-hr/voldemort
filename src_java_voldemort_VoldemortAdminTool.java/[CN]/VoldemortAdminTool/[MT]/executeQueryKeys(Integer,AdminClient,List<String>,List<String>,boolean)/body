{
  List<StoreDefinition> storeDefinitionList=adminClient.metadataMgmtOps.getRemoteStoreDefList(nodeId).getValue();
  Map<String,StoreDefinition> storeDefinitions=new HashMap<String,StoreDefinition>();
  for (  StoreDefinition storeDef : storeDefinitionList) {
    storeDefinitions.put(storeDef.getName(),storeDef);
  }
  for (  final String storeName : storeNames) {
    StoreDefinition storeDefinition=storeDefinitions.get(storeName);
    SerializerDefinition keySerializerDef=storeDefinition.getKeySerializer();
    SerializerDefinition valueSerializerDef=storeDefinition.getValueSerializer();
    SerializerFactory serializerFactory=new DefaultSerializerFactory();
    @SuppressWarnings("unchecked") final Serializer<Object> keySerializer=(Serializer<Object>)serializerFactory.getSerializer(keySerializerDef);
    @SuppressWarnings("unchecked") final Serializer<Object> valueSerializer=(Serializer<Object>)serializerFactory.getSerializer(valueSerializerDef);
    List<ByteArray> listKeys=new ArrayList<ByteArray>();
    for (    String keyString : keys) {
      try {
        if (useAscii) {
          Object keyObject;
          String keySerializerName=keySerializerDef.getName();
          if (isAvroSchema(keySerializerName)) {
            Schema keySchema=Schema.parse(keySerializerDef.getCurrentSchemaInfo());
            JsonDecoder decoder=new JsonDecoder(keySchema,keyString);
            GenericDatumReader<Object> datumReader=new GenericDatumReader<Object>(keySchema);
            keyObject=datumReader.read(null,decoder);
          }
 else           if (keySerializerName.equals(DefaultSerializerFactory.JSON_SERIALIZER_TYPE_NAME)) {
            JsonReader jsonReader=new JsonReader(new StringReader(keyString));
            keyObject=jsonReader.read();
          }
 else {
            keyObject=keyString;
          }
          listKeys.add(new ByteArray(keySerializer.toBytes(keyObject)));
        }
 else {
          listKeys.add(new ByteArray(ByteUtils.fromHexString(keyString)));
        }
      }
 catch (      DecoderException de) {
        System.err.println("Error decoding key " + keyString);
        de.printStackTrace();
        return;
      }
catch (      IOException io) {
        System.err.println("Error parsing avro string " + keyString);
        io.printStackTrace();
      }
    }
    final Iterator<QueryKeyResult> iterator=adminClient.streamingOps.queryKeys(nodeId.intValue(),storeName,listKeys.iterator());
    final CompressionStrategy keyCompressionStrategy;
    final CompressionStrategy valueCompressionStrategy;
    if (keySerializerDef != null && keySerializerDef.hasCompression()) {
      keyCompressionStrategy=new CompressionStrategyFactory().get(keySerializerDef.getCompression());
    }
 else {
      keyCompressionStrategy=null;
    }
    if (valueSerializerDef != null && valueSerializerDef.hasCompression()) {
      valueCompressionStrategy=new CompressionStrategyFactory().get(valueSerializerDef.getCompression());
    }
 else {
      valueCompressionStrategy=null;
    }
    writeAscii(null,new Writable(){
      @Override public void writeTo(      BufferedWriter out) throws IOException {
        final StringWriter stringWriter=new StringWriter();
        stringWriter.write("Querying keys in node " + nodeId + " of "+ storeName+ "\n");
        while (iterator.hasNext()) {
          QueryKeyResult queryKeyResult=iterator.next();
          byte[] keyBytes=queryKeyResult.getKey().get();
          Object keyObject=keySerializer.toObject((null == keyCompressionStrategy) ? keyBytes : keyCompressionStrategy.inflate(keyBytes));
          if (queryKeyResult.hasValues() && queryKeyResult.getValues().size() > 0) {
            for (            Versioned<byte[]> versioned : queryKeyResult.getValues()) {
              final JsonGenerator generator=new JsonFactory(new ObjectMapper()).createJsonGenerator(out);
              if (keyObject instanceof GenericRecord) {
                out.write(keyObject.toString());
              }
 else {
                generator.writeObject(keyObject);
              }
              VectorClock version=(VectorClock)versioned.getVersion();
              out.write(' ' + version.toString() + '['+ new Date(version.getTimestamp()).toString()+ ']');
              byte[] valueBytes=versioned.getValue();
              Object valueObject=valueSerializer.toObject((null == valueCompressionStrategy) ? valueBytes : valueCompressionStrategy.inflate(valueBytes));
              if (valueObject instanceof GenericRecord) {
                out.write(valueObject.toString());
              }
 else {
                generator.writeObject(valueObject);
              }
              out.write('\n');
            }
          }
 else {
            final JsonGenerator generator=new JsonFactory(new ObjectMapper()).createJsonGenerator(out);
            if (keyObject instanceof GenericRecord) {
              out.write(keyObject.toString());
            }
 else {
              generator.writeObject(keyObject);
            }
            if (queryKeyResult.hasException()) {
              out.write(" " + queryKeyResult.getException().toString() + '\n');
            }
 else {
              out.write(" null\n");
            }
          }
        }
      }
    }
);
  }
}
