{
  List<Integer> queryingNodes=new ArrayList<Integer>();
  if (nodeId < 0) {
    for (    Node node : adminClient.getAdminClientCluster().getNodes()) {
      queryingNodes.add(node.getId());
    }
  }
 else {
    queryingNodes.add(nodeId);
  }
  List<StoreDefinition> storeDefinitionList=getStoreDefinitions(adminClient,nodeId);
  Map<String,StoreDefinition> storeDefinitions=new HashMap<String,StoreDefinition>();
  for (  StoreDefinition storeDef : storeDefinitionList) {
    storeDefinitions.put(storeDef.getName(),storeDef);
  }
  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(System.out));
  for (  final String storeName : storeNames) {
    StoreDefinition storeDefinition=storeDefinitions.get(storeName);
    if (storeDefinition == null) {
      throw new StoreNotFoundException("Store " + storeName + " not found");
    }
    out.write("STORE_NAME: " + storeDefinition.getName() + "\n");
    final SerializerDefinition keySerializerDef=storeDefinition.getKeySerializer();
    final SerializerDefinition valueSerializerDef=storeDefinition.getValueSerializer();
    SerializerFactory serializerFactory=new DefaultSerializerFactory();
    @SuppressWarnings("unchecked") final Serializer<Object> keySerializer=(Serializer<Object>)serializerFactory.getSerializer(keySerializerDef);
    @SuppressWarnings("unchecked") final Serializer<Object> valueSerializer=(Serializer<Object>)serializerFactory.getSerializer(valueSerializerDef);
    final CompressionStrategy keyCompressionStrategy;
    final CompressionStrategy valueCompressionStrategy;
    if (keySerializerDef != null && keySerializerDef.hasCompression()) {
      keyCompressionStrategy=new CompressionStrategyFactory().get(keySerializerDef.getCompression());
    }
 else {
      keyCompressionStrategy=null;
    }
    if (valueSerializerDef != null && valueSerializerDef.hasCompression()) {
      valueCompressionStrategy=new CompressionStrategyFactory().get(valueSerializerDef.getCompression());
    }
 else {
      valueCompressionStrategy=null;
    }
    if (keyCompressionStrategy == null) {
      out.write("KEY_COMPRESSION_STRATEGY: None\n");
    }
 else {
      out.write("KEY_COMPRESSION_STRATEGY: " + keyCompressionStrategy.getType() + "\n");
    }
    out.write("KEY_SERIALIZER_NAME: " + keySerializerDef.getName() + "\n");
    for (    Map.Entry<Integer,String> entry : keySerializerDef.getAllSchemaInfoVersions().entrySet()) {
      out.write(String.format("KEY_SCHEMA VERSION=%d\n",entry.getKey()));
      out.write("====================================\n");
      out.write(entry.getValue());
      out.write("\n====================================\n");
    }
    out.write("\n");
    if (valueCompressionStrategy == null) {
      out.write("VALUE_COMPRESSION_STRATEGY: None\n");
    }
 else {
      out.write("VALUE_COMPRESSION_STRATEGY: " + valueCompressionStrategy.getType() + "\n");
    }
    out.write("VALUE_SERIALIZER_NAME: " + valueSerializerDef.getName() + "\n");
    for (    Map.Entry<Integer,String> entry : valueSerializerDef.getAllSchemaInfoVersions().entrySet()) {
      out.write(String.format("VALUE_SCHEMA %d\n",entry.getKey()));
      out.write("====================================\n");
      out.write(entry.getValue());
      out.write("\n====================================\n");
    }
    out.write("\n");
    ByteArray key;
    try {
      if (keyFormat.equals("readable")) {
        Object keyObject;
        String keySerializerName=keySerializerDef.getName();
        if (isAvroSchema(keySerializerName)) {
          Schema keySchema=Schema.parse(keySerializerDef.getCurrentSchemaInfo());
          JsonDecoder decoder=new JsonDecoder(keySchema,keyString);
          GenericDatumReader<Object> datumReader=new GenericDatumReader<Object>(keySchema);
          keyObject=datumReader.read(null,decoder);
        }
 else         if (keySerializerName.equals(DefaultSerializerFactory.JSON_SERIALIZER_TYPE_NAME)) {
          JsonReader jsonReader=new JsonReader(new StringReader(keyString));
          keyObject=jsonReader.read();
        }
 else {
          keyObject=keyString;
        }
        key=new ByteArray(keySerializer.toBytes(keyObject));
      }
 else {
        key=new ByteArray(ByteUtils.fromHexString(keyString));
      }
    }
 catch (    SerializationException se) {
      System.err.println("Error serializing key " + keyString);
      System.err.println("If this is a JSON key, you need to include escaped quotation marks in the command line if it is a string");
      se.printStackTrace();
      return;
    }
catch (    DecoderException de) {
      System.err.println("Error decoding key " + keyString);
      de.printStackTrace();
      return;
    }
catch (    IOException io) {
      System.err.println("Error parsing avro string " + keyString);
      io.printStackTrace();
      return;
    }
    boolean printedKey=false;
    List<Entry<List<Versioned<byte[]>>,List<Integer>>> nodeValues=new ArrayList<Entry<List<Versioned<byte[]>>,List<Integer>>>();
    for (    final Integer queryNodeId : queryingNodes) {
      Iterator<QueryKeyResult> iterator;
      iterator=adminClient.streamingOps.queryKeys(queryNodeId,storeName,Arrays.asList(key).iterator());
      final StringWriter stringWriter=new StringWriter();
      QueryKeyResult queryKeyResult=iterator.next();
      if (!printedKey) {
        byte[] keyBytes=queryKeyResult.getKey().get();
        Object keyObject=keySerializer.toObject((null == keyCompressionStrategy) ? keyBytes : keyCompressionStrategy.inflate(keyBytes));
        writeVoldKeyOrValueInternal(keyBytes,keySerializer,keyCompressionStrategy,"KEY",out);
        printedKey=true;
      }
      if (queryKeyResult.hasValues() && queryKeyResult.getValues().size() > 0) {
        int elementId=-1;
        for (int i=0; i < nodeValues.size(); i++) {
          if (Objects.equal(nodeValues.get(i).getKey(),queryKeyResult.getValues())) {
            elementId=i;
            break;
          }
        }
        if (elementId == -1) {
          ArrayList<Integer> nodes=new ArrayList<Integer>();
          nodes.add(queryNodeId);
          nodeValues.add(new AbstractMap.SimpleEntry<List<Versioned<byte[]>>,List<Integer>>(queryKeyResult.getValues(),nodes));
        }
 else {
          nodeValues.get(elementId).getValue().add(queryNodeId);
        }
        out.write(String.format("\nQueried node %d on store %s\n",queryNodeId,storeName));
        int versionCount=0;
        if (queryKeyResult.getValues().size() > 1) {
          out.write("VALUE " + versionCount + "\n");
        }
        for (        Versioned<byte[]> versioned : queryKeyResult.getValues()) {
          VectorClock version=(VectorClock)versioned.getVersion();
          out.write("VECTOR_CLOCK_BYTE: " + ByteUtils.toHexString(version.toBytes()) + "\n");
          out.write("VECTOR_CLOCK_TEXT: " + version.toString() + '['+ new Date(version.getTimestamp()).toString()+ "]\n");
          byte[] valueBytes=versioned.getValue();
          writeVoldKeyOrValueInternal(valueBytes,valueSerializer,valueCompressionStrategy,"VALUE",out);
          versionCount++;
        }
      }
 else       if (queryKeyResult.hasException()) {
        boolean isInvalidMetadataException=queryKeyResult.getException() instanceof InvalidMetadataException;
        if (!isInvalidMetadataException || queryingNodes.size() == 1) {
          out.write(String.format("\nNode %d on store %s returned exception\n",queryNodeId,storeName));
          out.write(queryKeyResult.getException().toString());
          out.write("\n====================================\n");
        }
      }
 else {
        if (queryingNodes.size() == 1) {
          out.write("\nNode %d on store %s returned NULL\n");
          out.write("\n====================================\n");
        }
      }
      out.flush();
    }
    out.write("\n====================================\n");
    for (    Map.Entry<List<Versioned<byte[]>>,List<Integer>> nodeValue : nodeValues) {
      out.write("Nodes with same Value " + Arrays.toString(nodeValue.getValue().toArray()));
      out.write("\n====================================\n");
    }
    if (nodeValues.size() > 1) {
      out.write("\n*** Multiple (" + nodeValues.size() + ") versions of key/value exist for the key ***\n");
    }
    out.flush();
  }
}
