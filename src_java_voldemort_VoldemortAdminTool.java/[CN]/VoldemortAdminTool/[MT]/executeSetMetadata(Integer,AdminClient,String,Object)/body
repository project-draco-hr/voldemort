{
  List<Integer> nodeIds=Lists.newArrayList();
  VectorClock updatedVersion=null;
  if (nodeId < 0) {
    for (    Node node : adminClient.getAdminClientCluster().getNodes()) {
      nodeIds.add(node.getId());
      if (updatedVersion == null) {
        updatedVersion=(VectorClock)adminClient.getRemoteMetadata(node.getId(),key).getVersion();
      }
 else {
        updatedVersion=updatedVersion.merge((VectorClock)adminClient.getRemoteMetadata(node.getId(),key).getVersion());
      }
    }
    updatedVersion=updatedVersion.incremented(0,System.currentTimeMillis());
  }
 else {
    Versioned<String> currentValue=adminClient.getRemoteMetadata(nodeId,key);
    updatedVersion=((VectorClock)currentValue.getVersion()).incremented(nodeId,System.currentTimeMillis());
    nodeIds.add(nodeId);
  }
  for (  Integer currentNodeId : nodeIds) {
    System.out.println("Setting " + key + " for "+ adminClient.getAdminClientCluster().getNodeById(currentNodeId).getHost()+ ":"+ adminClient.getAdminClientCluster().getNodeById(currentNodeId).getId());
    adminClient.updateRemoteMetadata(currentNodeId,key,Versioned.value(value.toString(),updatedVersion));
  }
}
