{
  File directory=null;
  if (outputDir != null) {
    directory=new File(outputDir);
    if (!(directory.exists() || directory.mkdir())) {
      Utils.croak("Can't find or create directory " + outputDir);
    }
  }
  List<Integer> nodeIds=Lists.newArrayList();
  if (nodeId < 0) {
    for (    Node node : adminClient.getAdminClientCluster().getNodes()) {
      nodeIds.add(node.getId());
    }
  }
 else {
    nodeIds.add(nodeId);
  }
  List<String> metadataKeys=Lists.newArrayList();
  if (metadataKey.compareTo(ALL_METADATA) == 0) {
    for (    Object key : MetadataStore.METADATA_KEYS) {
      metadataKeys.add((String)key);
    }
  }
 else {
    metadataKeys.add(metadataKey);
  }
  for (  Integer currentNodeId : nodeIds) {
    System.out.println(adminClient.getAdminClientCluster().getNodeById(currentNodeId).getHost() + ":" + adminClient.getAdminClientCluster().getNodeById(currentNodeId).getId());
    for (    String key : metadataKeys) {
      System.out.println("Key - " + key);
      Versioned<String> versioned=null;
      try {
        versioned=adminClient.metadataMgmtOps.getRemoteMetadata(currentNodeId,key);
      }
 catch (      Exception e) {
        System.out.println("Error in retrieving " + e.getMessage());
        System.out.println();
        continue;
      }
      if (versioned == null) {
        if (directory == null) {
          System.out.println("null");
          System.out.println();
        }
 else {
          FileUtils.writeStringToFile(new File(directory,key + "_" + currentNodeId),"");
        }
      }
 else {
        if (directory == null) {
          System.out.println(versioned.getVersion());
          System.out.print(": ");
          System.out.println(versioned.getValue());
          System.out.println();
        }
 else {
          FileUtils.writeStringToFile(new File(directory,key + "_" + currentNodeId),versioned.getValue());
        }
      }
    }
  }
}
