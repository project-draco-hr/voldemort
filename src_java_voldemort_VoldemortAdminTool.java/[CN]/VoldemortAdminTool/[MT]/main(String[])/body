{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("url","[REQUIRED] bootstrap URL").withRequiredArg().describedAs("bootstrap-url").ofType(String.class);
  parser.accepts("node","[REQUIRED] node id").withRequiredArg().describedAs("node-id").ofType(Integer.class);
  parser.accepts("delete-partitions","Delete partitions").withRequiredArg().describedAs("partition-ids").withValuesSeparatedBy(',').ofType(Integer.class);
  parser.accepts("restore","Restore from replication");
  parser.accepts("ascii","Fetch keys as ASCII");
  parser.accepts("parallelism","Parallelism").withRequiredArg().describedAs("parallelism").ofType(Integer.class);
  parser.accepts("fetch-keys","Fetch keys").withRequiredArg().describedAs("partition-ids").withValuesSeparatedBy(',').ofType(Integer.class);
  parser.accepts("fetch-entries","Fetch full entries").withRequiredArg().describedAs("partition-ids").withValuesSeparatedBy(',').ofType(Integer.class);
  parser.accepts("outdir","Output directory").withRequiredArg().describedAs("output-directory").ofType(String.class);
  parser.accepts("stores","Store names").withRequiredArg().describedAs("store-names").withValuesSeparatedBy(',').ofType(String.class);
  parser.accepts("add-stores","Add stores in this stores.xml").withRequiredArg().describedAs("stores.xml").ofType(String.class);
  OptionSet options=parser.parse(args);
  if (options.has("help")) {
    parser.printHelpOn(System.out);
    System.exit(0);
  }
  Set<String> missing=CmdUtils.missing(options,"url","node");
  if (missing.size() > 0) {
    if (!(missing.equals(ImmutableSet.of("node")) && options.has("add-stores"))) {
      System.err.println("Missing required arguments: " + Joiner.on(", ").join(missing));
      parser.printHelpOn(System.err);
      System.exit(1);
    }
  }
  String url=(String)options.valueOf("url");
  Integer nodeId=(Integer)options.valueOf("node");
  Integer parallelism=CmdUtils.valueOf(options,"parallelism",5);
  AdminClient adminClient=new AdminClient(url,new AdminClientConfig());
  String ops="";
  if (options.has("delete-partitions")) {
    ops+="d";
  }
  if (options.has("fetch-keys")) {
    ops+="k";
  }
  if (options.has("fetch-entries")) {
    ops+="v";
  }
  if (options.has("restore")) {
    ops+="r";
  }
  if (options.has("add-stores")) {
    ops+="a";
  }
  if (ops.length() < 1) {
    Utils.croak("At least one of (delete-partitions, restore, add-node, fetch-entries, fetch-keys) must be specified");
  }
  List<String> storeNames=null;
  if (options.has("stores")) {
    @SuppressWarnings("unchecked") List<String> temp=(List<String>)options.valuesOf("stores");
    storeNames=temp;
  }
  try {
    if (ops.contains("d")) {
      System.out.println("Starting delete-partitions");
      @SuppressWarnings("unchecked") List<Integer> partitionIdList=(List<Integer>)options.valuesOf("delete-partitions");
      executeDeletePartitions(nodeId,adminClient,partitionIdList,storeNames);
      System.out.println("Finished delete-partitions");
    }
    if (ops.contains("r")) {
      System.out.println("Starting restore");
      adminClient.restoreDataFromReplications(nodeId,parallelism);
      System.err.println("Finished restore");
    }
    if (ops.contains("k")) {
      if (!options.has("outdir")) {
        Utils.croak("Directory name (outdir) must be specified for fetch-keys");
      }
      String outputDir=(String)options.valueOf("outdir");
      boolean useAscii=options.has("ascii");
      System.out.println("Starting fetch keys");
      @SuppressWarnings("unchecked") List<Integer> partitionIdList=(List<Integer>)options.valuesOf("fetch-keys");
      executeFetchKeys(nodeId,adminClient,partitionIdList,outputDir,storeNames,useAscii);
    }
    if (ops.contains("v")) {
      if (!options.has("outdir")) {
        Utils.croak("Directory name (outdir) must be specified for fetch-values");
      }
      String outputDir=(String)options.valueOf("outdir");
      boolean useAscii=options.has("ascii");
      @SuppressWarnings("unchecked") List<Integer> partitionIdList=(List<Integer>)options.valuesOf("fetch-values");
      executeFetchEntries(nodeId,adminClient,partitionIdList,outputDir,storeNames,useAscii);
    }
    if (ops.contains("a")) {
      String storesXml=(String)options.valueOf("add-stores");
      executeAddStores(adminClient,storesXml,storeNames);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    Utils.croak(e.getMessage());
  }
}
