{
  OptionSet options=getParser().parse(args);
  boolean quiet=false;
  if (options.hasArgument("help")) {
    printUsage();
    return;
  }
  if (!options.hasArgument("urls") || !options.hasArgument("partitions") || !options.hasArgument("store")) {
    printUsage();
    return;
  }
  if (options.has("quiet")) {
    quiet=true;
  }
  List<String> urls=(List<String>)options.valuesOf("urls");
  String storeName=(String)options.valueOf("store");
  List<Integer> partitionIds=(List<Integer>)options.valuesOf("partitions");
  Map<Integer,ProgressReporter> partitionStatsMap=new HashMap<Integer,ProgressReporter>();
  long numGoodKeys=0;
  long numTotalKeys=0;
  for (  Integer partitionId : partitionIds) {
    ConsistencyCheck checker=new ConsistencyCheck(urls,storeName,partitionId,quiet);
    checker.connect();
    ProgressReporter reporter=checker.execute();
    partitionStatsMap.put(partitionId,reporter);
    numGoodKeys+=reporter.numGoodKeys;
    numTotalKeys+=reporter.numTotalKeys;
  }
  StringBuilder statsString=new StringBuilder();
  statsString.append("TYPE,Store,ParitionId,KeysConsistent,KeysTotal,Consistency\n");
  for (  Map.Entry<Integer,ProgressReporter> entry : partitionStatsMap.entrySet()) {
    Integer partitionId=entry.getKey();
    ProgressReporter reporter=entry.getValue();
    statsString.append("STATS,");
    statsString.append(storeName + ",");
    statsString.append(partitionId + ",");
    statsString.append(reporter.numGoodKeys + ",");
    statsString.append(reporter.numTotalKeys + ",");
    statsString.append((double)(reporter.numGoodKeys) / (double)reporter.numTotalKeys);
    statsString.append("\n");
  }
  statsString.append("STATS,");
  statsString.append(storeName + ",");
  statsString.append("aggregate,");
  statsString.append(numGoodKeys + ",");
  statsString.append(numTotalKeys + ",");
  statsString.append((double)(numGoodKeys) / (double)numTotalKeys);
  statsString.append("\n");
  for (  String line : statsString.toString().split("\n")) {
    logger.info(line);
  }
}
