{
  OptionSet options=getParser().parse(args);
  if (options.hasArgument("help")) {
    printUsage();
    return;
  }
  if (!options.hasArgument("urls") || !options.hasArgument("partitions") || !options.hasArgument("store")|| !options.hasArgument("bad-key-file")) {
    printUsage();
    return;
  }
  List<String> urls=(List<String>)options.valuesOf("urls");
  String storeName=(String)options.valueOf("store");
  List<Integer> partitionIds=(List<Integer>)options.valuesOf("partitions");
  String badKeyFile=(String)options.valueOf("bad-key-file");
  BufferedWriter badKeyWriter=null;
  try {
    badKeyWriter=new BufferedWriter(new FileWriter(badKeyFile));
  }
 catch (  IOException e) {
    Utils.croak("Failure to open output file : " + e.getMessage());
  }
  Map<Integer,Reporter> partitionStatsMap=new HashMap<Integer,Reporter>();
  try {
    for (    Integer partitionId : partitionIds) {
      ConsistencyCheck checker=new ConsistencyCheck(urls,storeName,partitionId,badKeyWriter);
      checker.connect();
      Reporter reporter=checker.execute();
      partitionStatsMap.put(partitionId,reporter);
    }
  }
 catch (  Exception e) {
    Utils.croak("Exception during consistency checking : " + e.getMessage());
  }
 finally {
    badKeyWriter.close();
  }
  StringBuilder statsString=new StringBuilder();
  long totalGoodKeys=0;
  long totalTotalKeys=0;
  statsString.append("TYPE,Store,ParitionId,KeysConsistent,KeysTotal,Consistency\n");
  for (  Map.Entry<Integer,Reporter> entry : partitionStatsMap.entrySet()) {
    Integer partitionId=entry.getKey();
    Reporter reporter=entry.getValue();
    totalGoodKeys+=reporter.numGoodKeys;
    totalTotalKeys+=reporter.numTotalKeys;
    statsString.append("STATS,");
    statsString.append(storeName + ",");
    statsString.append(partitionId + ",");
    statsString.append(reporter.numGoodKeys + ",");
    statsString.append(reporter.numTotalKeys + ",");
    statsString.append((double)(reporter.numGoodKeys) / (double)reporter.numTotalKeys);
    statsString.append("\n");
  }
  statsString.append("STATS,");
  statsString.append(storeName + ",");
  statsString.append("aggregate,");
  statsString.append(totalGoodKeys + ",");
  statsString.append(totalTotalKeys + ",");
  statsString.append((double)(totalGoodKeys) / (double)totalTotalKeys);
  statsString.append("\n");
  for (  String line : statsString.toString().split("\n")) {
    logger.info(line);
  }
}
