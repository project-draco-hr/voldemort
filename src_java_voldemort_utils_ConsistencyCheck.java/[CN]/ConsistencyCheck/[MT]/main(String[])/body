{
  OptionParser parser=new OptionParser();
  parser.accepts("help","print help information");
  parser.accepts("url","[REQUIRED] bootstrap URL").withRequiredArg().describedAs("bootstrap-url").ofType(String.class);
  parser.accepts("partitions","partition-id").withRequiredArg().describedAs("partition-id").withValuesSeparatedBy(',').ofType(Integer.class);
  parser.accepts("store","store name").withRequiredArg().describedAs("store-name").ofType(String.class);
  parser.accepts("primary-zone","primary zone id").withRequiredArg().ofType(Integer.class);
  parser.accepts("verbose","verbose");
  OptionSet options=parser.parse(args);
  boolean verbose=false;
  if (options.hasArgument("help")) {
    printUsage();
    return;
  }
  if (!options.hasArgument("url") || !options.hasArgument("partitions") || !options.hasArgument("store")|| !options.hasArgument("primary-zone")) {
    printUsage();
    return;
  }
  if (options.has("verbose")) {
    verbose=true;
  }
  String url=(String)options.valueOf("url");
  String storeName=(String)options.valueOf("store");
  List<Integer> partitionIds=(List<Integer>)options.valuesOf("partitions");
  Integer primaryZoneId=(Integer)options.valueOf("primary-zone");
  ConsistencyCheckStats globalStats=new ConsistencyCheckStats();
  Map<Integer,ConsistencyCheckStats> partitionStatsMap=new HashMap<Integer,ConsistencyCheckStats>();
  for (  Integer partitionId : partitionIds) {
    ConsistencyCheckStats partitionStats=doConsistencyCheck(storeName,partitionId,url,primaryZoneId,verbose);
    partitionStatsMap.put(partitionId,partitionStats);
    globalStats.append(partitionStats);
  }
  StringBuilder statsString=new StringBuilder();
  statsString.append("TYPE,Store,ParitionId,KeysConsistent,KeysTotal,Consistency\n");
  for (  Map.Entry<Integer,ConsistencyCheckStats> entry : partitionStatsMap.entrySet()) {
    Integer partitionId=entry.getKey();
    ConsistencyCheckStats partitionStats=entry.getValue();
    statsString.append("STATS,");
    statsString.append(storeName + ",");
    statsString.append(partitionId + ",");
    statsString.append(partitionStats.getConsistentKeys() + ",");
    statsString.append(partitionStats.getTotalKeys() + ",");
    statsString.append((double)(partitionStats.getConsistentKeys()) / (double)partitionStats.getTotalKeys());
    statsString.append("\n");
  }
  statsString.append("STATS,");
  statsString.append(storeName + ",");
  statsString.append("aggregate,");
  statsString.append(globalStats.getConsistentKeys() + ",");
  statsString.append(globalStats.getTotalKeys() + ",");
  statsString.append((double)(globalStats.getConsistentKeys()) / (double)globalStats.getTotalKeys());
  statsString.append("\n");
  System.out.println();
  System.out.println(statsString.toString());
}
