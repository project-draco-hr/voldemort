def _read_numeric(self, input, typedef):
    '\n        Internal routine for reading numeric types:\n\n        >>> s = JsonTypeSerializer(\'"string"\')\n\n        >>> s._read_numeric(StringIO.StringIO(\'*\'), \'int8\')\n        42\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00*\'), \'int16\')\n        42\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00\\x00\\x00*\'), \'int32\')\n        42\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\'), \'int64\')\n        42\n\n        >>> s._read_numeric(StringIO.StringIO(\'>\\x80\\x00\\x00\'), \'float32\')\n        0.25\n        >>> s._read_numeric(StringIO.StringIO(\'?\\xd0\\x00\\x00\\x00\\x00\\x00\\x00\'), \'float64\')\n        0.25\n\n        Inputs corresponding to the smallest of each respective type are read as None:\n\n        >>> s._read_numeric(StringIO.StringIO(\'\\x80\'), \'int8\') is None\n        True\n        >>> s._read_numeric(StringIO.StringIO(\'\\x80\\x00\'), \'int16\') is None\n        True\n        >>> s._read_numeric(StringIO.StringIO(\'\\x80\\x00\\x00\\x00\'), \'int32\') is None\n        True\n        >>> s._read_numeric(StringIO.StringIO(\'\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\'), \'int64\') is None\n        True\n\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00\\x00\\x00\\x01\'), \'float32\') is None\n        True\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\'), \'float64\') is None\n        True\n\n        An insufficiently large input will cause an error:\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00*\'), \'int32\')\n        Traceback (most recent call last):\n        ...\n        SerializationException: Unexpected end of input.\n\n        An excessively large one will leave dangling input, which may cause problems down the line\n        as well as returning the wrong value:\n        >>> s._read_numeric(StringIO.StringIO(\'\\x00\\x00\\x00*\'), \'int16\')\n        0\n\n        >>> s._read_numeric(StringIO.StringIO(\'?\\xd0\\x00\\x00\\x00\\x00\\x00\\x00\'), \'float32\') == 0.25\n        False\n        '
    size = struct.calcsize(FORMATS[typedef])
    bytes = input.read(size)
    if (len(bytes) < size):
        raise SerializationException('Unexpected end of input.')
    val = struct.unpack(FORMATS[typedef], bytes)[0]
    if (val == MINS[typedef]):
        return None
    return val
