@staticmethod
def create_from_xml(node):
    '\n        Static factory method that creates a serializer from then XML description in a\n        stores.xml file.\n\n        >>> from xml.dom import minidom\n        >>> xml = minidom.parseString(\n        ...   \'<serializer><type>json</type><schema-info version="0">"int32"</schema-info></serializer>\')\n        >>> s = JsonTypeSerializer.create_from_xml(xml)\n        >>> s.writes(42)\n        \'\\x00\\x00\\x00\\x00*\'\n\n        Output always uses the latest version:\n        >>> xml = minidom.parseString(\n        ...         \'<serializer><type>json</type>\' +\n        ...                     \'<schema-info version="0">"int32"</schema-info>\' +\n        ...                     \'<schema-info version="1">"int64"</schema-info></serializer>\')\n        >>> s = JsonTypeSerializer.create_from_xml(xml)\n        >>> s.writes(42)\n        \'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\'\n\n        Duplicate version numbers are an error:\n        >>> xml = minidom.parseString(\n        ...         \'<serializer><type>json</type>\' +\n        ...                     \'<schema-info version="0">"int32"</schema-info>\' +\n        ...                     \'<schema-info version="0">"int64"</schema-info></serializer>\')\n        >>> s = JsonTypeSerializer.create_from_xml(xml)\n        Traceback (most recent call last):\n        ...\n        SerializationException: Schema info has duplicates of version: 0\n\n        The version "none" means no versioning, and no version will be output in the byte stream:\n        >>> xml = minidom.parseString(\n        ...   \'<serializer><type>json</type><schema-info version="none">"int32"</schema-info></serializer>\')\n        >>> s = JsonTypeSerializer.create_from_xml(xml)\n        >>> s.writes(42)\n        \'\\x00\\x00\\x00*\'\n\n        You can\'t mix a "none" version with a regular version number:\n        >>> xml = minidom.parseString(\n        ...         \'<serializer><type>json</type>\' +\n        ...                     \'<schema-info version="none">"int32"</schema-info>\' +\n        ...                     \'<schema-info version="0">"int64"</schema-info></serializer>\')\n        >>> s = JsonTypeSerializer.create_from_xml(xml)\n        Traceback (most recent call last):\n        ...\n        SerializationException: Schema info has duplicates of version: 0\n        '
    typedef = dict()
    has_version = True
    for schema_info in node.getElementsByTagName('schema-info'):
        version = schema_info.getAttribute('version')
        if (not version):
            version = 0
        elif (version == 'none'):
            version = 0
            has_version = False
        else:
            version = int(version)
        if (version in typedef):
            raise SerializationException(('Schema info has duplicates of version: %d' % version))
        typedef[version] = ''.join((elem.data for elem in schema_info.childNodes if (elem.nodeType == minidom.Node.TEXT_NODE)))
    if (not typedef):
        raise SerializationException('No schemas specified')
    if ((not has_version) and (len(typedef) > 1)):
        raise SerializationException('Schema info has version="none" and multiple versions')
    if (not has_version):
        return JsonTypeSerializer(typedef[0])
    else:
        return JsonTypeSerializer(typedef)
