{
  adminClient=RebalanceUtils.createTempAdminClient(voldemortConfig,metadataStore.getCluster(),voldemortConfig.getMaxParallelStoresRebalancing());
  final List<Exception> failures=new ArrayList<Exception>();
  final ConcurrentLinkedQueue<String> storesRebalancing=new ConcurrentLinkedQueue<String>();
  final AtomicInteger completedStoresCount=new AtomicInteger(0);
  final int totalStoresCount=stealInfo.getUnbalancedStoreList().size();
  try {
    for (    final String storeName : ImmutableList.copyOf(stealInfo.getUnbalancedStoreList())) {
      executors.submit(new Runnable(){
        public void run(){
          try {
            boolean isReadOnlyStore=metadataStore.getStoreDef(storeName).getType().compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;
            storesRebalancing.add(storeName);
            updateStatus(getHeader(stealInfo) + "Completed working on " + completedStoresCount.get()+ " out of "+ totalStoresCount+ " stores. Still rebalancing "+ storesRebalancing);
            rebalanceStore(storeName,adminClient,stealInfo,isReadOnlyStore);
            stealInfo.removeStore(storeName);
            storesRebalancing.remove(storeName);
            completedStoresCount.getAndIncrement();
            updateStatus(getHeader(stealInfo) + "Completed working on " + completedStoresCount.get()+ " out of "+ totalStoresCount+ " stores. Still rebalancing "+ storesRebalancing);
          }
 catch (          Exception e) {
            logger.error(getHeader(stealInfo) + "Error while rebalancing for store " + storeName+ " - "+ e.getMessage(),e);
            failures.add(e);
          }
        }
      }
);
    }
    waitForShutdown();
    List<String> unbalancedStores=Lists.newArrayList(stealInfo.getUnbalancedStoreList());
    if (unbalancedStores.isEmpty()) {
      logger.info(getHeader(stealInfo) + "Rebalance of " + stealInfo+ " completed successfully for all "+ totalStoresCount+ " stores");
      updateStatus(getHeader(stealInfo) + "Rebalance of " + stealInfo+ " completed successfully for all "+ totalStoresCount+ " stores");
      metadataStore.deleteRebalancingState(stealInfo);
    }
 else {
      throw new VoldemortRebalancingException(getHeader(stealInfo) + "Failed to rebalance task " + stealInfo+ ". Could only complete "+ completedStoresCount.get()+ " out of "+ totalStoresCount+ " stores",failures);
    }
  }
  finally {
    logger.info(getHeader(stealInfo) + "Releasing permit for donor node " + stealInfo.getDonorId());
    rebalancer.releaseRebalancingPermit(stealInfo.getDonorId());
    adminClient.close();
    adminClient=null;
  }
}
