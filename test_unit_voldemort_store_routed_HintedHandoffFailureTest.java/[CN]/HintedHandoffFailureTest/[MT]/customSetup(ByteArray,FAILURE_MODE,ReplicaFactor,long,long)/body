{
  cluster=getThreeNodeCluster();
  storeDef=getStoreDef(STORE_NAME,replicaFactor,RoutingStrategyType.CONSISTENT_STRATEGY);
  strategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDef,cluster);
  InMemoryStorageEngine<ByteArray,byte[],byte[]> inMemoryStorageEngine=new InMemoryStorageEngine<ByteArray,byte[],byte[]>(STORE_NAME);
  LoggingStore<ByteArray,byte[],byte[]> loggingStore=new LoggingStore<ByteArray,byte[],byte[]>(inMemoryStorageEngine);
  VoldemortException e=new UnreachableStoreException("Node down");
  ForceFailStore<ByteArray,byte[],byte[]> failureStore=new ForceFailStore<ByteArray,byte[],byte[]>(loggingStore,e);
  SleepyStore<ByteArray,byte[],byte[]> sleepyFailureStore=new SleepyStore<ByteArray,byte[],byte[]>(sleepTime,failureStore);
  failureStore.setFail(true);
  List<Integer> failingNodeIdList=Lists.newArrayList();
  List<Node> replicaList=strategy.routeRequest(key.get());
switch (failureMode) {
case FAIL_FIRST_REPLICA_NODE:
    failingNodeIdList.add(replicaList.get(1).getId());
  break;
case FAIL_ALL_REPLICAS:
for (int nodeId=1; nodeId < replicaList.size(); nodeId++) {
  failingNodeIdList.add(nodeId);
}
break;
}
subStores.clear();
for (int i=0; i < NUM_NODES_TOTAL; i++) {
if (failingNodeIdList.contains(i)) {
subStores.put(i,sleepyFailureStore);
}
 else {
subStores.put(i,loggingStore);
}
}
setFailureDetector(subStores);
routedStoreThreadPool=Executors.newFixedThreadPool(NUM_THREADS);
routedStoreFactory=new RoutedStoreFactory(routedStoreThreadPool);
Map<Integer,NonblockingStore> nonblockingSlopStores=Maps.newHashMap();
for (Node node : cluster.getNodes()) {
int nodeId=node.getId();
SlopStorageEngine slopStorageEngine=new SlopStorageEngine(new InMemoryStorageEngine<ByteArray,byte[],byte[]>(SLOP_STORE_NAME),cluster);
StorageEngine<ByteArray,Slop,byte[]> storageEngine=slopStorageEngine.asSlopStore();
nonblockingSlopStores.put(nodeId,routedStoreFactory.toNonblockingStore(slopStorageEngine));
slopStores.put(nodeId,storageEngine);
}
Map<Integer,NonblockingStore> nonblockingStores=Maps.newHashMap();
for (Map.Entry<Integer,Store<ByteArray,byte[],byte[]>> entry : subStores.entrySet()) nonblockingStores.put(entry.getKey(),routedStoreFactory.toNonblockingStore(entry.getValue()));
store=new DelayedPutPipelineRoutedStore(subStores,nonblockingStores,slopStores,nonblockingSlopStores,cluster,storeDef,failureDetector,hintDelayTimeMs);
return failingNodeIdList;
}
