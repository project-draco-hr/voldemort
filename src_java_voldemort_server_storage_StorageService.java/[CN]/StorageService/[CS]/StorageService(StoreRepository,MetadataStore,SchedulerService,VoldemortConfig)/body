{
  super(ServiceType.STORAGE);
  this.voldemortConfig=config;
  this.scheduler=scheduler;
  this.storeRepository=storeRepository;
  this.metadata=metadata;
  this.scanPermitWrapper=new ScanPermitWrapper(voldemortConfig.getNumScanPermits());
  this.storageConfigs=new ConcurrentHashMap<String,StorageConfiguration>();
  this.clientThreadPool=new ClientThreadPool(config.getClientMaxThreads(),config.getClientThreadIdleMs(),config.getClientMaxQueuedRequests());
  this.storeFactory=new ClientRequestExecutorPool(config.getClientSelectors(),config.getClientMaxConnectionsPerNode(),config.getClientConnectionTimeoutMs(),config.getSocketTimeoutMs(),config.getSocketBufferSize(),config.getSocketKeepAlive());
  FailureDetectorConfig failureDetectorConfig=new FailureDetectorConfig(voldemortConfig).setCluster(metadata.getCluster()).setStoreVerifier(new ServerStoreVerifier(storeFactory,metadata,config));
  this.failureDetector=create(failureDetectorConfig,config.isJmxEnabled());
  this.storeStats=new StoreStats();
  this.routedStoreFactory=new RoutedStoreFactory(voldemortConfig.isPipelineRoutedStoreEnabled(),this.clientThreadPool,voldemortConfig.getTimeoutConfig());
  if (this.voldemortConfig.getStorageConfigurations().contains(ReadOnlyStorageConfiguration.class.getName())) {
    long rate=this.voldemortConfig.getHdfsMaxBytesPerSecond();
    this.dynThrottleLimit=new DynamicThrottleLimit(rate);
  }
 else   this.dynThrottleLimit=null;
}
