{
  Cluster cluster=this.metadata.getCluster();
  storeRepository.addStorageEngine(engine);
  Store<ByteArray,byte[],byte[]> store=engine;
  boolean isMetadata=store.getName().compareTo(MetadataStore.METADATA_STORE_NAME) == 0;
  boolean isSlop=storeType.compareTo("slop") == 0;
  boolean isView=storeType.compareTo(ViewStorageConfiguration.TYPE_NAME) == 0;
  if (voldemortConfig.isVerboseLoggingEnabled())   store=new LoggingStore<ByteArray,byte[],byte[]>(store,cluster.getName(),SystemTime.INSTANCE);
  if (!isSlop) {
    if (!isReadOnly && !isMetadata && !isView) {
      if (voldemortConfig.isEnforceRetentionPolicyOnRead() && storeDef != null) {
        RetentionEnforcingStore retentionEnforcingStore=new RetentionEnforcingStore(store,storeDef,voldemortConfig.isDeleteExpiredValuesOnRead(),SystemTime.INSTANCE);
        metadata.addMetadataStoreListener(store.getName(),retentionEnforcingStore);
        store=retentionEnforcingStore;
      }
      if (voldemortConfig.isEnableRebalanceService()) {
        ProxyPutStats proxyPutStats=new ProxyPutStats(aggregatedProxyPutStats);
        if (voldemortConfig.isJmxEnabled()) {
          JmxUtils.registerMbean(proxyPutStats,JmxUtils.createObjectName("voldemort.store.rebalancing",engine.getName() + "-proxy-puts"));
        }
        store=new RedirectingStore(store,metadata,storeRepository,failureDetector,storeFactory,proxyPutWorkerPool,proxyPutStats);
        if (voldemortConfig.isJmxEnabled()) {
          MBeanServer mbeanServer=ManagementFactory.getPlatformMBeanServer();
          ObjectName name=null;
          if (this.voldemortConfig.isEnableJmxClusterName())           name=JmxUtils.createObjectName(cluster.getName() + "." + JmxUtils.getPackageName(RedirectingStore.class),store.getName());
 else           name=JmxUtils.createObjectName(JmxUtils.getPackageName(RedirectingStore.class),store.getName());
synchronized (mbeanServer) {
            if (mbeanServer.isRegistered(name))             JmxUtils.unregisterMbean(mbeanServer,name);
            JmxUtils.registerMbean(mbeanServer,JmxUtils.createModelMBean(store),name);
          }
        }
      }
    }
    if (voldemortConfig.isMetadataCheckingEnabled() && !isMetadata) {
      store=new InvalidMetadataCheckingStore(metadata.getNodeId(),store,metadata);
    }
  }
  if (voldemortConfig.isStatTrackingEnabled()) {
    StatTrackingStore statStore=new StatTrackingStore(store,this.storeStats);
    store=statStore;
    if (voldemortConfig.isJmxEnabled()) {
      MBeanServer mbeanServer=ManagementFactory.getPlatformMBeanServer();
      ObjectName name=null;
      if (this.voldemortConfig.isEnableJmxClusterName())       name=JmxUtils.createObjectName(metadata.getCluster().getName() + "." + JmxUtils.getPackageName(store.getClass()),store.getName());
 else       name=JmxUtils.createObjectName(JmxUtils.getPackageName(store.getClass()),store.getName());
synchronized (mbeanServer) {
        if (mbeanServer.isRegistered(name))         JmxUtils.unregisterMbean(mbeanServer,name);
        JmxUtils.registerMbean(mbeanServer,JmxUtils.createModelMBean(new StoreStatsJmx(statStore.getStats())),name);
      }
    }
    if (voldemortConfig.isEnableQuotaLimiting() && !isMetadata) {
      StoreStats currentStoreStats=statStore.getStats();
      FileBackedCachingStorageEngine quotaStore=(FileBackedCachingStorageEngine)storeRepository.getStorageEngine(SystemStoreConstants.SystemStoreName.voldsys$_store_quotas.toString());
      QuotaLimitStats quotaStats=new QuotaLimitStats(this.aggregatedQuotaStats);
      QuotaLimitingStore rateLimitingStore=new QuotaLimitingStore(store,currentStoreStats,quotaStats,quotaStore,metadata);
      if (voldemortConfig.isJmxEnabled()) {
        JmxUtils.registerMbean(quotaStats,JmxUtils.createObjectName("voldemort.store.quota",store.getName() + "-quota-limit-stats"));
      }
      store=rateLimitingStore;
    }
  }
  storeRepository.addLocalStore(store);
}
