{
  registerEngine(metadata,false);
  for (  String configClassName : voldemortConfig.getStorageConfigurations())   initStorageConfig(configClassName);
  storageConfigs.put(ViewStorageConfiguration.TYPE_NAME,new ViewStorageConfiguration(voldemortConfig,metadata.getStoreDefList(),storeRepository));
  if (voldemortConfig.isSlopEnabled()) {
    logger.info("Initializing the slop store using " + voldemortConfig.getSlopStoreType());
    StorageConfiguration config=storageConfigs.get(voldemortConfig.getSlopStoreType());
    if (config == null)     throw new ConfigurationException("Attempt to open store " + SlopStorageEngine.SLOP_STORE_NAME + " but "+ voldemortConfig.getSlopStoreType()+ " storage engine has not been enabled.");
    SlopStorageEngine slopEngine=new SlopStorageEngine(config.getStore(SlopStorageEngine.SLOP_STORE_NAME),metadata.getCluster());
    registerEngine(slopEngine,false);
    storeRepository.setSlopStore(slopEngine);
    if (voldemortConfig.isSlopPusherJobEnabled()) {
      GregorianCalendar cal=new GregorianCalendar();
      cal.add(Calendar.SECOND,(int)(voldemortConfig.getSlopFrequencyMs() / Time.MS_PER_SECOND));
      Date nextRun=cal.getTime();
      logger.info("Initializing slop pusher job type " + voldemortConfig.getPusherType() + " at "+ nextRun);
      scheduler.schedule("slop",(voldemortConfig.getPusherType().compareTo(BlockingSlopPusherJob.TYPE_NAME) == 0) ? new BlockingSlopPusherJob(storeRepository,metadata,failureDetector,voldemortConfig,scanPermits) : new StreamingSlopPusherJob(storeRepository,metadata,failureDetector,voldemortConfig,scanPermits),nextRun,voldemortConfig.getSlopFrequencyMs());
      if (voldemortConfig.isRepairEnabled()) {
        cal.add(Calendar.SECOND,(int)(voldemortConfig.getRepairStartMs() / Time.MS_PER_SECOND));
        nextRun=cal.getTime();
        logger.info("Initializing repair job " + voldemortConfig.getPusherType() + " at "+ nextRun);
        RepairJob job=new RepairJob(storeRepository,metadata,scanPermits);
        JmxUtils.registerMbean(job,JmxUtils.createObjectName(job.getClass()));
        scheduler.schedule("repair",job,nextRun);
      }
    }
  }
  List<StoreDefinition> storeDefs=new ArrayList<StoreDefinition>(this.metadata.getStoreDefList());
  logger.info("Initializing stores:");
  for (  StoreDefinition def : storeDefs)   if (!def.isView())   openStore(def);
  for (  StoreDefinition def : storeDefs)   if (def.isView())   openStore(def);
  if (voldemortConfig.isStatTrackingEnabled())   JmxUtils.registerMbean(new StoreStatsJmx(this.storeStats),JmxUtils.createObjectName("voldemort.store.stats.aggregate","aggregate-perf"));
  logger.info("All stores initialized.");
}
