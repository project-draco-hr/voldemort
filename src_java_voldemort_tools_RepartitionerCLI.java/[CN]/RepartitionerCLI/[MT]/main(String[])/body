{
  setupParser();
  OptionSet options=getValidOptions(args);
  String currentClusterXML=(String)options.valueOf("current-cluster");
  String currentStoresXML=(String)options.valueOf("current-stores");
  String interimClusterXML=new String(currentClusterXML);
  if (options.has("interim-cluster")) {
    interimClusterXML=(String)options.valueOf("interim-cluster");
  }
  String finalStoresXML=new String(currentStoresXML);
  if (options.has("final-stores")) {
    finalStoresXML=(String)options.valueOf("final-stores");
  }
  Cluster currentCluster=new ClusterMapper().readCluster(new File(currentClusterXML));
  List<StoreDefinition> currentStoreDefs=new StoreDefinitionsMapper().readStoreList(new File(currentStoresXML));
  RebalanceUtils.validateClusterStores(currentCluster,currentStoreDefs);
  Cluster interimCluster=new ClusterMapper().readCluster(new File(interimClusterXML));
  List<StoreDefinition> finalStoreDefs=new StoreDefinitionsMapper().readStoreList(new File(finalStoresXML));
  RebalanceUtils.validateClusterStores(interimCluster,finalStoreDefs);
  RebalanceUtils.validateCurrentInterimCluster(currentCluster,interimCluster);
  int attempts=CmdUtils.valueOf(options,"attempts",Repartitioner.DEFAULT_REPARTITION_ATTEMPTS);
  String outputDir=null;
  if (options.has("output-dir")) {
    outputDir=(String)options.valueOf("output-dir");
  }
  boolean disableNodeBalancing=options.has("disable-node-balancing");
  boolean disableZoneBalancing=options.has("disable-zone-balancing");
  boolean enableRandomSwaps=options.has("enable-random-swaps");
  int randomSwapAttempts=CmdUtils.valueOf(options,"random-swap-attempts",Repartitioner.DEFAULT_RANDOM_SWAP_ATTEMPTS);
  int randomSwapSuccesses=CmdUtils.valueOf(options,"random-swap-successes",Repartitioner.DEFAULT_RANDOM_SWAP_SUCCESSES);
  boolean enableGreedySwaps=options.has("enable-greedy-swaps");
  int greedySwapAttempts=CmdUtils.valueOf(options,"greedy-swap-attempts",Repartitioner.DEFAULT_GREEDY_SWAP_ATTEMPTS);
  int greedyMaxPartitionsPerNode=CmdUtils.valueOf(options,"greedy-max-partitions-per-node",Repartitioner.DEFAULT_GREEDY_MAX_PARTITIONS_PER_NODE);
  int greedyMaxPartitionsPerZone=CmdUtils.valueOf(options,"greedy-max-partitions-per-zone",Repartitioner.DEFAULT_GREEDY_MAX_PARTITIONS_PER_ZONE);
  int maxContiguousPartitionsPerZone=CmdUtils.valueOf(options,"max-contiguous-partitions",Repartitioner.DEFAULT_MAX_CONTIGUOUS_PARTITIONS);
  if (disableNodeBalancing && !enableRandomSwaps && !enableGreedySwaps&& maxContiguousPartitionsPerZone == 0) {
    printUsageAndDie("Did not enable any forms for repartitioning.");
  }
  if ((options.has("random-swap-attempts") || options.has("random-swap-successes")) && !enableRandomSwaps) {
    printUsageAndDie("Provided arguments for generate random swaps but did not enable the feature");
  }
  if ((options.has("greedy-swap-attempts") || options.has("greedy-max-partitions-per-node") || options.has("greedy-max-partitions-per-zone")) && !enableGreedySwaps) {
    printUsageAndDie("Provided arguments for generate greedy swaps but did not enable the feature");
  }
  List<Integer> greedyZoneIds=Repartitioner.DEFAULT_GREEDY_ZONE_IDS;
  Repartitioner.repartition(currentCluster,currentStoreDefs,interimCluster,finalStoreDefs,outputDir,attempts,disableNodeBalancing,disableZoneBalancing,enableRandomSwaps,randomSwapAttempts,randomSwapSuccesses,enableGreedySwaps,greedyZoneIds,greedySwapAttempts,greedyMaxPartitionsPerNode,greedyMaxPartitionsPerZone,maxContiguousPartitionsPerZone);
}
