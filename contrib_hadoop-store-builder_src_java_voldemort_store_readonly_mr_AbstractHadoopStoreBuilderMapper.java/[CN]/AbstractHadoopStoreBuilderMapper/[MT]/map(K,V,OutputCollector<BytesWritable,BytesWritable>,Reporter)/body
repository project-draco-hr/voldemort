{
  byte[] keyBytes=keySerializer.toBytes(makeKey(key,value));
  byte[] valBytes=valueSerializer.toBytes(makeValue(key,value));
  if (keySerializerDefinition.hasCompression()) {
    keyBytes=keyCompressor.deflate(keyBytes);
  }
  if (valueSerializerDefinition.hasCompression()) {
    valBytes=valueCompressor.deflate(valBytes);
  }
  List<Integer> partitionList=routingStrategy.getPartitionList(keyBytes);
  Node[] partitionToNode=routingStrategy.getPartitionToNode();
  byte[] outputValue;
  BytesWritable outputKey;
  if (saveKeys) {
    outputValue=new byte[valBytes.length + keyBytes.length + 4+ 4+ 4+ 4];
    ByteUtils.writeInt(outputValue,keyBytes.length,4 + 4);
    System.arraycopy(keyBytes,0,outputValue,4 + 4 + 4,keyBytes.length);
    ByteUtils.writeInt(outputValue,valBytes.length,4 + 4 + 4+ keyBytes.length);
    System.arraycopy(valBytes,0,outputValue,4 + 4 + 4+ keyBytes.length+ 4,valBytes.length);
    outputKey=new BytesWritable(ByteUtils.copy(md5er.digest(keyBytes),0,2 * ByteUtils.SIZE_OF_INT));
  }
 else {
    outputValue=new byte[valBytes.length + 4 + 4];
    System.arraycopy(valBytes,0,outputValue,8,valBytes.length);
    outputKey=new BytesWritable(md5er.digest(keyBytes));
  }
  for (  Integer partition : partitionList) {
    ByteUtils.writeInt(outputValue,partitionToNode[partition].getId(),0);
    ByteUtils.writeInt(outputValue,partition,4);
    BytesWritable outputVal=new BytesWritable(outputValue);
    output.collect(outputKey,outputVal);
  }
  md5er.reset();
}
