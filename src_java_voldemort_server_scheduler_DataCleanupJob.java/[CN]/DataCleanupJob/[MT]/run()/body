{
  if (!isServerInNormalState() && !isServerInOfflineState()) {
    return;
  }
  acquireCleanupPermit(scanProgressThisRun,deleteProgressThisRun);
  store.beginBatchModifications();
  ClosableIterator<Pair<K,Versioned<V>>> iterator=null;
  try {
    logger.info("Starting data cleanup on store \"" + store.getName() + "\"...");
    long now=time.getMilliseconds();
    iterator=store.entries();
    while (iterator.hasNext()) {
      if (Thread.currentThread().isInterrupted()) {
        logger.info("Datacleanup job halted.");
        return;
      }
      final long INETERVAL=10000;
      long entriesScanned=scanProgressThisRun.get();
      if (entriesScanned % INETERVAL == 0) {
        if (!isServerInNormalState() && !isServerInOfflineState()) {
          return;
        }
      }
      scanProgressThisRun.incrementAndGet();
      Pair<K,Versioned<V>> keyAndVal=iterator.next();
      VectorClock clock=(VectorClock)keyAndVal.getSecond().getVersion();
      if (now - clock.getTimestamp() > maxAgeMs) {
        store.delete(keyAndVal.getFirst(),clock);
        final long entriesDeleted=this.deleteProgressThisRun.incrementAndGet();
        if (logger.isDebugEnabled() && entriesDeleted % INETERVAL == 0) {
          logger.debug("Deleted item " + this.deleteProgressThisRun.get());
        }
      }
      throttler.maybeThrottle(1);
    }
    logger.info("Data cleanup on store \"" + store.getName() + "\" is complete; "+ this.deleteProgressThisRun.get()+ " items deleted. "+ scanProgressThisRun.get()+ " items scanned");
  }
 catch (  Exception e) {
    logger.error("Error in data cleanup job for store " + store.getName() + ": ",e);
  }
 finally {
    closeIterator(iterator);
    logger.info("Releasing lock  after data cleanup on \"" + store.getName() + "\".");
    this.cleanupPermits.release(this.getClass().getCanonicalName());
synchronized (this) {
      totalEntriesScanned+=scanProgressThisRun.get();
      scanProgressThisRun.set(0);
      totalEntriesDeleted+=deleteProgressThisRun.get();
      deleteProgressThisRun.set(0);
    }
    store.endBatchModifications();
  }
}
