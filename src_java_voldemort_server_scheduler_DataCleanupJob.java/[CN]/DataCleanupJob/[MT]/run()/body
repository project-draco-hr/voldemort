{
  acquireCleanupPermit();
  ClosableIterator<Pair<K,Versioned<V>>> iterator=null;
  try {
    logger.info("Starting data cleanup on store \"" + store.getName() + "\"...");
    int deleted=0;
    long now=time.getMilliseconds();
    iterator=store.entries();
    try {
      while (iterator.hasNext()) {
        if (Thread.currentThread().isInterrupted()) {
          logger.info("Datacleanup job halted.");
          return;
        }
        Pair<K,Versioned<V>> keyAndVal=iterator.next();
        VectorClock clock=(VectorClock)keyAndVal.getSecond().getVersion();
        if (now - clock.getTimestamp() > maxAgeMs) {
          store.delete(keyAndVal.getFirst(),clock);
          deleted++;
          if (deleted % 10000 == 0)           logger.debug("Deleted item " + deleted);
        }
        throttler.maybeThrottle(clock.sizeInBytes());
      }
    }
 catch (    RuntimeException e) {
      iterator.close();
      logger.error("Error during data cleanup",e);
      throw e;
    }
 finally {
      if (iterator != null)       iterator.close();
    }
    logger.info("Data cleanup on store \"" + store.getName() + "\" is complete; "+ deleted+ " items deleted.");
  }
 catch (  Exception e) {
    logger.error("Error in data cleanup job for store " + store.getName() + ": ",e);
  }
 finally {
    if (iterator != null)     iterator.close();
    this.cleanupPermits.release();
  }
}
