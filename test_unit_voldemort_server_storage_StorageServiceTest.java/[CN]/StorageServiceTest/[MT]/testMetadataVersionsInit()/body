{
  Store<ByteArray,byte[],byte[]> versionStore=storeRepository.getLocalStore(SystemStoreConstants.SystemStoreName.voldsys$_metadata_version_persistence.name());
  Properties props=new Properties();
  try {
    ByteArray metadataVersionsKey=new ByteArray(StorageService.VERSIONS_METADATA_STORE.getBytes());
    List<Versioned<byte[]>> versionList=versionStore.get(metadataVersionsKey,null);
    if (versionList != null && versionList.size() > 0) {
      byte[] versionsByteArray=versionList.get(0).getValue();
      if (versionsByteArray != null) {
        props.load(new ByteArrayInputStream(versionsByteArray));
      }
 else {
        fail("Illegal value returned for metadata key: " + StorageService.VERSIONS_METADATA_STORE);
      }
    }
 else {
      fail("Illegal value returned for metadata key: " + StorageService.VERSIONS_METADATA_STORE);
    }
    if (!props.containsKey(StorageService.CLUSTER_VERSION_KEY)) {
      fail(StorageService.CLUSTER_VERSION_KEY + " not present in " + StorageService.VERSIONS_METADATA_STORE);
    }
    if (!props.containsKey(StorageService.STORES_VERSION_KEY)) {
      fail(StorageService.STORES_VERSION_KEY + " not present in " + StorageService.VERSIONS_METADATA_STORE);
    }
    for (    StoreDefinition def : storeDefs) {
      if (!props.containsKey(def.getName())) {
        fail(def.getName() + " store not present in " + StorageService.VERSIONS_METADATA_STORE);
      }
    }
  }
 catch (  Exception e) {
    fail("Error in retrieving : " + StorageService.VERSIONS_METADATA_STORE + " key from "+ SystemStoreConstants.SystemStoreName.voldsys$_metadata_version_persistence.name()+ " store. ");
  }
}
