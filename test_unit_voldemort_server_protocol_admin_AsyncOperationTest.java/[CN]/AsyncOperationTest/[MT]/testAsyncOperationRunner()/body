{
  SchedulerService schedulerService=new SchedulerService(2,SystemTime.INSTANCE);
  AsyncOperationRunner asyncOperationRunner=new AsyncOperationRunner(schedulerService,10);
  final AtomicBoolean completedOp0=new AtomicBoolean(false);
  final AtomicBoolean completedOp1=new AtomicBoolean(false);
  int opId0=asyncOperationRunner.getUniqueRequestId();
  asyncOperationRunner.submitOperation(opId0,new AsyncOperation(opId0,"op0"){
    @Override public void operate() throws Exception {
      Thread.sleep(1000);
      completedOp0.set(true);
    }
    @Override public void stop(){
    }
  }
);
  int opId1=asyncOperationRunner.getUniqueRequestId();
  asyncOperationRunner.submitOperation(opId1,new AsyncOperation(opId1,"op1"){
    @Override public void operate() throws Exception {
      completedOp1.set(true);
    }
    @Override public void stop(){
    }
  }
);
  List<Integer> opList=asyncOperationRunner.getAsyncOperationList(false);
  assertFalse("doesn't list completed operations",opList.contains(1));
  assertTrue("lists a pending operation",opList.contains(0));
  opList=asyncOperationRunner.getAsyncOperationList(true);
  assertTrue("lists all operations",opList.containsAll(Arrays.asList(0,1)));
  Thread.sleep(1000);
  assertTrue("operation 0 finished",completedOp0.get());
  assertTrue("operation 1 finished",completedOp1.get());
}
