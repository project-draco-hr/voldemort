{
  Results result=generateResults();
  NumberFormat nf=NumberFormat.getInstance();
  nf.setMaximumFractionDigits(4);
  nf.setGroupingUsed(false);
  out.println("[" + getName() + "]\tOperations: "+ operations);
  out.println("[" + getName() + "]\tAverage(ms): "+ nf.format((((double)totalLatency) / ((double)operations))));
  out.println("[" + getName() + "]\tMin(ms): "+ nf.format(minLatency));
  out.println("[" + getName() + "]\tMax(ms): "+ nf.format(maxLatency));
  out.println("[" + getName() + "]\tMedian(ms): "+ nf.format(result.medianLatency));
  out.println("[" + getName() + "]\t95th(ms): "+ nf.format(result.q95Latency));
  out.println("[" + getName() + "]\t99th(ms): "+ nf.format(result.q99Latency));
  for (  Integer i : returnCodes.keySet()) {
    int[] val=returnCodes.get(i);
    out.println("[" + getName() + "]\tReturn: "+ VoldemortWrapper.ReturnCode.values()[i]+ "\t"+ val[0]);
  }
  for (  Integer i : warningCodes.keySet()) {
    int[] val=returnCodes.get(i);
    out.println("[" + getName() + "]\tWarning: "+ VoldemortWrapper.WarningCode.values()[i]+ "\t"+ val[0]);
  }
  if (!this.summaryOnly) {
    for (int i=0; i < buckets; i++) {
      out.println("[" + getName() + "]: "+ i+ "\t"+ histogram[i]);
    }
    out.println("[" + getName() + "]: >"+ buckets+ "\t"+ histogramOverflow);
  }
}
