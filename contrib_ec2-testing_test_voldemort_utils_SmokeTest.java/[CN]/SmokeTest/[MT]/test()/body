{
  Map<String,String> dnsNames=new HashMap<String,String>();
  dnsNames.put("ec2-75-101-191-206.compute-1.amazonaws.com","domU-12-31-39-07-84-D2.compute-1.internal");
  dnsNames.put("ec2-67-202-36-69.compute-1.amazonaws.com","domU-12-31-39-07-A5-05.compute-1.internal");
  dnsNames.put("ec2-174-129-60-214.compute-1.amazonaws.com","domU-12-31-39-06-8C-36.compute-1.internal");
  Map<String,Integer> nodeIds=generateClusterDescriptor(dnsNames,"/home/kirk/voldemortdev/voldemort/config/single_node_cluster/config/cluster.xml");
  final CommandLineClusterConfig config=new CommandLineClusterConfig();
  config.setHostNames(dnsNames.keySet());
  config.setHostUserId("root");
  config.setSshPrivateKey(new File("/home/kirk/Dropbox/Configuration/AWS/id_rsa-mustardgrain-keypair"));
  config.setVoldemortParentDirectory("somesubdirectory");
  config.setVoldemortRootDirectory("somesubdirectory/voldemort");
  config.setVoldemortHomeDirectory("somesubdirectory/voldemort/config/single_node_cluster");
  config.setNodeIds(nodeIds);
  config.setSourceDirectory(new File("/home/kirk/voldemortdev/voldemort"));
  Map<String,String> remoteTestArguments=new HashMap<String,String>();
  final String bootstrapUrl=dnsNames.values().iterator().next();
  int startKeyIndex=0;
  final int numRequests=10000;
  final int iterations=100;
  for (  String publicHostName : dnsNames.keySet()) {
    remoteTestArguments.put(publicHostName,"-wd --start-key-index " + (startKeyIndex * numRequests) + " --iterations "+ iterations+ " tcp://"+ bootstrapUrl+ ":6666 test "+ numRequests);
    startKeyIndex++;
  }
  config.setRemoteTestArguments(remoteTestArguments);
  new RsyncDeployer(config).execute();
  new Thread(new Runnable(){
    public void run(){
      try {
        new SshClusterStarter(config).execute();
      }
 catch (      ClusterOperationException e) {
        e.printStackTrace();
      }
    }
  }
).start();
  Thread.sleep(5000);
  List<RemoteTestResult> remoteTestResults=new SshRemoteTest(config).execute();
  for (  RemoteTestResult remoteTestResult : remoteTestResults) {
    System.out.println(remoteTestResult.getHostName() + " for writes:");
    for (    RemoteTestIteration remoteTestIteration : remoteTestResult.getRemoteTestIterations()) {
      System.out.println("\t" + remoteTestIteration.getWrites());
    }
  }
  new SshClusterStopper(config).execute();
}
