{
  int currentNumNodes=currentCluster.getNumberOfNodes();
  int targetNumNodes=targetCluster.getNumberOfNodes();
  List<Integer> newNodeIds=Lists.newArrayList();
  List<Integer> donorNodeIds=Lists.newArrayList();
  List<Node> allNodes=Lists.newArrayList();
  HashMap<Integer,Integer> numPartitionsPerZone=Maps.newHashMap();
  HashMap<Integer,Integer> numNodesPerZone=Maps.newHashMap();
  HashMap<Integer,Integer> numDonorNodesPerZone=Maps.newHashMap();
  for (  Node node : targetCluster.getNodes()) {
    if (node.getPartitionIds().isEmpty()) {
      newNodeIds.add(node.getId());
    }
 else {
      donorNodeIds.add(node.getId());
      if (numDonorNodesPerZone.containsKey(node.getZoneId())) {
        int currentNumDonorNodesInZone=numNodesPerZone.get(node.getZoneId());
        currentNumDonorNodesInZone+=1;
        numDonorNodesPerZone.put(node.getZoneId(),currentNumDonorNodesInZone);
      }
 else {
        numDonorNodesPerZone.put(node.getZoneId(),1);
      }
    }
    allNodes.add(updateNode(node,Lists.newArrayList(node.getPartitionIds())));
    if (numPartitionsPerZone.containsKey(node.getZoneId())) {
      int currentNumPartitionsInZone=numPartitionsPerZone.get(node.getZoneId());
      currentNumPartitionsInZone+=node.getNumberOfPartitions();
      numPartitionsPerZone.put(node.getZoneId(),currentNumPartitionsInZone);
    }
 else {
      numPartitionsPerZone.put(node.getZoneId(),node.getNumberOfPartitions());
    }
    if (numNodesPerZone.containsKey(node.getZoneId())) {
      int currentNumNodesInZone=numNodesPerZone.get(node.getZoneId());
      currentNumNodesInZone+=1;
      numNodesPerZone.put(node.getZoneId(),currentNumNodesInZone);
    }
 else {
      numNodesPerZone.put(node.getZoneId(),1);
    }
  }
  Cluster returnCluster=updateCluster(targetCluster,allNodes);
  int totalPrimaryPartitionsMoved=0;
  if (currentNumNodes == targetNumNodes) {
    return Pair.create(returnCluster,totalPrimaryPartitionsMoved);
  }
  for (  int newNodeId : newNodeIds) {
    Node newNode=targetCluster.getNodeById(newNodeId);
    int partitionsToSteal=(int)Math.floor(numPartitionsPerZone.get(newNode.getZoneId()) * 1.0 / numNodesPerZone.get(newNode.getZoneId()));
    int nodesStolenFrom=0;
    for (int index=0; index < donorNodeIds.size(); index++) {
      int donorNodeId=donorNodeIds.get(index);
      Node donorNode=currentCluster.getNodeById(donorNodeId);
      if (donorNode.getZoneId() != newNode.getZoneId()) {
        continue;
      }
      if (partitionsToSteal <= 0)       break;
      int partitionsToDonate=Math.max((int)Math.floor(partitionsToSteal / (numDonorNodesPerZone.get(newNode.getZoneId()) - nodesStolenFrom)),1);
      nodesStolenFrom++;
      if (returnCluster.getNodeById(donorNodeId).getNumberOfPartitions() <= partitionsToDonate) {
        continue;
      }
      List<Integer> donorPartitions=Lists.newArrayList(returnCluster.getNodeById(donorNodeId).getPartitionIds());
      Collections.shuffle(donorPartitions,new Random(System.currentTimeMillis()));
      int partitionsDonated=0;
      for (      int donorPartition : donorPartitions) {
        if (partitionsDonated == partitionsToDonate)         break;
        Cluster intermediateCluster=createUpdatedCluster(returnCluster,returnCluster.getNodeById(newNodeId),returnCluster.getNodeById(donorNodeId),Lists.newArrayList(donorPartition));
        if (RebalanceUtils.getCrossZoneMoves(intermediateCluster,new RebalanceClusterPlan(returnCluster,intermediateCluster,storeDefs,true)) == 0) {
          returnCluster=intermediateCluster;
          partitionsDonated++;
          totalPrimaryPartitionsMoved++;
        }
      }
      partitionsToSteal-=partitionsDonated;
    }
  }
  return Pair.create(returnCluster,totalPrimaryPartitionsMoved);
}
