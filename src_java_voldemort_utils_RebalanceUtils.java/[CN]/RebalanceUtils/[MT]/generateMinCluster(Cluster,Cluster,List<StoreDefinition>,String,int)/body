{
  HashMap<StoreDefinition,Integer> uniqueStores=KeyDistributionGenerator.getUniqueStoreDefinitionsWithCounts(storeDefs);
  List<ByteArray> keys=KeyDistributionGenerator.generateKeys(KeyDistributionGenerator.DEFAULT_NUM_KEYS);
  Cluster minCluster=targetCluster;
  int minMoves=Integer.MAX_VALUE;
  double minStdDev=Double.MAX_VALUE;
  for (int numTries=0; numTries < tries; numTries++) {
    Pair<Cluster,Integer> minClusterMove=RebalanceUtils.generateMinCluster(currentCluster,targetCluster,storeDefs);
    double currentStdDev=KeyDistributionGenerator.getStdDeviation(KeyDistributionGenerator.generateOverallDistributionWithUniqueStores(minClusterMove.getFirst(),uniqueStores,keys));
    if (currentStdDev < minStdDev && minClusterMove.getSecond() < minMoves) {
      minMoves=minClusterMove.getSecond();
      minStdDev=currentStdDev;
      minCluster=minClusterMove.getFirst();
    }
    System.out.println("Optimization number " + numTries + "] "+ minMoves+ " moves, "+ minStdDev+ " std dev");
    System.out.println("Current distribution");
    System.out.println("--------------------");
    System.out.println(KeyDistributionGenerator.printOverallDistribution(currentCluster,storeDefs,keys));
    System.out.println("Target distribution");
    System.out.println("--------------------");
    System.out.println(KeyDistributionGenerator.printOverallDistribution(minCluster,storeDefs,keys));
    if (outputDir != null) {
      try {
        FileUtils.writeStringToFile(new File(outputDir,RebalanceUtils.finalClusterFileName + tries),new ClusterMapper().writeCluster(minCluster));
      }
 catch (      Exception e) {
      }
    }
  }
  return;
}
