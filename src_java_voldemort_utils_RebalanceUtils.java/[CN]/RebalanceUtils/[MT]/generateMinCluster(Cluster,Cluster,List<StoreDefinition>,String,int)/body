{
  HashMap<StoreDefinition,Integer> uniqueStores=KeyDistributionGenerator.getUniqueStoreDefinitionsWithCounts(storeDefs);
  List<ByteArray> keys=KeyDistributionGenerator.generateKeys(KeyDistributionGenerator.DEFAULT_NUM_KEYS);
  Cluster minCluster=targetCluster;
  int minMoves=Integer.MAX_VALUE;
  double minStdDev=Double.MAX_VALUE;
  for (int numTries=0; numTries < tries; numTries++) {
    Pair<Cluster,Integer> minClusterMove=RebalanceUtils.generateMinCluster(currentCluster,targetCluster,storeDefs);
    double currentStdDev=KeyDistributionGenerator.getStdDeviation(KeyDistributionGenerator.generateOverallDistributionWithUniqueStores(minClusterMove.getFirst(),uniqueStores,keys));
    System.out.println("Optimization number " + numTries + ": "+ minClusterMove.getSecond()+ " moves, "+ currentStdDev+ " std dev");
    System.out.println("Current min moves: " + minMoves + "; current min std dev: "+ minStdDev);
    if (currentStdDev < minStdDev) {
      if (minClusterMove.getSecond() > minMoves) {
        System.out.println("Warning: the newly chosen cluster requires " + (minClusterMove.getSecond() - minMoves) + " addition moves!");
      }
      minMoves=minClusterMove.getSecond();
      minStdDev=currentStdDev;
      minCluster=minClusterMove.getFirst();
      System.out.println("Current distribution");
      System.out.println(KeyDistributionGenerator.printOverallDistribution(currentCluster,storeDefs,keys));
      System.out.println("-------------------------\n");
      System.out.println("Target distribution");
      System.out.println(KeyDistributionGenerator.printOverallDistribution(minCluster,storeDefs,keys));
      System.out.println("=========================\n");
      if (outputDir != null) {
        try {
          FileUtils.writeStringToFile(new File(outputDir,RebalanceUtils.finalClusterFileName + numTries),new ClusterMapper().writeCluster(minCluster));
        }
 catch (        Exception e) {
        }
      }
    }
  }
  System.out.println("\n==========================");
  System.out.println("Final distribution");
  System.out.println(KeyDistributionGenerator.printOverallDistribution(minCluster,storeDefs,keys));
  System.out.println("=========================\n");
  return;
}
