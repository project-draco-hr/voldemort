{
  Cluster returnCluster=Cluster.cloneCluster(currentCluster);
  for (  Integer nodeId : currentCluster.getNodeIdsInZone(dropZoneId)) {
    for (    Integer partitionId : currentCluster.getNodeById(nodeId).getPartitionIds()) {
      int finalZoneId=-1;
      int finalNodeId=-1;
      int adjacentPartitionId=partitionId;
      do {
        adjacentPartitionId=(adjacentPartitionId + 1) % currentCluster.getNumberOfPartitions();
        finalNodeId=currentCluster.getNodeForPartitionId(adjacentPartitionId).getId();
        finalZoneId=currentCluster.getZoneForPartitionId(adjacentPartitionId).getId();
        if (adjacentPartitionId == partitionId) {
          logger.error("ParititionId " + partitionId + "stays unchanged \n");
        }
 else {
          logger.info("ParititionId " + partitionId + " goes together with partition "+ adjacentPartitionId+ " on node "+ finalNodeId+ " in zone "+ finalZoneId);
          returnCluster=UpdateClusterUtils.createUpdatedCluster(returnCluster,finalNodeId,Lists.newArrayList(partitionId));
        }
      }
 while (finalZoneId == dropZoneId);
    }
  }
  return returnCluster;
}
