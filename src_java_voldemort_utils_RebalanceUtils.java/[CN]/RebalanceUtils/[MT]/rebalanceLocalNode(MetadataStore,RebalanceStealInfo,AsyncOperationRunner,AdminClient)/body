{
  int requestId=asyncRunner.getUniqueRequestId();
  asyncRunner.submitOperation(requestId,new AsyncOperation(requestId,"rebalanceNode:" + stealInfo.toString()){
    private int fetchAndUpdateAsyncId=-1;
    @Override public void operate() throws Exception {
synchronized (metadataStore) {
        checkCurrentState(metadataStore,stealInfo);
        setRebalancingState(metadataStore,stealInfo);
      }
      fetchAndUpdateAsyncId=startAsyncPartitionFetch(metadataStore,stealInfo);
      adminClient.waitForCompletion(metadataStore.getNodeId(),fetchAndUpdateAsyncId,24 * 60 * 60,TimeUnit.SECONDS);
      metadataStore.cleanAllRebalancingState();
    }
    @Override @JmxGetter(name="asyncTaskStatus") public AsyncOperationStatus getStatus(){
      return adminClient.getAsyncRequestStatus(metadataStore.getNodeId(),fetchAndUpdateAsyncId);
    }
    private int startAsyncPartitionFetch(    MetadataStore metadataStore,    RebalanceStealInfo stealInfo) throws Exception {
      return adminClient.fetchAndUpdateStreams(metadataStore.getNodeId(),stealInfo.getDonorId(),stealInfo.getStoreName(),stealInfo.getPartitionList(),null);
    }
    private void setRebalancingState(    MetadataStore metadataStore,    RebalanceStealInfo stealInfo) throws Exception {
      metadataStore.put(MetadataStore.SERVER_STATE_KEY,VoldemortState.REBALANCING_MASTER_SERVER);
      metadataStore.put(MetadataStore.REBALANCING_STEAL_INFO,stealInfo);
    }
    private void checkCurrentState(    MetadataStore metadataStore,    RebalanceStealInfo stealInfo) throws Exception {
      if (metadataStore.getServerState().equals(VoldemortState.REBALANCING_MASTER_SERVER) && metadataStore.getRebalancingStealInfo().getDonorId() != stealInfo.getDonorId())       throw new VoldemortException("Server " + metadataStore.getNodeId() + " is already rebalancing from:"+ metadataStore.getRebalancingStealInfo()+ " rejecting rebalance request:"+ stealInfo);
    }
  }
);
  return requestId;
}
