{
  final RoutingStrategy routingStrategy=new RoutingStrategyFactory().updateRoutingStrategy(storeDef,cluster);
  final Map<Integer,Set<Pair<Integer,Integer>>> nodeIdToReplicas=new HashMap<Integer,Set<Pair<Integer,Integer>>>();
  final Map<Integer,Integer> partitionToNodeIdMap=ClusterUtils.getCurrentPartitionMapping(cluster);
  for (  Node node : cluster.getNodes()) {
    nodeIdToReplicas.put(node.getId(),new HashSet<Pair<Integer,Integer>>());
  }
  int zonesWithPartitions=0;
  for (  Integer zoneId : cluster.getZoneIds()) {
    if (cluster.getNumberOfPartitionsInZone(zoneId) > 0) {
      zonesWithPartitions++;
    }
  }
  for (  Node node : cluster.getNodes()) {
    for (    Integer primary : node.getPartitionIds()) {
      List<Integer> replicaPartitionList=routingStrategy.getReplicatingPartitionList(primary);
      if ((replicaPartitionList.size() % zonesWithPartitions != 0) || ((replicaPartitionList.size() / zonesWithPartitions) != (storeDef.getReplicationFactor() / cluster.getNumberOfZones()))) {
        throw new VoldemortException("Number of replicas returned (" + replicaPartitionList.size() + ") does not make sense given the replication factor ("+ storeDef.getReplicationFactor()+ ") and that there are "+ cluster.getNumberOfZones()+ " zones of which "+ zonesWithPartitions+ " have partitions (and of which "+ (cluster.getNumberOfZones() - zonesWithPartitions)+ " are empty).");
      }
      int replicaType=0;
      if (!includePrimary) {
        replicaPartitionList.remove(primary);
        replicaType=1;
      }
      for (      Integer replicaPartition : replicaPartitionList) {
        Integer replicaNodeId=partitionToNodeIdMap.get(replicaPartition);
        nodeIdToReplicas.get(replicaNodeId).add(Pair.create(replicaType,primary));
        replicaType++;
      }
    }
  }
  return nodeIdToReplicas;
}
