{
  List<Node> allNodes=Lists.newArrayList();
  Set<Integer> zoneIds=new HashSet<Integer>();
  for (  Node node : targetCluster.getNodes()) {
    allNodes.add(updateNode(node,Lists.newArrayList(node.getPartitionIds())));
    zoneIds.add(node.getZoneId());
  }
  Cluster returnCluster=updateCluster(targetCluster,allNodes);
  int totalPrimaryPartitionsMoved=0;
  double currentStdDev=KeyDistributionGenerator.getStdDeviation(KeyDistributionGenerator.generateOverallDistributionWithUniqueStores(returnCluster,uniqueStores,keys));
  for (  Integer zoneId : zoneIds) {
    int successes=0;
    for (int i=0; i < swapAttempts; i++) {
      Pair<Cluster,Integer> shuffleResults=swapRandomPartitionsWithinZone(returnCluster,zoneId);
      double nextStdDev=KeyDistributionGenerator.getStdDeviation(KeyDistributionGenerator.generateOverallDistributionWithUniqueStores(shuffleResults.getFirst(),uniqueStores,keys));
      if (nextStdDev < currentStdDev) {
        ++successes;
        System.out.println("Swap improved std dev: " + currentStdDev + " -> "+ nextStdDev+ " (improvement "+ successes+ " on swap attempt "+ i+ " in zone "+ zoneId+ ")");
        returnCluster=shuffleResults.getFirst();
        currentStdDev=nextStdDev;
        totalPrimaryPartitionsMoved+=shuffleResults.getSecond();
        if (successes >= swapSuccesses) {
          break;
        }
      }
    }
  }
  return Pair.create(returnCluster,totalPrimaryPartitionsMoved);
}
