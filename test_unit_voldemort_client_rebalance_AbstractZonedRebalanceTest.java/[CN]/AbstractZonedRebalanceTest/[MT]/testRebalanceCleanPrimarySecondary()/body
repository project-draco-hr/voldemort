{
  logger.info("Starting testRebalanceCleanPrimary");
  try {
    Cluster currentCluster=ServerTestUtils.getLocalZonedCluster(6,2,new int[]{0,0,0,1,1,1},new int[][]{{0},{1,6},{2},{3},{4,7},{5}});
    Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,2,Lists.newArrayList(7));
    targetCluster=RebalanceUtils.createUpdatedCluster(targetCluster,5,Lists.newArrayList(6));
    List<Integer> serverList=Arrays.asList(0,1,2,3,4,5);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("enable.repair","true");
    currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
    targetCluster=updateCluster(targetCluster);
    String bootstrapUrl=getBootstrapUrl(currentCluster,0);
    int maxParallel=RebalanceController.MAX_PARALLEL_REBALANCING;
    int maxTries=RebalanceController.MAX_TRIES_REBALANCING;
    long timeout=RebalanceController.REBALANCING_CLIENT_TIMEOUT_SEC;
    boolean stealerBased=!useDonorBased;
    RebalanceController rebalanceClient=new RebalanceController(bootstrapUrl,maxParallel,maxTries,timeout,stealerBased);
    int batchSize=RebalancePlan.BATCH_SIZE;
    RebalancePlan rebalancePlan=rebalanceClient.getPlan(targetCluster,batchSize);
    try {
      populateData(currentCluster,rwStoreDefWithReplication);
      AdminClient admin=rebalanceClient.getAdminClient();
      List<ByteArray> p6KeySamples=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(6),20);
      List<ByteArray> p1KeySamples=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(1),20);
      List<ByteArray> p3KeySamples=sampleKeysFromPartition(admin,0,rwStoreDefWithReplication.getName(),Arrays.asList(3),20);
      List<ByteArray> p2KeySamples=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(2),20);
      List<ByteArray> p7KeySamples=sampleKeysFromPartition(admin,4,rwStoreDefWithReplication.getName(),Arrays.asList(7),20);
      rebalanceAndCheck(rebalancePlan,rebalanceClient,Arrays.asList(0,1,2,3));
      checkConsistentMetadata(targetCluster,serverList);
      for (int i=0; i < 6; i++) {
        admin.storeMntOps.repairJob(i);
      }
      for (int i=0; i < 6; i++) {
        ServerTestUtils.waitForAsyncOperationOnServer(serverMap.get(i),"Repair",5000);
      }
      checkForKeyExistence(admin,2,rwStoreDefWithReplication.getName(),p6KeySamples);
      checkForKeyExistence(admin,0,rwStoreDefWithReplication.getName(),p2KeySamples);
      checkForKeyExistence(admin,1,rwStoreDefWithReplication.getName(),p1KeySamples);
      checkForKeyExistence(admin,0,rwStoreDefWithReplication.getName(),p3KeySamples);
      checkForKeyExistence(admin,4,rwStoreDefWithReplication.getName(),p7KeySamples);
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRebalanceCleanPrimarySecondary ",ae);
    throw ae;
  }
}
