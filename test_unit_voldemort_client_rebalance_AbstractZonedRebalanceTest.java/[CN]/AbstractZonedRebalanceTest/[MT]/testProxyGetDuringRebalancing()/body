{
  logger.info("Starting testProxyGetDuringRebalancing");
  try {
    Cluster currentCluster=ServerTestUtils.getLocalZonedCluster(4,2,new int[]{0,0,1,1},new int[][]{{0,2,4},{6},{1,3,5},{7}});
    Cluster tmpfinalCluster=RebalanceUtils.createUpdatedCluster(currentCluster,3,Lists.newArrayList(2));
    final Cluster finalCluster=RebalanceUtils.createUpdatedCluster(tmpfinalCluster,1,Lists.newArrayList(3));
    final List<Integer> serverList=Arrays.asList(0,1,2,3);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("admin.max.threads","5");
    final Cluster updatedCurrentCluster=startServers(currentCluster,storeDefFileWithReplication,serverList,configProps);
    ExecutorService executors=Executors.newFixedThreadPool(2);
    final AtomicBoolean rebalancingComplete=new AtomicBoolean(false);
    final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
    String bootstrapUrl=getBootstrapUrl(updatedCurrentCluster,0);
    int maxParallel=2;
    boolean stealerBased=true;
    final ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,maxParallel,stealerBased,finalCluster);
    try {
      populateData(currentCluster,rwStoreDefWithReplication);
      final SocketStoreClientFactory factory=new SocketStoreClientFactory(new ClientConfig().setBootstrapUrls(getBootstrapUrl(currentCluster,0)).setEnableLazy(false).setSocketTimeout(120,TimeUnit.SECONDS));
      final StoreClient<String,String> storeClientRW=new DefaultStoreClient<String,String>(rwStoreDefWithReplication.getName(),null,factory,3);
      final CountDownLatch latch=new CountDownLatch(2);
      executors.execute(new Runnable(){
        @Override public void run(){
          try {
            List<String> keys=new ArrayList<String>(testEntries.keySet());
            while (!rebalancingComplete.get()) {
              int index=(int)(Math.random() * keys.size());
              try {
                Versioned<String> value=storeClientRW.get(keys.get(index));
                assertNotSame("StoreClient get() should not return null.",null,value);
                assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
              }
 catch (              Exception e) {
                logger.error("Exception in proxy get thread",e);
                e.printStackTrace();
                exceptions.add(e);
              }
            }
          }
 catch (          Exception e) {
            logger.error("Exception in proxy get thread",e);
            exceptions.add(e);
          }
 finally {
            factory.close();
            latch.countDown();
          }
        }
      }
);
      executors.execute(new Runnable(){
        @Override public void run(){
          try {
            Thread.sleep(500);
            rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(0,1,2,3));
            Thread.sleep(500);
            rebalancingComplete.set(true);
            checkConsistentMetadata(finalCluster,serverList);
          }
 catch (          Exception e) {
            exceptions.add(e);
          }
 finally {
            try {
              stopServer(serverList);
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
            latch.countDown();
          }
        }
      }
);
      latch.await();
      executors.shutdown();
      executors.awaitTermination(300,TimeUnit.SECONDS);
      if (exceptions.size() > 0) {
        for (        Exception e : exceptions) {
          e.printStackTrace();
        }
        fail("Should not see any exceptions.");
      }
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testProxyGetDuringRebalancing ",ae);
    throw ae;
  }
}
