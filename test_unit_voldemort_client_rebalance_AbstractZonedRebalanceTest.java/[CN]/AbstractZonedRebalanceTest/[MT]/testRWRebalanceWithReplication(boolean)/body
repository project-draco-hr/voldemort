{
  logger.info("Starting testRWRebalanceWithReplication");
  Cluster currentCluster=ServerTestUtils.getLocalZonedCluster(4,2,new int[]{0,0,1,1},new int[][]{{0,2,4},{6},{1,3,5},{7}});
  Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,3,Lists.newArrayList(2));
  targetCluster=RebalanceUtils.createUpdatedCluster(targetCluster,1,Lists.newArrayList(3));
  List<Integer> serverList=Arrays.asList(0,1,2,3);
  Map<String,String> configProps=new HashMap<String,String>();
  configProps.put("admin.max.threads","5");
  if (serial)   configProps.put("max.parallel.stores.rebalancing",String.valueOf(1));
  currentCluster=startServers(currentCluster,storeDefFileWithReplication,serverList,configProps);
  targetCluster=updateCluster(targetCluster);
  String bootstrapUrl=getBootstrapUrl(currentCluster,0);
  int maxParallel=5;
  int maxTries=RebalanceController.MAX_TRIES_REBALANCING;
  long timeout=RebalanceController.REBALANCING_CLIENT_TIMEOUT_SEC;
  boolean stealerBased=!useDonorBased;
  RebalanceController rebalanceClient=new RebalanceController(bootstrapUrl,maxParallel,maxTries,timeout,stealerBased);
  int batchSize=100;
  RebalancePlan rebalancePlan=rebalanceClient.getPlan(targetCluster,batchSize);
  try {
    populateData(currentCluster,rwStoreDefWithReplication);
    rebalanceAndCheck(rebalancePlan,rebalanceClient,Arrays.asList(0,1,2,3));
    checkConsistentMetadata(targetCluster,serverList);
  }
  finally {
    stopServer(serverList);
  }
}
