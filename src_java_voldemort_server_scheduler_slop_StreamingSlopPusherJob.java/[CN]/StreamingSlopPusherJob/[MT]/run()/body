{
  if (!metadataStore.getServerState().equals(MetadataStore.VoldemortState.NORMAL_SERVER)) {
    logger.error("Cannot run slop pusher job since cluster is rebalancing");
    return;
  }
synchronized (lock) {
    boolean exceptionOccurred=false;
    Date startTime=new Date();
    logger.info("Started streaming slop pusher job at " + startTime);
    SlopStorageEngine slopStorageEngine=storeRepo.getSlopStore();
    ClosableIterator<Pair<ByteArray,Versioned<Slop>>> iterator=null;
    AtomicLong attemptedPushes=new AtomicLong(0);
    for (    Node node : cluster.getNodes()) {
      attemptedByNode.put(node.getId(),0L);
      succeededByNode.put(node.getId(),0L);
    }
    try {
      StorageEngine<ByteArray,Slop,byte[]> slopStore=slopStorageEngine.asSlopStore();
      iterator=slopStore.entries();
      while (iterator.hasNext()) {
        Pair<ByteArray,Versioned<Slop>> keyAndVal;
        try {
          keyAndVal=iterator.next();
          Versioned<Slop> versioned=keyAndVal.getSecond();
          int nodeId=versioned.getValue().getNodeId();
          Node node=cluster.getNodeById(nodeId);
          attemptedPushes.incrementAndGet();
          Long attempted=attemptedByNode.get(nodeId);
          attemptedByNode.put(nodeId,attempted + 1L);
          if (attemptedPushes.get() % 10000 == 0)           logger.info("Attempted pushing " + attemptedPushes + " slops");
          logger.trace("On slop = " + versioned.getValue().getNodeId() + " => "+ new String(versioned.getValue().getKey().get()));
          if (failureDetector.isAvailable(node)) {
            SynchronousQueue<Versioned<Slop>> slopQueue=slopQueues.get(nodeId);
            if (slopQueue == null) {
              slopQueue=new SynchronousQueue<Versioned<Slop>>();
              slopQueues.put(nodeId,slopQueue);
              consumerResults.add(consumerExecutor.submit(new SlopConsumer(nodeId,slopQueue,slopStorageEngine)));
            }
            slopQueue.offer(versioned,voldemortConfig.getClientRoutingTimeoutMs(),TimeUnit.MILLISECONDS);
            readThrottler.maybeThrottle(nBytesRead(keyAndVal));
          }
 else {
            logger.trace(node + " declared down, won't push slop");
          }
        }
 catch (        RejectedExecutionException e) {
          throw new VoldemortException("Ran out of threads in executor",e);
        }
      }
    }
 catch (    InterruptedException e) {
      logger.warn("Interrupted exception",e);
      exceptionOccurred=true;
    }
catch (    Exception e) {
      logger.error(e,e);
      exceptionOccurred=true;
    }
 finally {
      try {
        if (iterator != null)         iterator.close();
      }
 catch (      Exception e) {
        logger.warn("Failed to close iterator cleanly as database might be closed",e);
      }
      for (      SynchronousQueue<Versioned<Slop>> slopQueue : slopQueues.values()) {
        try {
          slopQueue.offer(END,voldemortConfig.getClientRoutingTimeoutMs(),TimeUnit.MILLISECONDS);
        }
 catch (        InterruptedException e) {
          logger.warn("Error putting poison pill",e);
        }
      }
      for (      Future result : consumerResults) {
        try {
          result.get();
        }
 catch (        Exception e) {
          logger.warn("Exception in consumer",e);
        }
      }
      if (!exceptionOccurred) {
        Map<Integer,Long> outstanding=Maps.newHashMapWithExpectedSize(cluster.getNumberOfNodes());
        for (        int nodeId : succeededByNode.keySet()) {
          logger.debug("Slops pushed to node " + nodeId + " - "+ succeededByNode.get(nodeId));
          outstanding.put(nodeId,attemptedByNode.get(nodeId) - succeededByNode.get(nodeId));
        }
        slopStorageEngine.resetStats(outstanding);
      }
      consumerResults.clear();
      slopQueues.clear();
    }
    logger.info("Completed streaming slop pusher job which started at " + startTime);
  }
}
