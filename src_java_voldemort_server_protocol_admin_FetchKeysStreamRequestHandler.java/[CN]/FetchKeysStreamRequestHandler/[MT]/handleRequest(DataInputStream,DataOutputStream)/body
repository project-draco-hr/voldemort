{
  if (!keyIterator.hasNext())   return StreamRequestHandlerState.COMPLETE;
  long startNs=System.nanoTime();
  ByteArray key=keyIterator.next();
  stats.recordDiskTime(handle,System.nanoTime() - startNs);
  throttler.maybeThrottle(key.length());
  if (RebalanceUtils.checkKeyBelongsToPartition(key.get(),replicaToPartitionList,routingStrategy) && filter.accept(key,null) && counter % skipRecords == 0) {
    VAdminProto.FetchPartitionEntriesResponse.Builder response=VAdminProto.FetchPartitionEntriesResponse.newBuilder();
    response.setKey(ProtoUtils.encodeBytes(key));
    fetched++;
    handle.incrementEntriesScanned();
    Message message=response.build();
    startNs=System.nanoTime();
    ProtoUtils.writeMessage(outputStream,message);
    stats.recordNetworkTime(handle,System.nanoTime() - startNs);
  }
  counter++;
  if (0 == counter % 100000) {
    long totalTime=(System.currentTimeMillis() - startTime) / 1000;
    if (logger.isDebugEnabled())     logger.debug("fetchKeys() scanned " + counter + " keys, fetched "+ fetched+ " keys for store:"+ storageEngine.getName()+ " replicaToPartitionList:"+ replicaToPartitionList+ " in "+ totalTime+ " s");
  }
  if (keyIterator.hasNext())   return StreamRequestHandlerState.WRITING;
 else {
    stats.closeHandle(handle);
    return StreamRequestHandlerState.COMPLETE;
  }
}
