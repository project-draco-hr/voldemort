{
  OptionParser parser=getParser();
  List<String> storeNames=null;
  String url=null;
  List<Integer> nodeIds=null;
  Boolean allNodes=true;
  Boolean confirm=false;
  OptionSet options=parser.parse(args);
  if (options.has(AdminParserUtils.OPT_HELP)) {
    printHelp(System.out);
    return;
  }
  AdminParserUtils.checkRequired(options,AdminParserUtils.OPT_STORE);
  AdminParserUtils.checkRequired(options,AdminParserUtils.OPT_URL);
  AdminParserUtils.checkOptional(options,AdminParserUtils.OPT_NODE,AdminParserUtils.OPT_ALL_NODES);
  storeNames=(List<String>)options.valuesOf(AdminParserUtils.OPT_STORE);
  url=(String)options.valueOf(AdminParserUtils.OPT_URL);
  if (options.has(AdminParserUtils.OPT_NODE)) {
    nodeIds=(List<Integer>)options.valuesOf(AdminParserUtils.OPT_NODE);
    allNodes=false;
  }
  if (options.has(AdminParserUtils.OPT_CONFIRM)) {
    confirm=true;
  }
  System.out.println("Prune data resulting from versioned puts");
  System.out.println("Store:");
  System.out.println("  " + Joiner.on(", ").join(storeNames));
  System.out.println("Location:");
  System.out.println("  bootstrap url = " + url);
  if (allNodes) {
    System.out.println("  node = all nodes");
  }
 else {
    System.out.println("  node = " + Joiner.on(", ").join(nodeIds));
  }
  if (!AdminUtils.askConfirm(confirm,"cleanup vector clocks"))   return;
  AdminClient adminClient=AdminUtils.getAdminClient(url);
  Collection<Node> nodes=AdminUtils.getNodes(adminClient,nodeIds,allNodes);
  doCleanupVectorClocks(adminClient,nodes,storeNames);
}
