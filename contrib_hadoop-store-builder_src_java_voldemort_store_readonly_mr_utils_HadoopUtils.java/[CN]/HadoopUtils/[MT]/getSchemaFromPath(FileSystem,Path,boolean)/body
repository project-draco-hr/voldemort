{
  try {
    if (fs.isFile(path)) {
      Map<String,String> m=HadoopUtils.getMetadataFromSequenceFile(fs,path);
      if (!m.containsKey("value.schema") || !m.containsKey("key.schema"))       throw new IllegalArgumentException("No schema found on file " + path.toString());
      return new JsonSchema(JsonTypeDefinition.fromJson(m.get("key.schema")),JsonTypeDefinition.fromJson(m.get("value.schema")));
    }
 else {
      FileStatus[] statuses=null;
      if (fs.isDirectory(path)) {
        statuses=fs.listStatus(path);
      }
 else {
        statuses=fs.globStatus(path);
      }
      if (statuses == null || statuses.length == 0)       throw new IllegalArgumentException("No files found in path pattern " + path.toUri().getPath());
      List<JsonSchema> schemas=new ArrayList<JsonSchema>();
      for (      FileStatus status : statuses) {
        if (!HadoopUtils.shouldPathBeIgnored(status.getPath())) {
          if (!checkSameSchema) {
            return getSchemaFromPath(fs,status.getPath(),checkSameSchema);
          }
          schemas.add(getSchemaFromPath(fs,status.getPath(),checkSameSchema));
        }
      }
      if (schemas.size() > 0) {
        JsonSchema schema=schemas.get(0);
        for (int i=1; i < schemas.size(); i++)         if (!schema.equals(schemas.get(i)))         throw new IllegalArgumentException("The directory " + path.toString() + " contains heterogenous schemas: found both '"+ schema.toString()+ "' and '"+ schemas.get(i).toString()+ "'.");
        return schema;
      }
 else {
        throw new IllegalArgumentException("No Valid metedata file found for Path:" + path.toString());
      }
    }
  }
 catch (  Exception e) {
    logger.error("failed to get metadata from path:" + path);
    throw new RuntimeException(e);
  }
}
