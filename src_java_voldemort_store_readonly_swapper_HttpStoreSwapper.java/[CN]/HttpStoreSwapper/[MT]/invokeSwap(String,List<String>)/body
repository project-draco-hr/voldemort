{
  Map<Integer,String> previousDirs=new HashMap<Integer,String>();
  HashMap<Integer,Exception> exceptions=Maps.newHashMap();
  for (  final Node node : cluster.getNodes()) {
    try {
      String url=node.getHttpUrl() + "/" + readOnlyMgmtPath;
      PostMethod post=new PostMethod(url);
      post.addParameter("operation","swap");
      String dir=fetchFiles.get(node.getId());
      logger.info("Attempting swap for node " + node.getId() + " dir = "+ dir);
      post.addParameter("dir",dir);
      post.addParameter("store",storeName);
      int responseCode=httpClient.executeMethod(post);
      String previousDir=post.getResponseBodyAsString(30000);
      if (responseCode != 200)       throw new VoldemortException("Swap request on node " + node.getId() + " ("+ url+ ") failed: "+ post.getStatusText());
      logger.info("Swap succeeded on node " + node.getId());
      previousDirs.put(node.getId(),previousDir);
    }
 catch (    Exception e) {
      exceptions.put(node.getId(),e);
      logger.error("Exception thrown during swap operation on node " + node.getId() + ": ",e);
    }
  }
  if (!exceptions.isEmpty()) {
    if (rollbackFailedSwap) {
      for (      int successfulNodeId : previousDirs.keySet()) {
        try {
          String url=cluster.getNodeById(successfulNodeId).getHttpUrl() + "/" + readOnlyMgmtPath;
          PostMethod post=new PostMethod(url);
          post.addParameter("operation","rollback");
          post.addParameter("store",storeName);
          post.addParameter("pushVersion",Long.toString(ReadOnlyUtils.getVersionId(new File(previousDirs.get(successfulNodeId)))));
          logger.info("Rolling back data on successful node " + successfulNodeId);
          int responseCode=httpClient.executeMethod(post);
          String response=post.getStatusText();
          if (responseCode == 200) {
            logger.info("Rollback succeeded for node " + successfulNodeId);
          }
 else {
            throw new VoldemortException(response);
          }
        }
 catch (        Exception e) {
          logger.error("Exception thrown during rollback ( after swap ) operation on node " + successfulNodeId + " : ",e);
        }
      }
    }
    for (    int failedNodeId : exceptions.keySet()) {
      logger.error("Error on node " + failedNodeId + " during swap : ",exceptions.get(failedNodeId));
    }
    throw new VoldemortException("Exception during swaps on nodes " + Joiner.on(",").join(exceptions.keySet()) + " failed");
  }
}
