{
  logger.info("Starting testProxyGetDuringRebalancing");
  final Cluster currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3,4,5,6},{7,8}});
  final Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,1,Lists.newArrayList(2,3));
  final List<Integer> serverList=Arrays.asList(0,1);
  Map<String,String> configProps=new HashMap<String,String>();
  configProps.put("admin.max.threads","50");
  final Cluster updatedCurrentCluster=startServers(currentCluster,storeDefFileWithReplication,serverList,configProps);
  final Cluster updatedTargetCluster=updateCluster(targetCluster);
  ExecutorService executors=Executors.newFixedThreadPool(2);
  final AtomicBoolean rebalancingToken=new AtomicBoolean(false);
  final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
  RebalanceClientConfig rebalanceClientConfig=new RebalanceClientConfig();
  rebalanceClientConfig.setMaxParallelRebalancing(2);
  final RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(updatedCurrentCluster,0),rebalanceClientConfig);
  populateData(updatedCurrentCluster,roStoreDefWithReplication,rebalanceClient.getAdminClient(),true);
  populateData(updatedCurrentCluster,rwStoreDefWithReplication,rebalanceClient.getAdminClient(),false);
  final SocketStoreClientFactory factory=new SocketStoreClientFactory(new ClientConfig().setBootstrapUrls(getBootstrapUrl(updatedCurrentCluster,0)).setEnableLazy(false).setSocketTimeout(120,TimeUnit.SECONDS));
  final StoreClient<String,String> storeClientRW=new DefaultStoreClient<String,String>(testStoreNameRW,null,factory,3);
  final StoreClient<String,String> storeClientRO=new DefaultStoreClient<String,String>(testStoreNameRO,null,factory,3);
  executors.execute(new Runnable(){
    public void run(){
      try {
        List<String> keys=new ArrayList<String>(testEntries.keySet());
        while (!rebalancingToken.get()) {
          int index=(int)(Math.random() * keys.size());
          try {
            Versioned<String> value=storeClientRW.get(keys.get(index));
            assertNotSame("StoreClient get() should not return null.",null,value);
            assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
            value=storeClientRO.get(keys.get(index));
            assertNotSame("StoreClient get() should not return null.",null,value);
            assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
          }
 catch (          Exception e) {
            e.printStackTrace();
            exceptions.add(e);
          }
        }
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
 finally {
        factory.close();
      }
    }
  }
);
  executors.execute(new Runnable(){
    public void run(){
      try {
        Thread.sleep(500);
        rebalanceAndCheck(updatedCurrentCluster,updatedTargetCluster,storeDefWithReplication,rebalanceClient,Arrays.asList(0,1));
        Thread.sleep(500);
        rebalancingToken.set(true);
        checkConsistentMetadata(updatedTargetCluster,serverList);
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
 finally {
        try {
          stopServer(serverList);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
);
  executors.shutdown();
  executors.awaitTermination(300,TimeUnit.SECONDS);
  if (exceptions.size() > 0) {
    for (    Exception e : exceptions) {
      e.printStackTrace();
    }
    fail("Should not see any exceptions.");
  }
}
