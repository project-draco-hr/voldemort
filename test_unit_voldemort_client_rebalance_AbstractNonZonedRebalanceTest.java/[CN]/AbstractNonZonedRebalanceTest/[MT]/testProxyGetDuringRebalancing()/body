{
  logger.info("Starting testProxyGetDuringRebalancing");
  try {
    final Cluster currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3,4,5,6},{7,8}});
    final Cluster finalCluster=RebalanceUtils.createUpdatedCluster(currentCluster,1,Lists.newArrayList(2,3));
    final List<Integer> serverList=Arrays.asList(0,1);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("admin.max.threads","5");
    final Cluster updatedCurrentCluster=startServers(currentCluster,storeDefFileWithReplication,serverList,configProps);
    ExecutorService executors=Executors.newFixedThreadPool(2);
    final AtomicBoolean rebalancingComplete=new AtomicBoolean(false);
    final List<Exception> exceptions=Collections.synchronizedList(new ArrayList<Exception>());
    String bootstrapUrl=getBootstrapUrl(currentCluster,0);
    int maxParallel=2;
    boolean stealerBased=true;
    final ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,maxParallel,stealerBased,finalCluster);
    populateData(updatedCurrentCluster,roStoreDefWithReplication,rebalanceKit.controller.getAdminClient(),true);
    populateData(updatedCurrentCluster,rwStoreDefWithReplication,rebalanceKit.controller.getAdminClient(),false);
    final SocketStoreClientFactory factory=new SocketStoreClientFactory(new ClientConfig().setBootstrapUrls(getBootstrapUrl(updatedCurrentCluster,0)).setEnableLazy(false).setSocketTimeout(120,TimeUnit.SECONDS));
    final StoreClient<String,String> storeClientRW=new DefaultStoreClient<String,String>(testStoreNameRW,null,factory,3);
    final StoreClient<String,String> storeClientRO=new DefaultStoreClient<String,String>(testStoreNameRO,null,factory,3);
    final CountDownLatch latch=new CountDownLatch(2);
    executors.execute(new Runnable(){
      @Override public void run(){
        try {
          List<String> keys=new ArrayList<String>(testEntries.keySet());
          while (!rebalancingComplete.get()) {
            int index=(int)(Math.random() * keys.size());
            try {
              Versioned<String> value=storeClientRW.get(keys.get(index));
              assertNotSame("StoreClient get() should not return null.",null,value);
              assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
              value=storeClientRO.get(keys.get(index));
              assertNotSame("StoreClient get() should not return null.",null,value);
              assertEquals("Value returned should be good",new Versioned<String>(testEntries.get(keys.get(index))),value);
            }
 catch (            Exception e) {
              logger.error("Exception in online thread",e);
              exceptions.add(e);
            }
 finally {
              latch.countDown();
            }
          }
        }
 catch (        Exception e) {
          logger.error("Exception in proxy get thread",e);
          exceptions.add(e);
        }
 finally {
          factory.close();
        }
      }
    }
);
    executors.execute(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(500);
          rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(0,1));
          Thread.sleep(500);
          rebalancingComplete.set(true);
          checkConsistentMetadata(finalCluster,serverList);
        }
 catch (        Exception e) {
          exceptions.add(e);
          logger.error("Exception in rebalancing thread",e);
        }
 finally {
          try {
            stopServer(serverList);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
          latch.countDown();
        }
      }
    }
);
    latch.await();
    executors.shutdown();
    executors.awaitTermination(300,TimeUnit.SECONDS);
    if (exceptions.size() > 0) {
      for (      Exception e : exceptions) {
        e.printStackTrace();
      }
      fail("Should not see any exceptions.");
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testProxyGetDuringRebalancing ",ae);
    throw ae;
  }
}
