{
  logger.info("Starting testRORebalanceWithReplication");
  try {
    Cluster currentCluster=ServerTestUtils.getLocalCluster(2,new int[][]{{0,1,2,3,4,5,6},{7,8}});
    Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,1,Lists.newArrayList(2,3));
    List<Integer> serverList=Arrays.asList(0,1);
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("admin.max.threads","5");
    currentCluster=startServers(currentCluster,roStoreDefFileWithReplication,serverList,configProps);
    targetCluster=updateCluster(targetCluster);
    String bootstrapUrl=getBootstrapUrl(currentCluster,0);
    int maxParallel=RebalanceController.MAX_PARALLEL_REBALANCING;
    int maxTries=RebalanceController.MAX_TRIES_REBALANCING;
    long timeout=RebalanceController.REBALANCING_CLIENT_TIMEOUT_SEC;
    boolean stealerBased=!useDonorBased;
    RebalanceController rebalanceClient=new RebalanceController(bootstrapUrl,maxParallel,maxTries,timeout,stealerBased);
    int batchSize=RebalancePlan.PRIMARY_PARTITION_BATCH_SIZE;
    RebalancePlan rebalancePlan=rebalanceClient.getPlan(targetCluster,batchSize);
    try {
      populateData(currentCluster,roStoreDefWithReplication,rebalanceClient.getAdminClient(),true);
      rebalanceAndCheck(rebalancePlan,rebalanceClient,Arrays.asList(0,1));
      checkConsistentMetadata(targetCluster,serverList);
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRORebalanceWithReplication ",ae);
    throw ae;
  }
}
