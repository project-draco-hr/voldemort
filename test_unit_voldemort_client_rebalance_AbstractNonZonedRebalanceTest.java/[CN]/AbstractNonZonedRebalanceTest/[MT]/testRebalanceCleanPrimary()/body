{
  logger.info("Starting testRebalanceCleanPrimary");
  try {
    Cluster currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1,3},{2}});
    Cluster finalCluster=RebalanceUtils.createUpdatedCluster(currentCluster,2,Lists.newArrayList(3));
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("enable.repair","true");
    List<Integer> serverList=Arrays.asList(0,1,2);
    currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
    String bootstrapUrl=getBootstrapUrl(currentCluster,0);
    boolean stealerBased=!useDonorBased;
    final ClusterTestUtils.RebalanceKit rebalanceKit=ClusterTestUtils.getRebalanceKit(bootstrapUrl,stealerBased,finalCluster);
    try {
      AdminClient adminClient=rebalanceKit.controller.getAdminClient();
      populateData(currentCluster,rwStoreDefWithReplication,adminClient,false);
      List<ByteArray> positiveTestKeyList=sampleKeysFromPartition(adminClient,1,rwStoreDefWithReplication.getName(),Arrays.asList(1),20);
      rebalanceAndCheck(rebalanceKit.plan,rebalanceKit.controller,Arrays.asList(0,1,2));
      checkConsistentMetadata(finalCluster,serverList);
      for (int i=0; i < 3; i++) {
        adminClient.storeMntOps.repairJob(i);
      }
      for (int i=0; i < 3; i++) {
        ServerTestUtils.waitForAsyncOperationOnServer(serverMap.get(i),"Repair",5000);
      }
      checkForKeyExistence(adminClient,1,rwStoreDefWithReplication.getName(),positiveTestKeyList);
      logger.info("[Primary] Successful clean after Rebalancing");
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRebalanceCleanPrimary ",ae);
    throw ae;
  }
}
