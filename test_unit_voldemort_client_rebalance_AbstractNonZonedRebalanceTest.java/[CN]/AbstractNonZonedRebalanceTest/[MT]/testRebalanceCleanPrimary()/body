{
  logger.info("Starting testRebalanceCleanPrimary");
  try {
    Cluster currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1,3},{2}});
    Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,2,Lists.newArrayList(3));
    Map<String,String> configProps=new HashMap<String,String>();
    configProps.put("enable.repair","true");
    List<Integer> serverList=Arrays.asList(0,1,2);
    currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
    targetCluster=updateCluster(targetCluster);
    String bootstrapUrl=getBootstrapUrl(currentCluster,0);
    int maxParallel=RebalanceController.MAX_PARALLEL_REBALANCING;
    int maxTries=RebalanceController.MAX_TRIES_REBALANCING;
    long timeout=RebalanceController.REBALANCING_CLIENT_TIMEOUT_SEC;
    boolean stealerBased=!useDonorBased;
    RebalanceController rebalanceClient=new RebalanceController(bootstrapUrl,maxParallel,maxTries,timeout,stealerBased);
    int batchSize=RebalancePlan.BATCH_SIZE;
    RebalancePlan rebalancePlan=rebalanceClient.getPlan(targetCluster,batchSize);
    try {
      populateData(currentCluster,rwStoreDefWithReplication,rebalanceClient.getAdminClient(),false);
      AdminClient admin=rebalanceClient.getAdminClient();
      List<ByteArray> positiveTestKeyList=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(1),20);
      rebalanceAndCheck(rebalancePlan,rebalanceClient,Arrays.asList(0,1,2));
      checkConsistentMetadata(targetCluster,serverList);
      for (int i=0; i < 3; i++) {
        admin.storeMntOps.repairJob(i);
      }
      for (int i=0; i < 3; i++) {
        ServerTestUtils.waitForAsyncOperationOnServer(serverMap.get(i),"Repair",5000);
      }
      checkForKeyExistence(admin,1,rwStoreDefWithReplication.getName(),positiveTestKeyList);
      logger.info("[Primary] Successful clean after Rebalancing");
    }
  finally {
      stopServer(serverList);
    }
  }
 catch (  AssertionError ae) {
    logger.error("Assertion broken in testRebalanceCleanPrimary ",ae);
    throw ae;
  }
}
