{
  logger.info("Starting testRebalanceCleanPrimary");
  Cluster currentCluster=ServerTestUtils.getLocalCluster(3,new int[][]{{0},{1,3},{2}});
  Cluster targetCluster=RebalanceUtils.createUpdatedCluster(currentCluster,2,Lists.newArrayList(3));
  Map<String,String> configProps=new HashMap<String,String>();
  configProps.put("enable.repair","true");
  List<Integer> serverList=Arrays.asList(0,1,2);
  currentCluster=startServers(currentCluster,rwStoreDefFileWithReplication,serverList,configProps);
  targetCluster=updateCluster(targetCluster);
  RebalanceClientConfig config=new RebalanceClientConfig();
  config.setDeleteAfterRebalancingEnabled(false);
  RebalanceController rebalanceClient=new RebalanceController(getBootstrapUrl(currentCluster,0),config);
  try {
    populateData(currentCluster,rwStoreDefWithReplication,rebalanceClient.getAdminClient(),false);
    AdminClient admin=rebalanceClient.getAdminClient();
    List<ByteArray> negativeTestKeyList=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(3),20);
    List<ByteArray> positiveTestKeyList=sampleKeysFromPartition(admin,1,rwStoreDefWithReplication.getName(),Arrays.asList(1),20);
    rebalanceAndCheck(currentCluster,targetCluster,Lists.newArrayList(rwStoreDefWithReplication),rebalanceClient,Arrays.asList(0,1,2));
    checkConsistentMetadata(targetCluster,serverList);
    for (int i=0; i < 3; i++) {
      admin.storeMntOps.repairJob(i);
    }
    for (int i=0; i < 3; i++) {
      ServerTestUtils.waitForAsyncOperationOnServer(serverMap.get(i),"Repair",5000);
    }
    checkForKeyExistence(admin,1,rwStoreDefWithReplication.getName(),positiveTestKeyList);
    checkForKeyNonExistence(admin,1,rwStoreDefWithReplication.getName(),negativeTestKeyList);
    System.out.println("[Primary] Successful clean after Rebalancing");
  }
  finally {
    stopServer(serverList);
  }
}
